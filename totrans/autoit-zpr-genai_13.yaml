- en: '11'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Advanced Built-In Apps by Zapier
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The power of Zapier lies in using the extensive functionality made available
    in the built-in apps, all without using code. You can accomplish a vast array
    of automations using these apps. However, you will find that there will be times
    when you may want to achieve something with your Zaps that won’t be possible using
    the standard, no-code, built-in app functionality or using an existing integration
    in Zapier. When this happens, it is time to use webhooks, code, and API requests
    in your Zaps, thus opening up even more possibilities to automate your manual
    and repetitive tasks with Zapier. You can use Webhooks by Zapier, Code by Zapier,
    and **API Request** action steps, respectively, to accomplish this.
  prefs: []
  type: TYPE_NORMAL
- en: It is also useful to know about one of the other built-in apps that will help
    when you want to store and retrieve small datasets. You can use Storage by Zapier
    to store reference data every time a Zap runs and then share it with other Zaps
    by retrieving it.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, you will be provided with an overview of the more advanced
    built-in apps in Zapier, which allow you to use webhooks and polling triggers,
    make HTTP requests with Webhooks by Zapier, make API calls in action steps using
    your authenticated connection, use **App Extensions** in multiple Zaps, use JavaScript
    or Python code (Code by Zapier) in your Zaps, and store and retrieve data (Storage
    by Zapier). We will also briefly cover how to use ChatGPT to generate code for
    your Code by Zapier steps. These apps and built-in functions are categorized by
    Zapier as **Developer Tools**, and as these are advanced topics, we will only
    provide a brief overview of their functionality, without going into too much detail.
    We will, however, provide you with some use cases and further references.
  prefs: []
  type: TYPE_NORMAL
- en: This chapter will be most useful for Zapier users with a higher level of technical
    skill. A good understanding of concepts around the use of APIs, including reading
    API documentation and using programming languages such as Python and JavaScript,
    would be beneficial. The content that we will cover will, however, give non-technical
    users an introduction to what is possible with these built-in apps.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will cover the following key topics in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Resources for understanding API documentation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Webhooks by Zapier – using webhooks and HTTP requests in your Zaps
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using API Request action steps (feature in beta)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using App Extensions in multiple Zaps (feature in beta)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Code by Zapier – using JavaScript or Python code in your Zaps
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Storage by Zapier – saving and storing data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Once you have reviewed each of these topics, you will understand how to use
    webhooks, code, and API requests in your Zaps, as well as how to save and store
    data.
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To get the most out of the content in this chapter, you will need access to
    a Zapier account. The Zapier Free plan will be adequate. You will need the Zapier
    Starter plan to create multi-step workflows and use the Webhooks by Zapier built-in
    app.
  prefs: []
  type: TYPE_NORMAL
- en: Resources for understanding API documentation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In [*Chapter 1*](B18474_01.xhtml#_idTextAnchor014), *Introduction to Business
    Process Automation with Zapier*, we introduced how integrations work to request
    data from one application, producing a response in another. The information requests
    are usually in the form of creating new resources, retrieving existing ones, editing/updating
    existing resources, or deleting existing resources. In **Hypertext Transfer Protocol**
    (**HTTP** – the foundation for how data is passed along on the internet) terms,
    these requests are denoted as the following methods:'
  prefs: []
  type: TYPE_NORMAL
- en: '**POST**: Used to create a new resource'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**GET**: Used to retrieve an existing resource'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**PUT**: Used to edit or update an existing resource'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**DELETE**: Used to delete an existing resource'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As you already know, the API integrations that have been created between Zapier
    and other apps have specific trigger, action, and search events that you can use
    in your Zaps.
  prefs: []
  type: TYPE_NORMAL
- en: 'Although, in most cases, the integrations built with Zapier cover the most
    commonly requested events users may need, often, the app’s API allows for many
    more events, therefore increasing flexibility. If an application has an open API,
    in most cases, there will be **API documentation** available on the SaaS provider’s
    website that will provide information about how to use the API. Knowing how to
    read and understand API documentation is an important prerequisite for knowing
    how to create custom triggers and actions using the API outside of Zapier’s standard
    integration with each app. This is a lengthy topic and is outside the scope of
    this book. However, here are some useful resources that will help you get to grips
    with reading API documentation:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Understanding APIs and RESTful APIs Crash Course [**Video]* ([https://www.packtpub.com/product/understanding-apis-and-restful-apis-crash-course-video/9781800564121](https://www.packtpub.com/product/understanding-apis-and-restful-apis-crash-course-video/9781800564121))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*What Is API* *Documentation?* ([https://blog.hubspot.com/website/api-documentation](https://blog.hubspot.com/website/api-documentation))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'If you would like to dive deeper into how to understand APIs as a whole, this
    Zapier resource will help: [https://zapier.com/resources/guides/apis](https://zapier.com/resources/guides/apis).'
  prefs: []
  type: TYPE_NORMAL
- en: Once you have reviewed the app’s API documentation to assess what other events
    are possible, you can then use webhooks (if they are available for use) to trigger
    your Zaps using the Webhooks by Zapier built-in app, make HTTP requests in action
    steps and polling triggers, once again using Webhooks by Zapier, use API Request
    action steps in certain app integrations with Zapier (a feature still in beta),
    and use Code by Zapier to take advantage of these options. The app’s API documentation
    will also normally give clear instructions on how to authenticate or authorize
    requests and how to configure them.
  prefs: []
  type: TYPE_NORMAL
- en: Important
  prefs: []
  type: TYPE_NORMAL
- en: If you create custom HTTP requests within your Zaps, bear in mind that if an
    app changes its API, this may cause disruption or errors in your Zaps, stopping
    them from working adequately. You will need to make adjustments to your custom
    steps accordingly.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we’ll provide an overview of how to use the Webhooks by Zapier built-in
    app.
  prefs: []
  type: TYPE_NORMAL
- en: Webhooks by Zapier – using webhooks and HTTP requests in your Zaps
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: First of all, it is important to mention that perhaps the choice of name for
    this built-in app does not correctly describe its function, and could imply that
    it only works with webhooks. The **Webhooks by Zapier** built-in app allows you
    to use webhooks as instant triggers, create polling triggers, and also make HTTP
    requests to an API. Therefore, it is better to separate these uses by event type.
    Let’s look at each.
  prefs: []
  type: TYPE_NORMAL
- en: Webhooks by Zapier trigger events
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As we covered in [*Chapter 1*](B18474_01.xhtml#_idTextAnchor014), *Introduction
    to Business Process Automation with Zapier*, event changes in apps are identified
    by either using a polling method or by using webhooks, which then cause the trigger
    step in your Zaps to run. The polling method involves repeatedly checking for
    new information at scheduled intervals. However, with webhooks, you provide the
    app with a URL that your originating app constantly monitors for new events, thus
    receiving information in real time. Webhooks are an instant, and therefore a much
    more efficient, way of communicating event information. This means that Zaps using
    webhooks trigger much quicker than other Zaps where the trigger step uses the
    polling method.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Webhooks by Zapier built-in app can be used with the following webhook
    and polling trigger events:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Retrieve Poll** (trigger): This trigger event polls a URL and searches for
    new entries. This polling trigger will search for new entries periodically based
    on the update time specified by your Zapier subscription plan.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`POST`, `GET`, or `PUT` notification to a URL provided by Zapier.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`POST`, `GET`, or `PUT` notification to a URL provided by Zapier. This is a
    more detailed version of the **Catch Hook** trigger event and supplies the request
    body as unparsed data. It also includes headers.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Both the **Catch Hook** and **Catch Raw Hook** trigger events require you to
    set up webhooks in the app you are hoping to get event notifications from. These
    webhooks will need to point to the URL provided by Zapier for either of those
    trigger events. The app’s API documentation will normally give clear instructions
    on how to configure, authenticate, or authorize new webhook connections. For example,
    Trello’s API documentation, which covers webhooks, can be found at [https://developer.atlassian.com/cloud/trello/guides/rest-api/webhooks/](https://developer.atlassian.com/cloud/trello/guides/rest-api/webhooks/).
  prefs: []
  type: TYPE_NORMAL
- en: If the app you are using does not have webhooks available in the API, then you
    will need to use the **Retrieve Poll** trigger event using an endpoint specified
    in the app’s API documentation.
  prefs: []
  type: TYPE_NORMAL
- en: Webhooks by Zapier action events
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now, let’s have a look at how to use Webhooks by Zapier to make HTTP requests.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Webhooks by Zapier built-in app can be used with the following HTTP request
    action events:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Custom Request** (action): This action event sends off a custom request by
    providing raw data'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**POST** (action): This action event sends a single request to create a new
    resource'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**GET** (action): This action event sends a single request to retrieve an existing
    resource'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**PUT** (action): This action event sends a single request to update an existing
    resource'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Webhooks by Zapier is especially useful if your app or business tool does
    not support Zapier integration. Webhooks by Zapier allows developers who are familiar
    with your tools to create requests between different tools without the need to
    understand the new API documentation. For example, when a new user signs up to
    create a free trial account, you could create a `POST` request to create a new
    contact in your CRM and accounting system. If the integration with Zapier does
    not support a specific trigger, action, or search event that you need, it is always
    worth reviewing the API documentation to assess whether it is possible by using
    the Webhooks by Zapier built-in app.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: You can use the Webhooks by Zapier built-in app to combine one or more Zaps.
    For example, a limitation of the Looping by Zapier built-in app is that you can
    only have one loop in a Zap. If you have several paths in a Zap and each path
    requires a loop, you can use the Webhooks by Zapier **POST** action event at the
    end of each path to push data to different looping Zaps. This would give each
    a **Catch Hook** trigger event with a custom URL that you would specify in the
    **POST** action events.
  prefs: []
  type: TYPE_NORMAL
- en: Zapier has created a few very useful help documents to help you get started
    with webhooks. You can find out more about webhooks in general at [https://zapier.com/help/doc/how-get-started-webhooks-zapier](https://zapier.com/help/doc/how-get-started-webhooks-zapier),
    and how to use webhooks in Zapier at [https://zapier.com/blog/what-are-webhooks/](https://zapier.com/blog/what-are-webhooks/).
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: Webhooks by Zapier is a premium app and can only be used with the Zapier Starter
    plan or higher.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s explore a few examples of when you can use Webhooks by Zapier to achieve
    more in your automations and not be limited by existing Zapier triggers and actions.
  prefs: []
  type: TYPE_NORMAL
- en: An example of using the Catch Hook trigger event of Webhooks by Zapier
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You may want to kick off a workflow in Zapier when only the contact’s first
    name changes in an ActiveCampaign record. Although an **Updated Contact** trigger
    event exists in the ActiveCampaign integration with Zapier, it would be challenging
    to identify what the name changed from to filter out only a change in the first
    name. A good workaround for this is to create an automation in ActiveCampaign
    that contains a trigger with the right conditions, which then sends information
    to a webhook URL in Zapier. By using the **Catch Hook** trigger event in Zapier,
    you can generate a unique webhook URL that you can then copy and paste into the
    relevant automation step in ActiveCampaign.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows an example of what this would look like in the
    Webhooks by Zapier **Catch Hook** trigger event:'
  prefs: []
  type: TYPE_NORMAL
- en: "![Figure 11.1 – \uFEFFOverview of using the Catch Hook trigger event in Webhooks\
    \ by Zapier](img/B18474_11_01.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 11.1 – Overview of using the Catch Hook trigger event in Webhooks by
    Zapier
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows the ActiveCampaign automation with the Zapier
    webhook URL:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.2 – Using a webhook step in ActiveCampaign to specify the webhook
    URL](img/B18474_11_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.2 – Using a webhook step in ActiveCampaign to specify the webhook
    URL
  prefs: []
  type: TYPE_NORMAL
- en: Let’s take a look at an example that involves an action event.
  prefs: []
  type: TYPE_NORMAL
- en: An example of using the PUT action event of Webhooks by Zapier
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You may want to create a new company in `PUT` requests to update the company
    ([https://developers.freshdesk.com/api/#update_company](https://developers.freshdesk.com/api/#update_company)),
    which means you can use Webhooks by Zapier to do this using the **PUT** action
    event.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows an example of how you can set up the Webhooks
    by Zapier **PUT** action event:'
  prefs: []
  type: TYPE_NORMAL
- en: "![Figure 11.3 – \uFEFFOverview of using the PUT action event in Webhooks by\
    \ Zapier](img/B18474_11_03.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 11.3 – Overview of using the PUT action event in Webhooks by Zapier
  prefs: []
  type: TYPE_NORMAL
- en: The **Authorization** field under **Headers** will contain the API key, as specified
    in the API documentation.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: For more inspiration and access to pre-built templates, you can review the Webhooks
    by Zapier built-in app profile page at [https://zapier.com/apps/webhook/integrations](https://zapier.com/apps/webhook/integrations).
  prefs: []
  type: TYPE_NORMAL
- en: You should now have a better understanding of how and when to use the Webhooks
    by Zapier built-in app.
  prefs: []
  type: TYPE_NORMAL
- en: Next, let’s review how to use the **API Request (beta)** action event.
  prefs: []
  type: TYPE_NORMAL
- en: Using the API Request action event (feature in beta)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Using Webhooks by Zapier might seem quite complicated, especially if you have
    to decipher API documentation. A more straightforward approach is to use a new
    feature that is currently in beta throughout the platform. Zapier has begun upgrading
    certain integrations with the `PUT`, `GET`, and `POST` HTTP requests. The introduction
    of this new action event in many app integrations allows API requests to be made
    in a simpler, no-code-focused fashion. Unlike with using Webhooks by Zapier, you
    will have already connected the app to your Zapier account and will not need to
    provide any further authentication details, such as an API key. In many cases,
    you can make simple HTTP requests without having to understand complex API documentation
    jargon. You will just need to know how to find the endpoint URL required and what
    request parameters are essential.
  prefs: []
  type: TYPE_NORMAL
- en: When discussing how to use Webhooks by Zapier, we looked at trigger and action
    examples. Now, let’s explore how to use the **API Request (beta)** action event
    to perform a search action that’s not available using Zapier integration.
  prefs: []
  type: TYPE_NORMAL
- en: If you are a `https://api.clickup.com/api/v2/folder/{folder_id}/list`) that
    you need to achieve this. You can use the `GET` request using the API by specifying
    `folder_id` in the URL. `folder_id` is a required parameter for the success of
    the request.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows the **API Request (Beta)** action event on the
    ClickUp integration profile page ([https://zapier.com/apps/clickup/integrations](https://zapier.com/apps/clickup/integrations)):'
  prefs: []
  type: TYPE_NORMAL
- en: "![Figure 11.4 – \uFEFFOverview of the API Request action event on the ClickUp\
    \ integration profile page](img/B18474_11_04.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 11.4 – Overview of the API Request action event on the ClickUp integration
    profile page
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows the ClickUp API documentation, with the **Get
    Lists** endpoint showing the required parameters and URL:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.5 – The ClickUp API documentation showing the Get Lists endpoint](img/B18474_11_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.5 – The ClickUp API documentation showing the Get Lists endpoint
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows how the **API Request (Beta)** action event
    can be used to retrieve the details of all the lists in a ClickUp folder:'
  prefs: []
  type: TYPE_NORMAL
- en: "![Figure 11.6 – \uFEFFOverview of the API Request (\uFEFFBeta) action event\
    \ to retrieve all the lists in a ClickUp folder](img/B18474_11_06.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 11.6 – Overview of the API Request (Beta) action event to retrieve all
    the lists in a ClickUp folder
  prefs: []
  type: TYPE_NORMAL
- en: 'You can find more detailed instructions on how to set up an API request action
    step using this Zapier resource: [https://help.zapier.com/hc/en-us/articles/12899607716493-Set-up-an-API-request-action-Beta](https://help.zapier.com/hc/en-us/articles/12899607716493-Set-up-an-API-request-action-Beta).'
  prefs: []
  type: TYPE_NORMAL
- en: You should now have a better understanding of how and when to use the **API
    Requests (beta)** action step. Next, let’s review how to create and use **App
    Extensions**.
  prefs: []
  type: TYPE_NORMAL
- en: Using App Extensions in multiple Zaps (feature in beta)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you use the same **API Request (beta)** action steps in several different
    Zaps, you will need to replicate the information from one Zap to another normally.
    However, the **App Extensions** action event takes the capabilities of the **API
    Request (beta)** action event feature a few steps forward and allows you to create
    app extensions in the **App Extensions** builder, allowing you to set up API call
    settings that can be used in multiple Zaps. As with the **API Request (beta)**
    action event, the **App Extensions (beta)** action event allows you to use your
    already authenticated app connection information, so all you have to do is create
    an **App Extension template** that can be used in multiple Zaps, and shared in
    your team if you’re using a Team or Company account. As with the **API Request
    (beta)** action event, the **App Extensions (beta)** action event is currently
    available for use with a limited number of apps. You can find the list of supported
    apps here: [https://help.zapier.com/hc/en-us/articles/16276574838925](https://help.zapier.com/hc/en-us/articles/16276574838925).
    You will also need a basic understanding of how to read API documentation, send
    HTTP requests, and choose which API endpoint to use in the app extension.'
  prefs: []
  type: TYPE_NORMAL
- en: 'We will use the example discussed in the *Using the API Request action event
    (feature in beta)* section to illustrate the differences between the `GET` request
    using the API by specifying `folder_id` in the URL. `folder_id` is a required
    parameter for the success of the request. The following screenshot shows how the
    `Get lists in a folder in ClickUp` app extension to retrieve the details of all
    the lists in a ClickUp folder:'
  prefs: []
  type: TYPE_NORMAL
- en: "![Figure 11.7 – \uFEFFOverview of using the App Extension\uFEFFs action event\
    \ to retrieve all the lists in a ClickUp folder](img/B18474_11_07.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 11.7 – Overview of using the App Extensions action event to retrieve
    all the lists in a ClickUp folder
  prefs: []
  type: TYPE_NORMAL
- en: 'You can find more detailed instructions on how to set up, edit, and use app
    extensions using these Zapier resources:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://help.zapier.com/hc/en-us/articles/16277139110157](https://help.zapier.com/hc/en-us/articles/16277139110157)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://help.zapier.com/hc/en-us/articles/16277147937805](https://help.zapier.com/hc/en-us/articles/16277147937805)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://help.zapier.com/hc/en-us/articles/16277375114637](https://help.zapier.com/hc/en-us/articles/16277375114637)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: You can use the magic of AI to draft your App Extensions for you. We will cover
    AI-powered App Extensions in more detail in [*Chapter 19*](B18474_19.xhtml#_idTextAnchor2216),
    *AI* *and Automation*.
  prefs: []
  type: TYPE_NORMAL
- en: You should now have a better understanding of how and when to use **App Extensions**.
    Next, let’s review how to use the Code by Zapier built-in app.
  prefs: []
  type: TYPE_NORMAL
- en: "Code by Zapier – using JavaScript or Python code \Lin your Zaps"
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The next step up from using webhooks and API requests in your Zaps is to use
    code when you can’t achieve what you need to with the no-code built-in apps, Webhooks
    by Zapier, or API Request action steps. You can write custom code in either the
    JavaScript or Python programming languages and use it in your Zaps with Code by
    Zapier to either trigger the workflow or perform various tasks to transform and
    customize your data.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Code by Zapier built-in app can be used via the following trigger and action
    events:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Run JavaScript** (trigger): This trigger event allows you to use JavaScript
    to start a workflow'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Run Python** (trigger): This trigger event allows you to use Python to start
    a workflow'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Run JavaScript** (action): This action event allows you to run JavaScript
    as an action step in your Zap'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Run Python** (action): This action event allows you to run Python as an action
    step in your Zap'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let’s explore an example of when you can use Code by Zapier to achieve more
    in your automations and not be limited by existing Zapier trigger, action, and
    search events.
  prefs: []
  type: TYPE_NORMAL
- en: An example of using the Run JavaScript action event of Code by Zapier
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You may want to retrieve detailed information about a contact in Pipedrive,
    such as all the phone numbers associated with the contact, once your workflow
    has been triggered. You may then want to manipulate those phone numbers to extract
    the area code. The Pipedrive integration with Zapier has a **Find Person** search
    action event that only allows for one phone number to be retrieved. The Pipedrive
    API allows requests for information on a person ([https://developers.pipedrive.com/docs/api/v1/#!/Persons/getPerson](https://developers.pipedrive.com/docs/api/v1/#!/Persons/getPerson)),
    so you can use Code by Zapier to do this using the **Run JavaScript** or **Run
    Python** action events.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s break this down into two steps. The following screenshot shows the first
    step in making an HTTP request to Pipedrive to retrieve the details of the person:'
  prefs: []
  type: TYPE_NORMAL
- en: "![Figure 11.8 – \uFEFFOverview of using the Run JavaScript action event in\
    \ Code by Zapier to retrieve phone numbers for a Pipedrive \uFEFFcontact](img/B18474_11_08.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 11.8 – Overview of using the Run JavaScript action event in Code by Zapier
    to retrieve phone numbers for a Pipedrive contact
  prefs: []
  type: TYPE_NORMAL
- en: As per the API documentation, the API token in your Pipedrive account would
    be displayed in the `api_token` field and the URL for your Pipedrive account would
    be added to the code.
  prefs: []
  type: TYPE_NORMAL
- en: 'The next step would involve extracting only the area code from the phone number.
    This is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: "![Figure 11.9 – \uFEFFOverview of using the Run JavaScript action event in\
    \ Code by Zapier to extract the area code from a phone number](img/B18474_11_09.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 11.9 – Overview of using the Run JavaScript action event in Code by Zapier
    to extract the area code from a phone number
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: You can use Code by Zapier steps to combine multiple actions that would normally
    involve several steps. This, in turn, can reduce your task usage. It is important
    to bear in mind that Zapier does not support code used in Code by Zapier steps,
    and it is the responsibility of the user to maintain the code. For example, if
    changes are made to the API or the data received from the API, this could “break”
    the code step.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s briefly cover how you can use AI to generate code for use in Code by Zapier
    code steps.
  prefs: []
  type: TYPE_NORMAL
- en: Generating JavaScript or Python code with ChatGPT
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'With the release of OpenAI’s ChatGPT, you can now ask the AI chatbot to generate
    code for you to use in your Code by Zapier steps. This is extremely useful if
    you are not a programmer and do not know how to write any code. Using the example
    that we previously discussed, we gave ChatGPT the following prompt:'
  prefs: []
  type: TYPE_NORMAL
- en: '*“I want to retrieve detailed information about a contact in Pipedrive, such
    as all the phone numbers associated with the contact, using Code by Zapier. I
    also want to manipulate those phone numbers to extract the area code from the
    phone number and display these results as two separate values. The Pipedrive API
    allows requests for information on a person,* [*https://developers.pipedrive.com/docs/api/v1/#!/Persons/getPerson*](https://developers.pipedrive.com/docs/api/v1/#!/Persons/getPerson)*.
    Can you write me some code in Python to perform this* *action please?”*'
  prefs: []
  type: TYPE_NORMAL
- en: 'The result is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: "![Figure 11.10 – \uFEFFOverview of using ChatGPT to generate code in Python\
    \ to use in a Code by Zapier step](img/B18474_11_10.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 11.10 – Overview of using ChatGPT to generate code in Python to use in
    a Code by Zapier step
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows the additional instructions produced by ChatGPT:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.11 – Instructions provided by ChatGPT on how to alter the code
    for use in Code by Zapier](img/B18474_11_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.11 – Instructions provided by ChatGPT on how to alter the code for
    use in Code by Zapier
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: You can use the magic of AI to write code for you from within your Code by Zapier
    steps. We will cover AI-powered Code by Zapier steps in more detail in [*Chapter
    19*](B18474_19.xhtml#_idTextAnchor2216), *AI* *and Automation*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Zapier has created a few very useful help documents to help you get started
    with Code by Zapier:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://zapier.com/blog/code-by-zapier-guide/](https://zapier.com/blog/code-by-zapier-guide/)https://help.zapier.com/hc/en-us/articles/8496326417549'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://help.zapier.com/hc/en-us/articles/8496197098253-JavaScript-code-examples-in-Zaps](https://help.zapier.com/hc/en-us/articles/8496197098253-JavaScript-code-examples-in-Zaps)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://help.zapier.com/hc/en-us/articles/8496197130893-Python-code-examples-in-Zaps](https://help.zapier.com/hc/en-us/articles/8496197130893-Python-code-examples-in-Zaps)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: For more inspiration and access to pre-built templates, you can review the Code
    by Zapier built-in app profile page at [https://zapier.com/apps/code/integrations](https://zapier.com/apps/code/integrations).
  prefs: []
  type: TYPE_NORMAL
- en: You should now have a better understanding of how and when to use the Code by
    Zapier built-in app.
  prefs: []
  type: TYPE_NORMAL
- en: Next, let’s review how to use the Storage by Zapier built-in app.
  prefs: []
  type: TYPE_NORMAL
- en: Storage by Zapier – saving and storing data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There may be many scenarios where it would be useful to be able to store small
    sets of data for use in your workflows. The Storage by Zapier built-in app allows
    you to save and retrieve small data values. With it, you can store reference data
    each time a Zap runs and then share it with other Zaps by retrieving it.
  prefs: []
  type: TYPE_NORMAL
- en: Storage by Zapier does not operate with user accounts. Instead, you must specify
    a **secret storage key** in the format of a **Universally Unique Identifier**
    (**UUID4**), which acts much like a password, to identify and group storage data.
    You would then use this secret storage key to identify where to add data to and
    retrieve data from. By doing this, you can have multiple storage keys that identify
    your storage locations.
  prefs: []
  type: TYPE_NORMAL
- en: You can store individual values or lists of values. You can also use **child
    values** (nested values of data) if you want to store and retrieve several values
    related to a unique identifier – for example, the name and email address of a
    specific contact.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Storage by Zapier built-in app can be used via the following action and
    search action events:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Set Child Value** (action): This action event allows you to set one or multiple
    child values that are stored at a specified key.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Set Value** (action): This action event allows you to set a value stored
    at a specified key.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Increment Value** (action): This action event allows you to incrementally
    add a value at a specified key.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Pop Value From List** (action): This action event allows you to remove a
    value from a list of values. If the list is empty, however, it will return a default
    value that you define.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Push Value Onto List** (action): This action event allows you to push a value
    onto an existing list of values.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Remove All Values** (action): This action event allows you to remove all
    values from a Storage by Zapier-connected account.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Remove Child Value** (action): This action event allows you to remove one
    or multiple child values stored at a specified key.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Remove Value** (action): This action event allows you to remove a value or
    a list of values stored at a specified key.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Set Multiple Values** (action): This action event allows you to set multiple
    values stored at specified keys.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Set Value If** (action): This action event allows you to conditionally set
    a value stored at a specified key if the stored value matches a previously defined
    value.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Get Child Value** (search action): This search action event allows you to
    retrieve a child value stored at a specified key. You can also create a new child
    value if none have been stored.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Get Value** (search action): This search action event allows you to retrieve
    a value stored at a specified key. You can also create a new value if none have
    been stored.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Get All Values** (search action): This search action event allows you to
    retrieve all values stored.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Get List Values** (search action): This search action event allows you to
    retrieve all values from a list and format the output as one value.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Get Multiple Values** (search action): This search action event allows you
    to retrieve multiple values stored at specified keys.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Get Secret** (search action): This search action event allows you to retrieve
    your secret storage key as a value so that it can be used in a Code by Zapier
    step.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: When using the **Get Secret** search action, bear in mind that this will expose
    your secret key and should be used with caution.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are a couple of examples of how you can use Storage by Zapier:'
  prefs: []
  type: TYPE_NORMAL
- en: You may want to keep a running tally of various key performance indicators and
    analytics, such as how many new leads have been added to your CRM in a day or
    how many sales you have made in a week. You can use the **Increment Value** action
    event to add the values to different keys cumulatively, and then in a separate
    Zap use the **Remove Value** action event with a Schedule by Zapier trigger event
    to erase the value periodically (every day or month, for example). You can then
    display the values in a dashboard reporting tool such as Databox or Geckoboard.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You may want to store the name and email address of every new user who subscribes
    to your email list. You can use the **Set Child Value** action event and specify
    the user ID as the secret storage key and the name and email address as child
    values. Then, you can use the **Get Child Value** search action event in a separate
    Zap to retrieve those values.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following screenshot shows an example of where the `automation_survey_list`
    as the key value for the list:'
  prefs: []
  type: TYPE_NORMAL
- en: "![Figure 11.12 – \uFEFFOverview of using Storage by Zapier to add values to\
    \ a list](img/B18474_11_12.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 11.12 – Overview of using Storage by Zapier to add values to a list
  prefs: []
  type: TYPE_NORMAL
- en: You could then use the **Get Value**, **Get All Values**, or **Get List Values**
    search action events to retrieve the data, depending on how you would like it
    presented.
  prefs: []
  type: TYPE_NORMAL
- en: Zapier has created useful help documents to help you get started with Storage
    by Zapier, which you can find at [https://help.zapier.com/hc/en-us/articles/8496293271053](https://help.zapier.com/hc/en-us/articles/8496293271053).
  prefs: []
  type: TYPE_NORMAL
- en: You can also access your storage data by using Code by Zapier steps in your
    workflows, as described in the Zapier help document at [https://help.zapier.com/hc/en-us/articles/8496062115597](https://help.zapier.com/hc/en-us/articles/8496062115597).
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: For more inspiration and access to pre-built templates, you can review the Code
    by Zapier built-in app profile page at [https://zapier.com/apps/storage/integrations](https://zapier.com/apps/storage/integrations).
  prefs: []
  type: TYPE_NORMAL
- en: You should now have a better understanding of how and when to use the Storage
    by Zapier built-in app.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we discussed three advanced built-in apps by Zapier and a new
    feature in beta. We began by reviewing how to use webhooks in your Zaps with Webhooks
    by Zapier and make HTTP requests. Then, we explored how to use the **API Request**
    action event feature (in beta). Next, we covered how to use JavaScript or Python
    code with Code by Zapier, and generate code with ChatGPT. Lastly, we explored
    how to use Storage by Zapier to store and retrieve data.
  prefs: []
  type: TYPE_NORMAL
- en: You now understand what the Webhooks by Zapier, Code by Zapier, and Storage
    by Zapier built-in apps, as well as the **API Request** action event, can be used
    for.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the next chapter, you will learn about the two built-in apps that can be
    used for managing your Zapier account: App Status by Zapier and Zapier Manager.
    We will cover how to use App Status by Zapier to get notifications of integration
    issues and review the various trigger, action, and search action events that Zapier
    Manager has for managing errors and changes in your Zapier account.'
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Which three built-in apps or features in Zapier can be used to make HTTP requests?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you would like to store small values secretly and securely, what Zapier built-in
    app can you use?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
