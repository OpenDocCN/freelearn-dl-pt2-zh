["```py\ndist.init_process_group(backend=\"gloo\", init_method=\"env://\")\n```", "```py\nimport osnum_threads = 8\nindex = int(os.environ['RANK']) * num_threads\ncpu_affinity = \"{}-{}\".format(index, (index + num_threads) - 1)\nos.environ['OMP_NUM_THREADS'] = \"{}\".format(num_threads)\nos.environ['KMP_AFFINITY'] = \\\n    \"granularity=fine,explicit,proclist=[{}]\".format(cpu_affinity)\n```", "```py\nnum_threads = 8\n```", "```py\nindex = int(os.environ['RANK']) * num_threads\n```", "```py\ncpu_affinity = \"{}-{}\".format(index, (index + num_threads) - 1)\n```", "```py\nos.environ['OMP_NUM_THREADS'] = \"{}\".format(num_threads)os.environ['KMP_AFFINITY'] = \\\n    \"granularity=fine,explicit,proclist=[{}]\".format(cpu_affinity)\n```", "```py\nmaicon@packt:~$ torchrun --nnodes 1 --nproc-per-node 2 --master-addr localhost pytorch_ddp.py\n```", "```py\nTRAINING_SCRIPT=$1NPROC_PER_NODE=$2\nNNODES= \"1\"\nMASTER_ADDR= \"localhost\"\nTORCHRUN_COMMAND=\"torchrun --nnodes $NNODES --nproc-per-node $NPROC_PER_NODE --master-addr $MASTER_ADDR $TRAINING_SCRIPT\"\n$TORCHRUN_COMMAND\n```", "```py\nmaicon@packt:~$ ./launch_multiple_cpu.sh pytorch_ddp.py 2\n```", "```py\nTRAINING_SCRIPT=$1NPROC_PER_NODE=$2\nSIF_IMAGE=$3\nNNODES= \"1\"\nMASTER_ADDR= \"localhost\"\nTORCHRUN_COMMAND=\"torchrun --nnodes $NNODES --nproc-per-node $NPROC_PER_NODE --master-addr $MASTER_ADDR $TRAINING_SCRIPT\"\napptainer exec $SIF_IMAGE $TORCHRUN_COMMAND\n```", "```py\nmaicon@packt:~$ ./launch_multiple_cpu_container.sh pytorch_ddp.py 2 pytorch.sif\n```", "```py\npip install oneccl_bind_pt==2.1.0 --extra-index-url https://pytorch-extension.intel.com/release-whl/stable/cpu/us/\n```", "```py\nimport oneccl_bindings_for_pytorchos.environ['CCL_PROCESS_LAUNCHER'] = \"torch\"\nos.environ['CCL_ATL_SHM'] = \"1\"\nos.environ['CCL_ATL_TRANSPORT'] = \"ofi\"\n```", "```py\ndist.init_process_group(backend=\"ccl\", init_method=\"env://\")\n```"]