- en: '6'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Red Teaming and Penetration Testing
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Penetration testing and red teaming are specialized approaches to cybersecurity
    assessment. Penetration testing, often referred to as *ethical hacking*, involves
    the simulation of cyber-attacks on a system, network, or application to uncover
    vulnerabilities that could be exploited by malicious actors. Red teaming, on the
    other hand, is a more comprehensive and adversarial engagement that simulates
    a full-scale attack to evaluate an organization’s detection and response capabilities.
    Emulating adversarial tactics using such methods is crucial for evaluating the
    security posture of an organization.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: By emulating the tactics and techniques of real-world adversaries, these authorized
    simulations reveal vulnerabilities and attack vectors before they can be exploited
    by malicious actors. In this chapter, we will explore recipes that leverage AI
    to enhance red teaming and penetration testing operations.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
- en: We will begin by using the **MITRE ATT&CK** framework, the OpenAI API, and Python
    to swiftly generate realistic red team scenarios. By combining curated adversarial
    knowledge with the expansive capabilities of **large language models** (**LLMs**),
    this technique allows us to create threat narratives that closely mirror real-world
    attacks.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
- en: Next, we will harness ChatGPT’s natural language prowess to guide us through
    OSINT reconnaissance. From mining social media to analyzing job postings, these
    recipes illustrate how to extract actionable intelligence from public data sources
    in an automated fashion.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
- en: To accelerate the discovery of unintentionally exposed assets, we will use Python
    to automate Google Dorks generated by ChatGPT. Together, these technologies enable
    the methodical footprinting of an organization’s digital footprint.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
- en: We wrap up with a unique recipe that infuses a **Kali Linux** terminal with
    the power of the OpenAI API. By translating natural language requests into OS
    commands, this AI-enabled terminal provides an intuitive way to navigate complex
    penetration testing tools and workflows.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
- en: By the end of this chapter, you will have an array of strategies powered by
    AI that augment red team and penetration testing engagements. When applied ethically
    and with permission, these techniques can uncover oversights, streamline testing,
    and ultimately, harden the security posture of an organization.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following recipes:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
- en: Creating red team scenarios using MITRE ATT&CK and the OpenAI API
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Social media and public data OSINT with ChatGPT
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Google Dork automation with ChatGPT and Python
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Analyzing job postings OSINT with ChatGPT
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: GPT-powered Kali Linux terminals
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For this chapter, you will need a **web browser** and a stable **internet connection**
    to access the ChatGPT platform and set up your account. You will also need to
    have your OpenAI account set up and have obtained your API key. If not, revisit
    [*Chapter 1*](B21091_01.xhtml#_idTextAnchor022) for details. Basic familiarity
    with the Python programming language and working with the command line is necessary,
    as you’ll be using **Python 3.x**, which needs to be installed on your system,
    to work with the OpenAI GPT API and create Python scripts. A **code editor** will
    also be essential for writing and editing Python code and prompt files as you
    work through the recipes in this chapter. Finally, since many penetration testing
    use cases rely heavily on the Linux operating system, access to and familiarity
    with a Linux distribution (preferably Kali Linux) is recommended.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 对于本章，您需要一个**网络浏览器**和稳定的**互联网连接**以访问ChatGPT平台并设置账户。您还需要设置OpenAI账户并获得API密钥。如果没有，请参考[*第1章*](B21091_01.xhtml#_idTextAnchor022)获取详细信息。基本了解Python编程语言和使用命令行的能力是必要的，因为您将使用**Python
    3.x**，需要在系统上安装它，以使用OpenAI GPT API并创建Python脚本。一个**代码编辑器**也将是必不可少的，因为您将需要在本章的配方中编写和编辑Python代码和提示文件。最后，由于许多渗透测试用例严重依赖Linux操作系统，推荐您熟悉并了解Linux发行版（最好是Kali
    Linux）。
- en: 'Kali Linux can be found here:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: Kali Linux可以在这里找到：
- en: '[https://www.kali.org/get-kali/#kali-platforms](https://www.kali.org/get-kali/#kali-platforms)'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://www.kali.org/get-kali/#kali-platforms](https://www.kali.org/get-kali/#kali-platforms)'
- en: 'The code files for this chapter can be found here:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的代码文件可以在这里找到：
- en: '[https://github.com/PacktPublishing/ChatGPT-for-Cybersecurity-Cookbook](https://github.com/PacktPublishing/ChatGPT-for-Cybersecurity-Cookbook)'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/PacktPublishing/ChatGPT-for-Cybersecurity-Cookbook](https://github.com/PacktPublishing/ChatGPT-for-Cybersecurity-Cookbook)'
- en: Creating red team scenarios using MITRE ATT&CK and the OpenAI API
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 MITRE ATT&CK 和 OpenAI API 创建红队场景
- en: Red team exercises play a pivotal role in assessing an organization’s preparedness
    against real-world cybersecurity threats. Crafting authentic and impactful red
    team scenarios is vital for these exercises, yet designing such scenarios can
    often be intricate. This recipe demonstrates a refined approach to scenario generation
    by synergizing the **Mitre ATT&CK** framework with the cognitive capabilities
    of ChatGPT via the OpenAI API. Not only will you be able to swiftly create scenarios
    but you’ll also receive a ranked list of the most relevant techniques, complete
    with summarized descriptions and example TTP chains, ensuring your red team exercises
    are as realistic and effective as possible.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 红队演练在评估组织对真实世界网络安全威胁的准备情况中起着关键作用。打造真实而有影响力的红队场景对于这些演练至关重要，但设计这样的场景通常会很复杂。这篇文章通过将**Mitre
    ATT&CK**框架与ChatGPT在OpenAI API上的认知能力进行协同，展示了一种精细的场景生成方法。不仅能够迅速创建场景，还将获得排名最相关技术的列表，包括摘要描述和示例TTP链，确保您的红队演练尽可能真实和有效。
- en: Getting ready
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Before diving into this recipe, ensure you have your OpenAI account set up and
    your API key on hand. If not, you should refer back to [*Chapter 1*](B21091_01.xhtml#_idTextAnchor022)
    for the necessary setup details. You will also need **Python version 3.10.x**
    **or later**.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在阅读本篇内容之前，请确保您已经设置了OpenAI账户并掌握了您的API密钥。如果没有，请参阅[*第1章*](B21091_01.xhtml#_idTextAnchor022)获取必要的设置细节。您还需要**Python
    3.10.x**或**更高版本**。
- en: 'Additionally, confirm you have the following Python libraries installed:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 另外，请确认您已安装以下Python库：
- en: '`openai`: This library enables you to interact with the OpenAI API. Install
    it using the `pip install` `openai` command.'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`openai`：此库使您能够与OpenAI API进行交互。使用`pip install openai`命令安装它。'
- en: '`os`: This is a built-in Python library that allows you to interact with the
    operating system, especially for accessing environment variables.'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`os`：这是一个内置的Python库，允许您与操作系统进行交互，特别是用于访问环境变量。'
- en: '`Mitreattack.stix20`: This library is used for searching Mitre ATT&CK datasets
    locally on your computer. Install it with `pip` `install mitreattack-python`.'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Mitreattack.stix20`：此库用于在本地计算机上搜索Mitre ATT&CK数据集。使用`pip install mitreattack-python`进行安装。'
- en: 'Finally, you will need a MITRE ATT&CK dataset:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，您将需要一个MITRE ATT&CK数据集：
- en: For this recipe, we will be using `enterprise-attack.json`. You can get MITRE
    ATT&CK datasets at [https://github.com/mitre/cti](https://github.com/mitre/cti).
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于本篇文章，我们将使用`enterprise-attack.json`。您可以在[https://github.com/mitre/cti](https://github.com/mitre/cti)获取MITRE
    ATT&CK数据集。
- en: The dataset used in this recipe, specifically, is at [https://github.com/mitre/cti/tree/master/enterprise-attack](https://github.com/mitre/cti/tree/master/enterprise-attack).
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 本配方中使用的数据集，具体来说，位于[https://github.com/mitre/cti/tree/master/enterprise-attack](https://github.com/mitre/cti/tree/master/enterprise-attack)。
- en: Once these requirements are in place, you are all set to dive into the script.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦这些要求就位，你就可以开始执行脚本了。
- en: How to do it…
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何实现…
- en: 'Follow these steps:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤进行：
- en: '**Set up the environment**: Before diving into the script, ensure you have
    the necessary libraries and the API key:'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**设置环境**：在深入脚本之前，请确保您具有必要的库和API密钥：'
- en: '[PRE0]'
  id: totrans-36
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '`MitreAttackData` class to load the dataset for easy access:'
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`MitreAttackData`类加载数据集以便轻松访问：
- en: '[PRE1]'
  id: totrans-38
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '**Extract keywords from the description**: This function integrates ChatGPT
    to extract relevant keywords from the provided description, which will later be
    used to search the MITRE ATT&CK dataset:'
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**从描述中提取关键词**：此函数集成了ChatGPT以从提供的描述中提取相关关键词，稍后将用于搜索MITRE ATT&CK数据集：'
- en: '[PRE2]'
  id: totrans-40
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '`search_dataset_for_matches` function searches the dataset for potential matches.
    Then, the `score_matches` function scores the findings:'
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`search_dataset_for_matches` 函数搜索数据集以寻找潜在的匹配项。然后，`score_matches` 函数对结果进行评分：'
- en: '[PRE3]'
  id: totrans-42
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '**Generate a comprehensive scenario using ChatGPT**: This function leverages
    the OpenAI API to generate a summarized description and an example TTP chain for
    each matched technique:'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**使用ChatGPT生成全面的场景**：此功能利用OpenAI API生成每个匹配技术的摘要描述和示例TTP链：'
- en: '[PRE4]'
  id: totrans-44
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '**Put it all together**: Now, integrate all the functions to extract keywords,
    find matches in the dataset, and generate a comprehensive scenario with a TTP
    chain:'
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**将所有内容整合在一起**：现在，将所有函数整合起来，提取关键词，在数据集中查找匹配项，并生成具有TTP链的全面场景：'
- en: '[PRE5]'
  id: totrans-46
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: By following the preceding steps, you’ll have a robust tool at your disposal
    that can generate realistic red team scenarios using the MITRE ATT&CK framework,
    all enhanced by the capabilities of ChatGPT.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 通过遵循上述步骤，您将拥有一个强大的工具，可以使用MITRE ATT&CK框架生成逼真的红队场景，所有这些都得益于ChatGPT的能力。
- en: 'Here is how the completed script should look:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是完成的脚本应该是什么样子的：
- en: '[PRE6]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: In essence, this recipe works by combining structured cybersecurity data with
    the flexible and expansive knowledge of ChatGPT. The Python script serves as the
    bridge, directing the flow of information and ensuring that the user receives
    detailed, relevant, and actionable red team scenarios based on their initial input.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 本质上，这个配方通过结合结构化的网络安全数据和ChatGPT的灵活和广泛的知识。Python脚本充当桥梁，引导信息流，并确保用户根据其初始输入接收详细、相关且可操作的红队场景。
- en: How it works…
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: 'This recipe merges the power of the MITRE ATT&CK framework with the natural
    language processing abilities of ChatGPT. By doing so, it provides a unique and
    efficient way to generate detailed red team scenarios based on a brief description.
    Let’s delve into the intricacies of how this merger takes place:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 这个配方将MITRE ATT&CK框架的力量与ChatGPT的自然语言处理能力相结合。通过这样做，它提供了一种独特且高效的方式，根据简要描述生成详细的红队场景。让我们深入了解这个合并过程的复杂性：
- en: '`mitreattack.stix20` library to interface with the MITRE ATT&CK dataset. This
    dataset provides a comprehensive list of `MitreAttackData("enterprise-attack.json")`
    method call initializes an object that provides an interface to query the MITRE
    ATT&CK dataset. This ensures that our script has a structured and efficient way
    to access the data.'
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`mitreattack.stix20`库与MITRE ATT&CK数据集进行交互。该数据集提供了一个全面的列表。`MitreAttackData("enterprise-attack.json")`
    方法调用初始化一个对象，提供一个查询MITRE ATT&CK数据集的接口。这确保了我们的脚本具有结构化和高效访问数据的方式。
- en: '`extract_keywords_from_description` function. This function sends a prompt
    to ChatGPT to extract relevant keywords from a given scenario description. The
    generated prompt is designed to guide the model in not just blindly extracting
    keywords but thinking and expanding upon the provided description. By doing so,
    it can consider broader aspects of the cybersecurity domain and extract more nuanced
    and relevant keywords.'
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`extract_keywords_from_description` 函数。此函数向ChatGPT发送提示，以从给定的情景描述中提取相关关键词。生成的提示旨在指导模型不仅盲目地提取关键词，而且思考并扩展所提供的描述。通过这样做，它可以考虑到网络安全领域的更广泛方面，并提取更微妙和相关的关键词。'
- en: '**Searching the MITRE ATT&CK dataset**: Once keywords are extracted, they are
    used to search the MITRE ATT&CK dataset. This search isn’t merely a straightforward
    string match. The script looks at both the name and the description of each technique
    in the dataset, checking whether any of the extracted keywords are present. This
    dual-check increases the likelihood of getting relevant results.'
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**搜索 MITRE ATT&CK 数据集**：一旦关键词被提取出来，它们就被用来搜索 MITRE ATT&CK 数据集。这种搜索不仅仅是简单的字符串匹配。脚本会查看数据集中每个技术的名称和描述，检查是否存在任何提取出来的关键词。这种双重检查增加了获取相关结果的可能性。'
- en: '`generate_ttp_chain` function is responsible for this task. It sends a prompt
    to ChatGPT, instructing it to summarize the technique and provide an example TTP
    chain scenario for it. The reason for using ChatGPT here is crucial. While the
    MITRE ATT&CK dataset provides detailed descriptions of techniques, it doesn’t
    necessarily provide them in a format that’s easy for non-experts to understand.
    By using ChatGPT, we can convert these technical descriptions into more user-friendly
    summaries and scenarios, making them more accessible and actionable.'
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`generate_ttp_chain` 函数负责此任务。它向 ChatGPT 发送提示，指示其总结技术并为其提供一个示例 TTP 链场景。在这里使用
    ChatGPT 的原因至关重要。虽然 MITRE ATT&CK 数据集提供了技术的详细描述，但它并不一定以易于非专家理解的格式提供。通过使用 ChatGPT，我们可以将这些技术描述转换为更加用户友好的摘要和场景，使它们更易于获取和可操作。'
- en: '**Ranking and selection**: The script doesn’t just return all matched techniques.
    It ranks them based on the length of their descriptions (as a proxy for relevance
    and detail) and then selects the top three. This ensures that the user isn’t overwhelmed
    with too many results and instead receives a curated list of the most pertinent
    techniques.'
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**排名和选择**：脚本不仅返回所有匹配的技术。它根据它们描述的长度（作为相关性和详细程度的代理）对它们进行排名，然后选择前三个。这确保用户不会被太多结果淹没，而是收到一个精选的最相关技术列表。'
- en: There’s more…
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多…
- en: The current script prints the detailed red team scenarios directly to the console.
    However, in a real-world setting, you might want to store these scenarios for
    future reference, share them with team members, or even use them as a basis for
    reporting. One straightforward way to achieve this is by writing the output to
    a text file.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 当前脚本会直接将详细的红队场景打印到控制台上。然而，在真实环境中，您可能希望将这些场景存储以备将来参考，与团队成员分享，甚至将它们用作报告的基础。实现这一目标的一种简单方法是将输出写入文本文件。
- en: 'This is how we output to a text file:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是我们如何将输出写入文本文件的方式：
- en: '**Modify the** **Python script**:'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**修改 Python 脚本**：'
- en: We’ll need to slightly modify the script to incorporate the functionality to
    write the results to a text file. Here’s how you can achieve that.
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们需要稍微修改脚本以将结果写入文本文件。以下是您可以实现这一目标的方法。
- en: 'First, add a function to write the results to a file:'
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 首先，添加一个将结果写入文件的函数：
- en: '[PRE7]'
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '`red_team_scenarios.txt` in the same directory as your script. This file will
    contain the top three matched scenarios, formatted for easy reading.'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`red_team_scenarios.txt` 与您的脚本在同一目录中。该文件将包含排名前三的匹配场景，格式化便于阅读。'
- en: 'There are three main benefits to doing this:'
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这样做有三个主要好处：
- en: '**Portability**: A text file is universally accessible, making it easy to share
    or move between systems'
  id: totrans-67
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可移植性**：文本文件是普遍可访问的，易于分享或在系统之间移动。'
- en: '**Documentation**: By saving scenarios, you create a record of potential threat
    patterns to watch out for'
  id: totrans-68
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**文档**：通过保存场景，您创建了一个潜在威胁模式的记录，以供注意。'
- en: '**Integration with other tools**: The output file can be ingested by other
    cybersecurity tools for further analysis or action'
  id: totrans-69
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**与其他工具集成**：输出文件可以被其他网络安全工具摄取，进行进一步的分析或操作。'
- en: This enhancement allows you to not only view the red team scenarios interactively
    but also to maintain a persistent record of them, enhancing the utility and applicability
    of the script in diverse cybersecurity contexts.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 此增强功能不仅允许您交互式查看红队场景，还可以保持对其的持久记录，增强了脚本在多样化的网络安全环境中的实用性和适用性。
- en: Social media and public data OSINT with ChatGPT
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 社交媒体和公共数据 OSINT 与 ChatGPT
- en: '**Open source intelligence** (**OSINT**) techniques allow us to gather information
    from publicly available sources to support cybersecurity operations such as penetration
    testing. This can include scouring social media sites, public records, job postings,
    and more. In this recipe, we will use ChatGPT’s natural language capabilities
    to guide us through an entire OSINT project focused on gathering intel from social
    media and other public data sources.'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '**开放源情报**（**OSINT**）技术允许我们从公开可用的来源收集信息，以支持诸如渗透测试之类的网络安全操作。这可以包括搜索社交媒体网站、公开记录、招聘启事等。在本配方中，我们将利用ChatGPT的自然语言能力来指导我们完成一项完整的OSINT项目，重点是从社交媒体和其他公开数据源中收集情报。'
- en: ChatGPT can serve as an AI OSINT expert, walking us through effective online
    reconnaissance from start to finish. The conversational nature of the process
    helps us learn as we go, gaining new skills and ideas. By the end, you’ll have
    a detailed plan and methodology you can replicate for real-world engagements.
    OSINT is a vital skill for ethical hackers, social engineers, and cyber defenders
    alike.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: ChatGPT可以作为一个AI OSINT专家，指导我们完成从头到尾的有效在线侦察。这个过程的对话性质帮助我们边走边学，获得新的技能和想法。到最后，您将拥有一个可以为现实世界的任务复制的详细计划和方法。OSINT是道德黑客、社会工程师和网络防御者的重要技能。
- en: Getting ready
  id: totrans-74
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: The prerequisites for this recipe are simple. You just need a web browser and
    an OpenAI account. If you haven’t already created an account or need a refresher
    on how to use the ChatGPT interface, refer back to [*Chapter 1*](B21091_01.xhtml#_idTextAnchor022)
    for a comprehensive guide.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 这个配方的前提条件很简单。您只需要一个网络浏览器和一个OpenAI帐户。如果您还没有创建帐户或需要了解如何使用ChatGPT界面，请参考[*第1章*](B21091_01.xhtml#_idTextAnchor022)以获取全面的指南。
- en: How to do it…
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Let’s begin by having ChatGPT outline the high-level steps involved in an OSINT
    operation focused on social media and public data sources:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始，让ChatGPT概述涉及社交媒体和公开数据源的OSINT操作的高级步骤：
- en: 'Establish the system role and create an OSINT process list:'
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确定系统角色并创建OSINT流程列表：
- en: '[PRE8]'
  id: totrans-79
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '![Figure 6.1 – Example OSINT process steps output from ChatGPT](img/B21091_06_01.jpg)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![图6.1 – ChatGPT输出的示例OSINT过程步骤](img/B21091_06_01.jpg)'
- en: Figure 6.1 – Example OSINT process steps output from ChatGPT
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.1 – ChatGPT输出的示例OSINT过程步骤
- en: 'Next, we will take the first step identified by ChatGPT and expand on it:'
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将扩展ChatGPT识别的第一步：
- en: '[PRE9]'
  id: totrans-83
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '![Figure 6.2 – Example OSINT details output from ChatGPT](img/B21091_06_02.jpg)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![图6.2 – ChatGPT输出的示例OSINT详细信息](img/B21091_06_02.jpg)'
- en: Figure 6.2 – Example OSINT details output from ChatGPT
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.2 – ChatGPT输出的示例OSINT详细信息
- en: Repeat the second prompt for each remaining step in the OSINT outline provided
    originally. This will expand each high-level step into a detailed process with
    tools and tactical advice from ChatGPT.
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于原始提供的OSINT大纲中的每个剩余步骤，请重复第二提示。这将把每个高级步骤扩展为具有来自ChatGPT的工具和战术建议的详细过程。
- en: Once all steps have been expanded on, you will have a comprehensive methodology
    for executing a social media and public data-focused OSINT operation.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦所有步骤都被扩展了，您将拥有一个全面的方法来执行以社交媒体和公开数据为重点的OSINT操作。
- en: How it works…
  id: totrans-88
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The key to this technique is establishing ChatGPT as an experienced OSINT expert
    upfront. This frames the conversational prompts in a way that guides the model
    to provide detailed, practical responses on conducting online reconnaissance.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 这种技术的关键在于从一开始就将ChatGPT定位为一位经验丰富的OSINT专家。这样的框架使对话提示变得有序，指导模型提供关于进行在线侦察的详细、实用的响应。
- en: Asking ChatGPT to “think step-by-step” further tunes the output, resulting in
    orderly, logical processes. We first have it outline the overall workflow, providing
    high-level steps.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 要求ChatGPT“逐步思考”进一步调整输出，从而得到有序、逻辑清晰的流程。我们首先让它概述整体工作流程，提供高级步骤。
- en: Then, by taking each step and providing it back to ChatGPT as a prompt asking
    for more details, we essentially get into the specifics of how to execute each
    phase.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，通过将每个步骤提供回ChatGPT作为一个提示，要求获取更多细节，我们基本上进入了如何执行每个阶段的具体细节。
- en: This leverages ChatGPT’s knowledge bank on OSINT tradecraft and elicits tailored
    recommendations powered by its natural language processing capabilities. The result
    is an expert-guided OSINT methodology customized to our goal.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 这利用了ChatGPT在OSINT技艺方面的知识库，并利用其自然语言处理能力提供定制的建议。结果是一个根据我们的目标定制的专家指导的OSINT方法。
- en: There’s more…
  id: totrans-93
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: The beauty of this technique is that the “recursion” can be taken even further.
    If any single step’s explanation from ChatGPT contains additional high-level tasks,
    those can be further expanded by repeating the process.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 这种技术的美妙之处在于，“递归”可以进一步进行。如果 ChatGPT 的任何单个步骤解释中包含额外的高级任务，那么可以通过重复这一过程来进一步扩展这些任务。
- en: For example, ChatGPT may mention “Use Google Dorks to find public records.”
    This could be provided back to ChatGPT as another prompt asking for more details
    on which operators and strategies to use.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，ChatGPT 可能会提到“使用 Google Dorks 查找公共记录。”这可以作为另一个提示返回给 ChatGPT，要求更多关于使用哪些运算符和策略的细节。
- en: By recursively “zooming in” on details in this way, you can extract an immense
    amount of practical advice from ChatGPT to build a comprehensive guide. The model
    can also suggest tools, techniques, and ideas you may have never considered before!
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这种递归地“放大”细节的方式，您可以从 ChatGPT 中提取大量实用的建议，构建一个全面的指南。该模型还可以建议您可能从未考虑过的工具、技术和思想！
- en: Google Dork automation with ChatGPT and Python
  id: totrans-97
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 ChatGPT 和 Python 进行 Google Dork 自动化
- en: Google Dorks are a powerful tool in the arsenal of penetration testers, ethical
    hackers, and even malicious actors. These specially crafted search queries leverage
    advanced Google search operators to uncover information or vulnerabilities that
    are unintentionally exposed on the web. From finding open directories to exposed
    configuration files, Google Dorks can reveal a treasure trove of information,
    often inadvertently published.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: Google Dorks 是渗透测试人员、道德黑客甚至恶意行为者武器库中的强大工具。这些特殊设计的搜索查询利用了高级 Google 搜索运算符，以发现在网上无意中暴露的信息或漏洞。从查找开放目录到暴露的配置文件，Google
    Dorks 可以揭示一大堆信息，通常是无意中发布的。
- en: However, crafting effective Google Dorks requires expertise, and manually searching
    for each dork can be time-consuming. This is where the combination of ChatGPT
    and Python shines. By utilizing the linguistic capabilities of ChatGPT, we can
    automate the generation of Google Dorks tailored to specific requirements. Python
    then takes over, using these dorks to initiate searches and organize the results
    for further analysis.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，制作有效的 Google Dorks 需要专业知识，手动搜索每个 dork 可能会耗费时间。这就是 ChatGPT 和 Python 结合的优势所在。通过利用
    ChatGPT 的语言能力，我们可以自动化生成符合特定要求的 Google Dorks。然后 Python 接管，使用这些 dorks 发起搜索并组织结果以进行进一步分析。
- en: In this recipe, we leverage ChatGPT to generate a series of Google Dorks that
    are designed to unearth valuable data during penetration tests. We then employ
    Python to apply these dorks systematically, producing a consolidated view of potential
    vulnerabilities or exposed information regarding a target. This approach not only
    amplifies the efficiency of the pentesting process but also ensures a comprehensive
    sweep of the digital footprint of the target. Whether you’re a seasoned penetration
    tester looking to streamline your reconnaissance phase or a cybersecurity enthusiast
    keen on exploring Google Dorks, this recipe provides a practical, automated approach
    to harnessing the power of Google’s search engine for security assessments.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个配方中，我们利用 ChatGPT 生成一系列旨在在渗透测试期间发现有价值数据的 Google Dorks。然后我们使用 Python 有序地应用这些
    dorks，产生一个关于目标的潜在漏洞或暴露信息的综合视图。这种方法不仅增加了渗透测试过程的效率，而且确保了对目标数字足迹的全面扫描。无论您是经验丰富的渗透测试人员，希望简化您的侦察阶段，还是热衷于探索
    Google Dorks 的网络安全爱好者，这个配方都提供了一个实用的、自动化的方法，利用 Google 搜索引擎的力量进行安全评估。
- en: Getting ready
  id: totrans-101
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'Before diving into this recipe, ensure you have your OpenAI account set up
    and your API key on hand. If not, you should refer back to [*Chapter 1*](B21091_01.xhtml#_idTextAnchor022)
    for the necessary setup details. You will also need **Python version 3.10.x or
    later**, and the following libraries:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 在深入研究本配方之前，请确保您已设置好 OpenAI 帐户并掌握了您的 API 密钥。如果没有，请参考 [*第1章*](B21091_01.xhtml#_idTextAnchor022)
    中的必要设置细节。您还需要 **Python 版本3.10.x或更高版本**，以及以下库：
- en: '`openai`: This library enables you to interact with the OpenAI API. Install
    it using the `pip install` `openai` command.'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`openai`：这个库使您能够与 OpenAI API 进行交互。使用 `pip install openai` 命令安装它。'
- en: '`requests`: This library is essential for making HTTP requests. Install it
    using `pip` `install requests`.'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`requests`：这个库对于进行 HTTP 请求是必不可少的。使用 `pip install requests` 安装它。'
- en: '`time`: This is a built-in Python library used for various time-related tasks.'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`time`：这是一个内置的 Python 库，用于各种与时间相关的任务。'
- en: Additionally, you’ll need to set up a **Google API key** and a **custom search
    engine ID**, which can be done at [https://console.cloud.google.com/](https://console.cloud.google.com/)
    and [https://cse.google.com/cse/all](https://cse.google.com/cse/all).
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 另外，您需要设置一个**谷歌 API 密钥**和一个**自定义搜索引擎 ID**，可以在 [https://console.cloud.google.com/](https://console.cloud.google.com/)
    和 [https://cse.google.com/cse/all](https://cse.google.com/cse/all) 上完成。
- en: With these requirements in place, you’re prepared to delve into the script.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这些要求，您就可以开始深入了解脚本了。
- en: How to do it…
  id: totrans-108
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做…
- en: Google Dorks are incredibly potent when it comes to uncovering exposed data
    or vulnerabilities on the web. While they can be run manually, automating this
    process can significantly boost efficiency and comprehensiveness. In this section,
    we will guide you through the steps of using Python to automate the application
    of Google Dorks, fetching search results, and saving them for further analysis.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 谷歌 Dorks 在揭示网络上暴露的数据或漏洞方面具有极大的潜力。虽然它们可以手动运行，但自动化此过程可以显著提高效率和全面性。在本节中，我们将指导您通过使用
    Python 自动化应用 Google Dorks、获取搜索结果并保存它们进行进一步分析的步骤。
- en: 'First, let’s generate a list of Google Dorks:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们生成一个谷歌 Dorks 列表：
- en: '**Generate a series of Google Dorks**: To do this, give ChatGPT a clear objective.
    Use the following prompt with ChatGPT:'
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**生成一系列 Google Dorks**：为此，给 ChatGPT 一个明确的目标。使用以下提示与 ChatGPT：'
- en: '[PRE10]'
  id: totrans-112
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: By giving ChatGPT the scenario and purpose, ChatGPT is less likely to reject
    the prompt, thinking it is being asked to provide something unethical.
  id: totrans-113
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 通过给 ChatGPT 提供场景和目的，ChatGPT 更不可能拒绝提示，认为它被要求提供一些不道德的东西。
- en: 'This is an example output:'
  id: totrans-114
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这是一个示例输出：
- en: '![Figure 6.3 – Example ChatGPT output for a list of Google Dorks](img/B21091_06_03.jpg)'
  id: totrans-115
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.3 – Google Dorks 列表的示例 ChatGPT 输出](img/B21091_06_03.jpg)'
- en: Figure 6.3 – Example ChatGPT output for a list of Google Dorks
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.3 – Google Dorks 列表的示例 ChatGPT 输出
- en: Next, let’s generate the Python script to automate the Google Dork execution.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们生成 Python 脚本来自动执行 Google Dork。
- en: '`requests` and `time`:'
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`requests` 和 `time`：'
- en: '[PRE11]'
  id: totrans-119
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '**Set up the prerequisites**: To utilize Google’s Custom Search JSON API, you
    need to set it up and get the necessary credentials:'
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**设置先决条件**：要使用谷歌的自定义搜索 JSON API，您需要设置它并获取必要的凭据：'
- en: '[PRE12]'
  id: totrans-121
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Replace `'YOUR_GOOGLE_API_KEY'` with your API key and `'YOUR_CUSTOM_SEARCH_ENGINE_ID'`
    with your custom search engine ID. These are vital for your script to communicate
    with Google’s API.
  id: totrans-122
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将`'YOUR_GOOGLE_API_KEY'`替换为您的 API 密钥，将`'YOUR_CUSTOM_SEARCH_ENGINE_ID'`替换为您的自定义搜索引擎
    ID。这些对于您的脚本与谷歌的 API 通信至关重要。
- en: '`''example.com''`:'
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`''example.com''`：'
- en: '[PRE13]'
  id: totrans-124
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: You can extend this list with any additional Dorks relevant to your pentesting
    objectives.
  id: totrans-125
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 您可以使用与您的渗透测试目标相关的任何其他 Dorks 扩展此列表。
- en: '**Fetch the search results**: Create a function to fetch Google search results
    using the provided Dork:'
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**获取搜索结果**：创建一个函数来使用提供的 Dork 获取谷歌搜索结果：'
- en: '[PRE14]'
  id: totrans-127
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: This function sends a request to **Google’s Custom Search API** with the Dork
    as the query and returns the search results.
  id: totrans-128
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个函数向**谷歌自定义搜索 API**发送一个带有 Dork 作为查询的请求，并返回搜索结果。
- en: '**Iterate through Dorks and fetch and save results**: This is the core of your
    automation. Here, we loop through each Google Dork, fetch its results, and save
    them in a text file:'
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**遍历 Dorks 并获取并保存结果**：这是您自动化的核心。在这里，我们循环遍历每个 Google Dork，获取其结果，并将其保存在文本文件中：'
- en: '[PRE15]'
  id: totrans-130
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: This simple piece of code ensures that when you run the script, the `main` function,
    which contains our core logic, gets executed.
  id: totrans-131
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个简单的代码片段确保当你运行脚本时，包含我们核心逻辑的 `main` 函数会被执行。
- en: Important note
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 重要说明
- en: Remember, Google’s API might have rate limits. We’ve introduced a delay in our
    loop to prevent hitting these limits too quickly. Adjustments might be required
    based on your API’s specific rate limits.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，谷歌的 API 可能有速率限制。我们在循环中引入了一个延迟，以防止过快地达到这些限制。根据您的 API 的具体速率限制，可能需要进行调整。
- en: 'Here is how the completed script should look:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是完成的脚本应该是这样的：
- en: '[PRE16]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: This script harnesses the power of both Python (for automation) and ChatGPT
    (for the initial expertise to create the list) to create an efficient and comprehensive
    tool for Google Dorking, a valuable method in the arsenal of penetration testers.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 这个脚本利用了 Python（用于自动化）和 ChatGPT（用于创建列表的初始专业知识）的力量，创建了一个高效而全面的 Google Dorking
    工具，这是渗透测试人员工具库中的一个宝贵方法。
- en: How it works…
  id: totrans-137
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理…
- en: 'Understanding the mechanics behind this script will empower you to adapt and
    optimize it according to your requirements. Let’s delve into the intricacies of
    how this automated Google Dorking script functions:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 了解此脚本背后的机制将使您能够根据您的要求对其进行调整和优化。让我们深入研究这个自动 Google Dorking 脚本的运行机制：
- en: '**Python scripting**:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: '**Python 脚本**：'
- en: '**API and** **URL configuration**:'
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**API 和 URL 配置**：'
- en: '[PRE17]'
  id: totrans-141
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: The script starts by defining constants for the Google API key, custom search
    engine ID, and URL endpoint for search requests. These constants are vital for
    making authenticated API calls to Google and retrieving search results.
  id: totrans-142
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 脚本首先定义了用于向 Google 进行身份验证 API 调用并检索搜索结果的 Google API 密钥、自定义搜索引擎 ID 和搜索请求的 URL
    端点的常量。这些常量对于获取认证的 Google API 调用并检索搜索结果至关重要。
- en: '`get_search_results` function uses the `requests.get()` method to send a `GET`
    request to the Google Custom Search JSON API. By formatting the URL with the query
    (Google Dork), API key, and custom search engine ID, the function retrieves search
    results for the specified Dork. The results are then parsed as JSON.'
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`get_search_results` 函数使用 `requests.get()` 方法向 Google 自定义搜索 JSON API 发送 `GET`
    请求。通过使用查询（Google Dork）、API 密钥和自定义搜索引擎 ID 格式化 URL，该函数检索指定 Dork 的搜索结果。然后将结果解析为 JSON。'
- en: '`main` function is where the script iterates over each Google Dork in the list.
    For each Dork, it fetches the search results using the function mentioned previously
    and writes the title and link of each result to both the console and a `dork_results.txt`
    text file. This ensures that you have a persistent record of your findings.'
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`main` 函数是脚本在列表中迭代每个 Google Dork 的地方。对于每个 Dork，它使用前面提到的函数获取搜索结果，并将每个结果的标题和链接写入控制台和一个
    `dork_results.txt` 文本文件。这样可以确保您有对您的发现的持久记录。'
- en: '`time.sleep(20)` statement, which introduces a 20-second delay between successive
    API calls. This is crucial, as sending too many requests in a short span can lead
    to temporary IP bans or API restrictions.'
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`time.sleep(20)` 语句，介绍了连续 API 调用之间的 20 秒延迟。这一点至关重要，因为在短时间内发送过多请求可能导致临时 IP 封禁或
    API 限制。'
- en: '**GPT prompts**:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: '**GPT 提示**：'
- en: '**Crafting the prompt**: The initial step involves creating a prompt that instructs
    the GPT model to generate a list of Google Dorks. The prompt is specifically designed
    to provide the model with a clear and concise directive, along with a purpose
    and scenario, so that ChatGPT doesn’t reject the prompt (due to safety measures
    preventing unethical activity).'
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**制定提示**：初始步骤涉及创建一个提示，指示 GPT 模型生成 Google Dorks 列表。该提示专门设计为向模型提供明确而简洁的指令，以及一个目的和场景，以便
    ChatGPT 不会拒绝提示（由于安全措施阻止不道德的活动）。'
- en: There’s more…
  id: totrans-148
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'While the core recipe provides a foundational approach to leveraging Google
    Dorks for penetration testing, truly mastering this domain requires diving into
    a deeper layer of complexities and nuances. The additional enhancements and suggestions
    provided in this section might necessitate a more advanced understanding of both
    penetration testing and programming. Venturing beyond the scope of this basic
    recipe can open up a wealth of possibilities for more in-depth vulnerability discovery
    and analysis. If you’re looking to elevate your penetration testing capabilities,
    extending this recipe with these add-ons can offer more comprehensive insights,
    more refined results, and a higher degree of automation. However, always approach
    with caution, ensuring you maintain ethical practices and have the necessary permissions
    when probing systems and networks:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然核心配方提供了利用 Google Dorks 进行渗透测试的基本方法，但真正掌握这个领域需要深入到更深层次的复杂性和细微差别。本节提供的附加增强和建议可能需要对渗透测试和编程有更高级的理解。超出此基本配方范围的探索可以为更深入的漏洞发现和分析提供丰富的可能性。如果您希望提升您的渗透测试能力，请使用这些附加组件扩展此配方，这样可以提供更全面的见解、更精细的结果和更高程度的自动化。但是，始终要谨慎行事，确保在探测系统和网络时保持道德实践，并获得必要的权限：
- en: '**Refinement of Dorks**: While the initial prompt provided a basic list of
    Dorks, it’s always a good idea to customize and refine these queries based on
    the specific target or domain you’re working with. For instance, if you’re specifically
    interested in SQL vulnerabilities, you might want to expand your list with more
    SQL-specific Dorks.'
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**Dorks 的细化**：虽然初始提示提供了一个基本的 Dorks 列表，但根据您正在处理的特定目标或领域，定制和细化这些查询总是一个好主意。例如，如果您特别关注
    SQL 漏洞，您可能希望使用更多的 SQL 特定的 Dorks 扩展您的列表。'
- en: '**Integration with other search engines**: Google isn’t the only game in town.
    Consider expanding the script to work with other search engines such as Bing or
    DuckDuckGo. Each search engine might index websites differently, giving you a
    broader range of potential vulnerabilities.'
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**与其他搜索引擎集成**: Google 不是唯一的搜索引擎。 考虑扩展脚本以与其他搜索引擎如必应或DuckDuckGo合作。 每个搜索引擎可能以不同的方式索引网站，为您带来更广泛的潜在漏洞范围。'
- en: '**Automated analysis**: Once you have the results, you might want to implement
    a post-processing step. This could involve checking the legitimacy of vulnerabilities,
    sorting them based on potential impact, or even integrating with tools that can
    automate the exploitation of found vulnerabilities.'
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**自动化分析**: 一旦您得到了结果，您可能想要实施后处理步骤。 这可能包括检查漏洞的合法性，根据潜在影响对它们进行排序，甚至集成能够自动利用发现的漏洞的工具。'
- en: '**Notifications**: Depending on the scope of your penetration test, you might
    be running many Dorks, and analyzing them all can be time-consuming. Consider
    adding a feature that sends notifications (maybe through email or a messenger
    bot) when a particularly high-value vulnerability is detected.'
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**通知**: 根据您的渗透测试范围，您可能会运行许多 Dorks，并且分析它们可能会耗费时间。考虑添加一个功能，当检测到特别高价值的漏洞时发送通知(可能通过电子邮件或者一个Messenger
    bot)。'
- en: '**Visual dashboard**: Presenting the results in a more visual format, such
    as a dashboard, can be beneficial, especially if you’re reporting to stakeholders.
    There are Python libraries such as Dash or even integration with tools such as
    Grafana that can help present your findings in a more digestible manner.'
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**可视化仪表盘**：以更直观的方式呈现结果，比如仪表盘，可能会有益，特别是当向利益相关者汇报时。有一些 Python 库，比如 Dash，甚至可以与工具如
    Grafana 集成，可以帮助以更易消化的方式呈现您的发现。'
- en: '**Rate limiting and proxies**: If you’re making a lot of requests, not only
    might you hit API rate limits but you might also end up getting IP banned. Consider
    integrating proxy rotation in the script to distribute the requests across different
    IP addresses.'
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**速率限制和代理**: 如果您发送了大量请求，不仅可能会触发 API 速率限制，还可能被封禁 IP。考虑在脚本中集成代理轮换，以在不同的IP地址之间分发请求。'
- en: '**Ethical considerations**: Always remember to use Google Dorks responsibly
    and ethically. Never use them to exploit vulnerabilities on systems you do not
    have permission to test. Additionally, be aware of the terms of service for both
    Google and the Google Cloud API. Over-reliance or misuse can lead to API key suspension
    or other penalties.'
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**道德考量**: 始终要谨慎和合乎伦理地使用 Google Dorks。 不要将它们用于利用您无权测试的系统上的漏洞。此外，要了解 Google 和
    Google Cloud API 的服务条款。 过度依赖或滥用可能导致 API 密钥被暂停或其他惩罚。'
- en: Analyzing job postings OSINT with ChatGPT
  id: totrans-157
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '使用 ChatGPT 分析职位发布 OSINT  '
- en: OSINT refers to the practice of collecting and analyzing information that is
    publicly available. In the realm of cybersecurity, OSINT serves as a valuable
    tool, offering insights into potential vulnerabilities, threats, and targets within
    an organization. Among the myriad sources of OSINT, company job listings stand
    out as a particularly rich trove of data. At first glance, job listings are innocuous,
    aiming to attract potential candidates by detailing the responsibilities, qualifications,
    and benefits associated with a position. However, these descriptions often inadvertently
    disclose far more than intended.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: OSINT 指的是收集和分析公开可获得的信息的做法。 在网络安全领域，OSINT 是一种宝贵的工具，可以提供有关组织内潜在漏洞、威胁和目标的见解。 在众多的
    OSINT 来源中，公司的职位招聘信息被认为是一种尤为丰富的数据宝库。 乍一看，职位招聘信息似乎无害，旨在通过详细描述职位的职责、资格和福利来吸引潜在候选人。
    但是，这些描述通常无意中透露了远远超出预期的信息。
- en: For instance, a job listing seeking an expert in a specific version of software
    might reveal the exact technologies a company uses, potentially highlighting known
    vulnerabilities in that software. Similarly, listings that mention proprietary
    technologies or in-house tools can give hints about a company’s unique technological
    landscape. Job ads might also detail team structures, revealing hierarchies and
    key roles, which can be exploited for social engineering attacks. Furthermore,
    geographic locations, departmental interactions, and even the tone of the job
    listing can provide astute observers with insights into a company’s culture, size,
    and operational focus.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
- en: Understanding these nuances, this recipe guides you on how to harness the capabilities
    of ChatGPT to meticulously analyze job listings. By doing so, you can extract
    valuable OSINT data, which can then be structured and presented in a comprehensive
    report format.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-161
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The prerequisites for this recipe are simple. You just need a web browser and
    an OpenAI account. If you haven’t already created an account or need a refresher
    on how to use the ChatGPT interface, refer back to [*Chapter 1*](B21091_01.xhtml#_idTextAnchor022)
    for a comprehensive guide.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  id: totrans-163
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Before diving into the step-by-step instructions, it’s essential to understand
    that the quality and depth of OSINT data derived will vary based on the richness
    of the job description. Remember, while this method provides valuable insights,
    always ensure you are authorized to perform any intelligence gathering or penetration
    testing.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we need to analyze the job description:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
- en: 'Prepare the prompt for the initial OSINT analysis:'
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  id: totrans-167
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Provide the job description data. Append the job description to the prompt,
    ensuring clear separation:'
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.4 – Example prompt with the job posting appended to it](img/B21091_06_04.jpg)'
  id: totrans-169
  prefs: []
  type: TYPE_IMG
- en: Figure 6.4 – Example prompt with the job posting appended to it
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
- en: 'Analyze the results. Send the combined prompt and data to ChatGPT and review
    the derived OSINT data:'
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.5 – Example ChatGPT output analysis](img/B21091_06_05.jpg)'
  id: totrans-172
  prefs: []
  type: TYPE_IMG
- en: Figure 6.5 – Example ChatGPT output analysis
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
- en: Now we have analyzed the results, we can generate a structured OSINT report.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
- en: 'Prepare the next prompt for report generation:'
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  id: totrans-176
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Provide the OSINT analysis data. Append the summarized OSINT findings from
    the previous step to the prompt:'
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.6 – Example prompt with the first job data analysis appended to
    it](img/B21091_06_06.jpg)'
  id: totrans-178
  prefs: []
  type: TYPE_IMG
- en: Figure 6.6 – Example prompt with the first job data analysis appended to it
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we can generate the report. Submit the combined prompt and OSINT analysis
    data to ChatGPT to receive a structured report in Markdown format:'
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.7 – Example ChatGPT output with structured formatting](img/B21091_06_07.jpg)'
  id: totrans-181
  prefs: []
  type: TYPE_IMG
- en: Figure 6.7 – Example ChatGPT output with structured formatting
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  id: totrans-183
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The process is divided into two primary steps – OSINT extraction from job listings
    and structured report generation:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
- en: '**Job description analysis**: The first prompt guides ChatGPT to focus on extracting
    OSINT data from job listings. The key here is the role assignment, which ensures
    the model adopts the perspective of a seasoned cybersecurity professional, allowing
    for a more insightful analysis.'
  id: totrans-185
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Report generation**: The second prompt takes the OSINT findings and structures
    them into a detailed report. Again, the role assignment is crucial. It ensures
    that ChatGPT understands the context and delivers the report in a manner suitable
    for a cybersecurity professional. The use of Markdown formatting ensures the report
    is structured, clear, and easy to read.'
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In both steps, the prompts are engineered to give ChatGPT the right context.
    By explicitly instructing the model on the desired outcome and the role it should
    adopt, we ensure the results are tailored to the needs of cybersecurity OSINT
    analysis.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
- en: In conclusion, this recipe illustrates how ChatGPT can be an invaluable tool
    for cybersecurity professionals, simplifying the process of OSINT extraction and
    report generation from job listings.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
- en: There’s more…
  id: totrans-189
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'OSINT analysis of job listings is just the tip of the iceberg when it comes
    to understanding a company’s digital footprint. Here are some additional ways
    to further enhance and expand on this recipe:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
- en: '**Multiple data sources**: While job listings can provide a wealth of information,
    considering other public-facing documents such as press releases, annual reports,
    and official blogs can yield even more OSINT data. Aggregating and cross-referencing
    data from multiple sources can lead to more comprehensive insights.'
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Automate data gathering**: Instead of manually gathering job listings, consider
    building a web scraper or using APIs (if available) to automatically fetch new
    job listings from targeted companies. This allows for continuous monitoring and
    timely analysis.'
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Important note
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
- en: We didn’t include automated web scraping here due to the current controversy
    regarding LLMs and web scraping. These techniques are fine during an authorized
    penetration test as long as you have permission to do so.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
- en: '**Temporal analysis**: Analyzing job listings over time can provide insights
    into a company’s growth areas, shifts in technology stacks, or expansion into
    new domains. For instance, a sudden increase in hiring cloud security professionals
    might indicate a move to cloud platforms.'
  id: totrans-195
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Integration with other OSINT tools**: There are many OSINT tools and platforms
    available that can complement the insights gained from job listings. Integrating
    this method with other tools can provide a more holistic view of a target.'
  id: totrans-196
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Ethical considerations**: Always ensure that any OSINT gathering activity
    is done ethically and legally. Remember that while the information might be publicly
    available, how it’s used can have legal and ethical implications.'
  id: totrans-197
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In conclusion, while analyzing job listings is a potent method in the OSINT
    toolkit, combining it with other techniques and data sources can significantly
    enhance its value. As always, the key is to be thorough and ethical and stay updated
    on the latest trends and tools in the OSINT domain.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
- en: GPT-powered Kali Linux terminals
  id: totrans-199
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Navigating and mastering the command line of any **Linux** distribution, especially
    security-focused ones such as Kali Linux, can be a daunting task. For beginners,
    there’s a steep learning curve as they have to memorize various commands, switches,
    and syntax to accomplish even basic tasks. For experienced professionals, while
    they may be familiar with many commands, constructing complex command strings
    on the fly can sometimes be time-consuming. Enter the power of **natural language
    processing** (**NLP**) and the capabilities of OpenAI’s GPT models.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
- en: 'In this recipe, we present an innovative approach to interacting with your
    Linux terminal: an NLP-powered terminal interface. This script harnesses the capabilities
    of OpenAI’s GPT model to allow users to input requests in natural language. In
    return, the model deciphers the intent and translates it into the appropriate
    command for the Linux operating system. For instance, instead of remembering the
    intricate syntax for certain operations, a user could simply input `Show me all
    the files modified in the last 24 hours`, and the model would generate and execute
    the appropriate `find` command.'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
- en: 'This approach provides numerous benefits:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
- en: '**User-friendly**: Beginners can start performing complex operations without
    the need for deep command-line knowledge. It lowers the barrier to entry and accelerates
    the learning curve.'
  id: totrans-203
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Efficiency**: Even for experienced users, this can speed up workflows. Instead
    of recalling specific flags or syntax, a simple sentence can generate the needed
    command.'
  id: totrans-204
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Flexibility**: It’s not just limited to OS commands. This approach can be
    extended to applications within the OS, from networking tools to cybersecurity
    utilities in distributions such as Kali Linux.'
  id: totrans-205
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Logging**: Every command generated by the model is logged, providing an audit
    trail and a way to learn the actual commands over time.'
  id: totrans-206
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By the end of this recipe, you’ll have a terminal interface that feels more
    like a conversation with a Linux expert, guiding you and executing tasks on your
    behalf, powered by the advanced NLP capabilities of GPT models.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-208
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Before diving into this recipe, ensure you have your OpenAI account set up and
    your API key on hand. If not, you should refer back to [*Chapter 1*](B21091_01.xhtml#_idTextAnchor022)
    for the necessary setup details. You will also need **Python version 3.10.x**
    **or later**.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
- en: 'Additionally, confirm you have the following Python libraries installed:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
- en: '`openai`: This library enables you to interact with the OpenAI API. Install
    it using the `pip install` `openai` command.'
  id: totrans-211
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`os`: This is a built-in Python library that allows you to interact with the
    operating system, especially for accessing environment variables.'
  id: totrans-212
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`subprocess`: This library is a built-in Python library that allows you to
    spawn new processes, connect to their input/output/error pipes, and obtain their
    return codes.'
  id: totrans-213
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Once these requirements are in place, you are all set to dive into the script.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  id: totrans-215
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To construct a GPT-powered terminal, we’ll leverage the OpenAI API to interpret
    natural language input and generate the corresponding Linux command. This fusion
    of advanced NLP with the OS’s capabilities offers a unique and enhanced user experience,
    especially for those who may not be familiar with intricate Linux commands. Follow
    this step-by-step guide to integrate this functionality into your Linux system:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
- en: '`pip`:'
  id: totrans-217
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  id: totrans-218
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '`openai-key.txt`:'
  id: totrans-219
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  id: totrans-220
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: This function reads the content of a file. In our case, it retrieves the API
    key from `openai-key.txt`.
  id: totrans-221
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Sending requests to the** **OpenAI API**:'
  id: totrans-222
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a function that sets up the request to the OpenAI API and retrieves
    the output:'
  id: totrans-223
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE22]'
  id: totrans-224
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: This function sends a prompt to the OpenAI GPT model and fetches the corresponding
    output.
  id: totrans-225
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`subprocess` library to execute the command generated by the OpenAI API on
    your Linux system:'
  id: totrans-226
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  id: totrans-227
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: This piece of code initializes a new subprocess, runs the command, and provides
    real-time feedback to the user.
  id: totrans-228
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`while` loop:'
  id: totrans-229
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  id: totrans-230
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: This loop ensures the script continuously listens for user input, processes
    it, and executes the corresponding commands until the user decides to quit.
  id: totrans-231
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Logging the commands**:For future reference and auditing purposes, log every
    generated command:'
  id: totrans-232
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  id: totrans-233
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: This code appends each user request and the corresponding generated command
    to a file named `command-log.txt`.
  id: totrans-234
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`prompt4.txt`:'
  id: totrans-235
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  id: totrans-236
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Here’s how the completed script should look:'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  id: totrans-238
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: This script provides a fully operational GPT-powered, NLP-driven terminal interface,
    providing a powerful and user-friendly way to interact with your Linux system.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  id: totrans-240
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'At its core, this script bridges the gap between NLP and the Linux operating
    system. Let’s break down the components to understand the intricacies of this
    integration:'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
- en: '`List all files in the current directory`, the script sends this query to the
    GPT-3 model. The model then processes it and responds with a corresponding Linux
    command – in this case, `ls`.'
  id: totrans-242
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`subprocess` library is the linchpin that allows the script to execute commands
    on the operating system. This library provides an interface to spawn and interact
    with subprocesses, mimicking the command-line behavior within the script.'
  id: totrans-243
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The command returned by GPT-3 is executed using `subprocess.Popen()`. The advantage
    of using `Popen` over other methods is its flexibility. It spawns a new process,
    lets you interact with its input/output/error pipes, and obtains its return code.
  id: totrans-244
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`while` loop to keep the terminal running continuously, allowing the user to
    input multiple requests without having to restart the script. This emulates the
    behavior of a typical terminal where a user can run successive commands.'
  id: totrans-245
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Logging mechanism**:Maintaining a log of all executed commands is crucial
    for multiple reasons. For one, it aids in troubleshooting; if a command behaves
    unexpectedly, you can trace back to see what was executed. Furthermore, from a
    security perspective, having an audit trail of commands can be invaluable.'
  id: totrans-246
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Security measures**:Storing sensitive information such as API keys in plain
    text within scripts is a potential security risk. This script circumvents this
    by reading the API key from a separate file, ensuring that even if the script
    is shared or exposed, the API key remains protected. Always ensure that the file
    containing the API key has appropriate file permissions to limit unauthorized
    access.'
  id: totrans-247
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**GPT-3 prompt design**:The design of the prompt is crucial. A well-crafted
    prompt will guide the model to provide more accurate results. In this script,
    a predefined prompt is merged with the user’s input to generate a more comprehensive
    query for GPT-3\. This ensures that the model has the right context to interpret
    the request and return an appropriate command.'
  id: totrans-248
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In conclusion, this script embodies a seamless melding of advanced NLP capabilities
    with the power of the Linux operating system. By translating natural language
    into complex commands, it offers both beginners and experienced users an enhanced,
    intuitive, and efficient interface to interact with their systems.
  id: totrans-249
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: There’s more…
  id: totrans-250
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This script is just the tip of the iceberg when it comes to leveraging the
    power of NLP with operating systems. Here are some enhancements and extensions
    you can consider:'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
- en: '`os.name` or `platform.system()`), you can dynamically adjust the GPT-3 prompt
    to request OS-specific commands.'
  id: totrans-252
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Command validation**: Before executing any command, implement a security
    layer that validates the command against a list of safe commands. This can prevent
    potentially harmful commands from being executed inadvertently.'
  id: totrans-253
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Interactive command execution**: Some commands, especially installation or
    system configuration ones, might require user interaction (e.g., confirmation
    or choices). Enhancing the script to handle such interactive commands would be
    invaluable.'
  id: totrans-254
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`Get me the latest threats related to ransomware` could fetch real-time data
    from these feeds.'
  id: totrans-255
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Enhanced logging**: The current logging mechanism records commands. Consider
    extending this to log the date, the time, and perhaps the user, especially if
    deployed on a multi-user system. This provides better auditing capabilities.'
  id: totrans-256
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**User profiles**: If you’re aiming to make this tool usable by multiple people,
    consider user profiles. Each profile could have its custom set of commands, permissions,
    and perhaps even its API keys.'
  id: totrans-257
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Command history**: Just like traditional terminals maintain a command history,
    having a mechanism where users can recall and rerun previous commands could enhance
    the user experience.'
  id: totrans-258
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Remember, while the potential applications are vast, always be mindful of security.
    Ensure you’re not exposing sensitive information, and always validate and sanitize
    inputs and outputs.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
- en: Hint
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
- en: Using ChatGPT and the OpenAI API for red team support can be tricky due to OpenAI’s
    evolving safety mechanisms. While we don’t condone unethical or malicious behavior,
    sometimes it is necessary to mimic the tactics and actions of an attacker in order
    to truly assess our own vulnerabilities and associated level of risk. These methods
    should obviously be performed on authorized systems only. That said, when we can
    get OpenAI’s models to support us in the efforts, it is of great value and can
    save a lot of time.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
- en: I have found that the OpenAI API tends to be more lenient than the ChatGPT web
    UI when it comes to red team adversarial tactics. It also helps in many cases
    to include in your prompts that you are authorized to perform the actions you
    are asking ChatGPT to assist with and tell ChatGPT that you are looking for examples
    (just as we have done in the previous recipe).
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
- en: We will be providing even more strategies for getting the results you need from
    ChatGPT using red team methods later on in this book, as we cover more advanced
    techniques.
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
