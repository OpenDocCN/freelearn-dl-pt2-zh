["```py\nallprojects {\n    repositories {\n        google()\n        jcenter()\n        mavenCentral()\n        maven {\n            url 'https://csspeechstorage.blob.core.windows.net/maven/'\n        }\n    }\n}\n```", "```py\nimplementation 'com.microsoft.cognitiveservices.speech:client-sdk:1.10.0'\n```", "```py\nimport androidx.appcompat.app.AppCompatActivity;\nimport com.microsoft.cognitiveservices.speech.KeywordRecognitionModel;\nimport com.microsoft.cognitiveservices.speech.SpeechConfig;\nimport com.microsoft.cognitiveservices.speech.SpeechRecognizer;\nimport com.microsoft.cognitiveservices.speech.audio.AudioConfig;\n\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Future;\n\nimport android.content.res.AssetManager;\nimport android.os.Bundle;\nimport android.text.Layout;\nimport android.text.TextUtils;\nimport android.view.View;\nimport android.widget.Button;\nimport android.widget.TextView;\n```", "```py\npublic class MainActivity extends AppCompatActivity {\n    private static String SpeechSubscriptionKey = \"Your key here\";\n    private static String SpeechRegion = \"westus2\";\n    //your location here\n\n    private TextView recognizedTextView;\n    private static String LanguageRecognition = \"en-US\";\n    private Button recognizeKwsButton;\n\n    private static String Keyword = \"computer\";\n    private static String KeywordModel = \"computer.zip\";\n\n    private static String DeviceGeometry = \"Linear4\";\n    private static String SelectedGeometry = \"Linear4\";\n    protected static ExecutorService s_executorService;\n\n    final AssetManager assets = this.getAssets();\n```", "```py\n    private void setTextbox(final String s) {\n        MainActivity.this.runOnUiThread(() -> {\n           recognizedTextView.setText(s);\n           final Layout layout = recognizedTextView.getLayout();\n           if (layout != null) {\n               int scrollDelta = layout.getLineBottom(\n                   recognizedTextView.getLineCount() - 1)\n                       - recognizedTextView.getScrollY() - \n                       recognizedTextView.getHeight();\n               if (scrollDelta > 0) {\n                   recognizedTextView.scrollBy(0, scrollDelta);\n               }\n           }\n       });\n   }\n```", "```py\n    private AudioConfig getAudioConfig() {\n        return AudioConfig.fromDefaultMicrophoneInput();\n    }\n```", "```py\n    private interface OnTaskCompletedListener<T> {\n        void onCompleted(T taskResult);\n    }\n```", "```py\n    public static SpeechConfig getSpeechConfig() {\n        SpeechConfig speechConfig = SpeechConfig.fromSubscription(\n            SpeechSubscriptionKey, SpeechRegion);\n\n        speechConfig.setProperty(\"DeviceGeometry\", DeviceGeometry);\n        speechConfig.setProperty(\"SelectedGeometry\", \n                                  SelectedGeometry);\n        speechConfig.setSpeechRecognitionLanguage(\n            LanguageRecognition);\n\n        return speechConfig;\n    }\n```", "```py\nprivate <T> void setOnTaskCompletedListener(Future<T> task,\n    OnTaskCompletedListener<T> listener) {\n        s_executorService.submit(() -> {\n            T result = task.get();\n            listener.onCompleted(result);\n            return null;\n        });\n    }\n```", "```py\n@Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n\n        recognizeKwsButton = \n        findViewById(R.id.buttonRecognizeKws);\n        recognizedTextView = findViewById(R.id.recognizedText);\n\n        recognizeKwsButton.setOnClickListener(new \n        View.OnClickListener() {\n            private static final String delimiter = \"\\n\";\n            private final ArrayList<String> content = new \n            ArrayList<>();\n            private SpeechRecognizer reco = null;\n\n            @Override\n            public void onClick(View view) {\n                content.clear();\n                content.add(\"\");\n                content.add(\"\");\n                try {\n                    final KeywordRecognitionModel \n                    keywordRecognitionModel = \n                     KeywordRecognitionModel.fromStream(\n                     assets.open(KeywordModel),Keyword,true);\n\n                    final Future<Void> task = \n                    reco.startKeywordRecognitionAsync(\n                        keywordRecognitionModel);\n                    setOnTaskCompletedListener(task,result ->{\n                        content.set(0, \"say `\" + Keyword + \n                                    \"`...\");\n                        setTextbox(TextUtils.join(delimiter, \n                        content));\n                    });\n\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n            }});\n    }\n}\n```", "```py\n python -m pip install azure-cognitiveservices-speech\n```", "```py\nimport azure.cognitiveservices.speech as speechsdk\nimport time\n```", "```py\nspeech_key, service_region = \"Your Key\", \"westus2\"\n```", "```py\nspeech_config = speechsdk.SpeechConfig(subscription=speech_key,\n                                       region=service_region)\nspeech_recognizer = \\\nspeechsdk.SpeechRecognizer(speech_config=speech_config)\nspeech_recognizer.session_started.connect(lambda evt: \\\n    print('SESSION STARTED: {}'.format(evt)))\nspeech_recognizer.session_stopped.connect(lambda evt: \\\n    print('\\nSESSION STOPPED {}'.format(evt)))\nspeech_recognizer.recognized.connect(lambda evt: \\\n    print('\\n{}'.format(evt.result.text)))\n```", "```py\ntry:\n    while True:\n        speech_recognizer.start_continuous_recognition()\n        time.sleep(10)\n        speech_recognizer.stop_continuous_recognition()\n```", "```py\nexcept KeyboardInterrupt:\n    speech_recognizer.session_started.disconnect_all()\n    speech_recognizer.recognized.disconnect_all()\n    speech_recognizer.session_stopped.disconnect_all()\n```", "```py\nimport requests\n```", "```py\ntext_query = \"give me a vanilla milk shake\"\n```", "```py\nr = requests.get(f'Your Copied URL String={text_query}')\n```", "```py\nmessage = r.json()\nprint(message['prediction']['topIntent'])\nfor entity in message['prediction']['entities']['$instance']:\n    print(entity)\n```", "```py\npip3 install -r requirements.txt\n```", "```py\nfrom flask import Flask,request,Response\nfrom botbuilder.schema import Activity\nfrom botbuilder.core import (\n    BotFrameworkAdapter,\n    BotFrameworkAdapterSettings,\n    ConversationState,\n    UserState,\n    MemoryStorage\n  )\nimport asyncio\nfrom luisbot import LuisBot\n```", "```py\napp = Flask(__name__)\n```", "```py\nloop = asyncio.get_event_loop()\n```", "```py\nbotadaptersettings = BotFrameworkAdapterSettings(\"\",\"\")\nbotadapter = BotFrameworkAdapter(botadaptersettings)\nmemstore = MemoryStorage()\nconstate = ConversationState(memstore)\nuserstate = UserState(memstore)\nbotdialog = LuisBot(constate,userstate)\n```", "```py\n@app.route(\"/api/messages\",methods=[\"POST\"])\n```", "```py\ndef messages():\n    if \"application/json\" in request.headers[\"content-type\"]:\n        body = request.json\n    else:\n        return Response(status = 415)\n\n    activity = Activity().deserialize(request.json)\n\n    auth_header = (request.headers[\"Authorization\"] if \\\n                  \"Authorization\" in request.headers else \"\")\n\n    async def call_fun(turncontext):\n        await botdialog.on_turn(turncontext)\n\n    task = \\\n    loop.create_task(botadapter.process_activity(activity,\n                                                 \"\",call_fun))\n    loop.run_until_complete(task)\n```", "```py\nfrom botbuilder.ai.luis import LuisApplication, \\\nLuisPredictionOptions, LuisRecognizer\nfrom botbuilder.core import(\nConversationState\n, UserState\n, TurnContext\n, ActivityHandler\n, RecognizerResult\n, MessageFactory\n)\nfrom enum import Enum\n```", "```py\nclass EnumOrder(Enum): \n\n    ENTREE=1\n    SIDE=2\n    DRINK=3\n    DONE=4\n\nclass Order:\n    def __init__(self):\n        self.entree = \"\"\n        self.drink=\"\"\n        self.side=\"\"\n\n    @property\n    def Entree(self):\n        return self.entree\n    @Entree.setter\n    def Entree(self,entree:str):\n        self.entree = entree\n\n    @property\n    def Drink(self):\n        return self.drink\n    @Drink.setter\n    def Drink(self,drink:str):\n        self.drink = drink\n\n    @property\n    def Side(self):\n        return self.side\n    @Side.setter\n    def Side(self,side:str):\n        self.side = side\n```", "```py\nclass ConState:\n    def __init__(self):\n        self.orderstatus = EnumOrder.ENTREE\n    @property\n    def CurrentPos(self):\n        return self.orderstatus\n    @CurrentPos.setter\n    def EnumOrder(self,current:EnumOrder):\n        self.orderstatus = current\n```", "```py\nclass LuisBot(ActivityHandler):\n    def __init__(self, constate:ConversationState, \n    userstate:UserState):\n        luis_app = LuisApplication(\"APP ID\",\"primary starter key\",\\\n                    \"https://westus.api.cognitive.microsoft.com/\")\n\n        luis_option = LuisPredictionOptions(\n            include_all_intents=True,include_instance_data=True)\n        self.LuisReg = LuisRecognizer(luis_app,luis_option,True)\n        self.constate = constate\n        self.userstate = userstate\n        self.conprop = self.constate.create_property(\"constate\")\n        self.userprop = self.userstate.create_property(\"userstate\")\n```", "```py\n    async def on_turn(self,turn_context:TurnContext):\n        await super().on_turn(turn_context)\n        await self.constate.save_changes(turn_context)\n        await self.userstate.save_changes(turn_context)\n```", "```py\n    async def on_message_activity(self,turn_context:TurnContext):\n        conmode = await self.conprop.get(turn_context,ConState)\n        ordermode = await self.userprop.get(turn_context,Order)\n        luis_result = await self.LuisReg.recognize(turn_context)\n        intent = LuisRecognizer.top_intent(luis_result)\n        await turn_context.send_activity(f\"Top Intent : {intent}\")\n        retult = luis_result.properties[\"luisResult\"]\n        item = ''\n        if len(retult.entities) != 0:\n            await turn_context.send_activity(f\" Luis Result \n                                            {retult.entities[0]}\")\n            item = retult.entities[0].entity\n```", "```py\n        if(conmode.orderstatus == EnumOrder.ENTREE):\n            await turn_context.send_activity(\"Please enter a main \\\n                                             Entree\")\n            conmode.orderstatus = EnumOrder.SIDE\n        elif(conmode.orderstatus == EnumOrder.SIDE):\n            ordermode.entree = item\n            await turn_context.send_activity(\"Please enter a side \\\n                                             dish\")\n            conmode.orderstatus = EnumOrder.DRINK\n        elif(conmode.orderstatus == EnumOrder.DRINK):\n            await turn_context.send_activity(\"Please a drink\")\n            ordermode.side = item\n            conmode.orderstatus = EnumOrder.DONE\n        elif(conmode.orderstatus == EnumOrder.DONE):\n            ordermode.drink = item\n            info = ordermode.entree + \" \" + ordermode.side + \\\n                    \" \" + ordermode.drink\n            await turn_context.send_activity(info)\n            conmode.orderstatus = EnumOrder.ENTREE\n```", "```py\nimport requests\nfrom playsound import playsound\n```", "```py\nEndpoint_key = \"you will find this in your deployment\"\nlocation = 'the location you deployed it like australiaeast'\ndeploymentid = 'you will find this in your deployment' \nproject_name = 'The name you gave to your entire project'\ntext = \"Hey, this is a custom voice demo for Microsoft's Custom Voice\"\n```", "```py\ndef get_token():\n    fetch_token_url = f\"https://{location}.api.cognitive.microsoft\\\n    .com/sts/v1.0/issueToken\"\n    headers = {\n            'Ocp-Apim-Subscription-Key': Endpoint_key\n        }\n    response = requests.post(fetch_token_url, headers=headers)\n    access_token = str(response.text)\n    return access_token\n```", "```py\nconstructed_url = f\"https://{location}.voice.speech.microsoft\\\n.com/cognitiveservices/v1?deploymentId={deploymentid}\"\nheaders = {\n     'Authorization': 'Bearer ' + get_token(),\n     'Content-Type': 'application/ssml+xml',\n     'X-Microsoft-OutputFormat': 'riff-24khz-16bit-mono-pcm',\n     'User-Agent': project_name \n}\n\nbody = f\"\"\"<speak version=\\\"1.0\\\" xmlns=\\\"http://www.w3.org/2001/10/synthesis\\\" xmlns:mstts=\\\"http://www.w3.org/2001/mstts\\\" xml:lang=\\\"en-US\\\">\n<voice name=\\\"Siraj\\\">{text}</voice></speak>\"\"\" \n\nresponse = requests.post(constructed_url, headers=headers, \n                         data=body)\n```", "```py\nif response.status_code == 200:\n    with open('sample.wav', 'wb') as audio:\n        audio.write(response.content)\n        playsound('sample.wav')\n        print(\"\\nStatus code: \" + str(response.status_code) + \n              \"\\nYour TTS is ready for playback.\\n\")\nelse:\n    print(\"\\nStatus code: \" + str(response.status_code) + \n          \"\\nSomething went wrong. Check your subscription\\\n      key and headers.\\n\")\n```", "```py\nimport requests\nimport json\nfrom playsound import playsound\n```", "```py\nauth = 'EndpointKey '\nquestion = 'how many calories in a cheese burger'\nprojectURL = ''\n```", "```py\nheaders = {\n    'Authorization': auth,\n    'Content-type': 'application/json',\n}\n\ndata = '{ \"question\":\"'+question+'\"}'\n```", "```py\nresponse = requests.post(projectURL, headers=headers, data=data)\njson_data = json.loads(response.text)\n```", "```py\nfor meta in json_data['answers'][0]['metadata']:\n    if meta['name'] == \"file\":\n        audiofile = 'audio/' + meta['value']\n        print(audiofile)\n        playsound(audiofile)\n```"]