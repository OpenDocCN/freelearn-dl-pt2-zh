- en: '6'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Creating Multi-Step Zaps and Using Built-In Apps
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As you become more comfortable with using Zapier to automate your business workflows,
    you will find that in many situations, you may need more flexibility than what
    single-step workflows can offer. You will start to build more complex workflows,
    which will allow you to automate multiple action steps in your processes involving
    tasks in various apps. You may find that often, the data you need to use in subsequent
    actions is not available in the trigger and existing action steps. In these cases,
    you will need to know how to use search action events to retrieve data. To complement
    using triggers and actions, you may also want to customize your Zaps further by
    using the myriad of built-in tools that Zapier has created to allow you to transform
    and manipulate data, all from within the Zapier platform.
  prefs: []
  type: TYPE_NORMAL
- en: In [*Chapter 3*](B18474_03.xhtml#_idTextAnchor374), *Building Your First Automated
    Workflow (Zap)*, we covered the basics of how to create a single-step Zap. In
    this chapter, we will build on the knowledge you have gained and discuss how to
    develop multi-step Zaps using multiple actions and searches and introduce you
    to the various built-in apps created by Zapier. We will begin by covering how
    to create multi-step Zaps by recapping using action steps and adding search steps.
    Then, we will explore how to delete, duplicate, reorder, and rename steps in Zaps.
    You will also be able to test your knowledge with an exercise involving a multi-step
    Zap. Then, we will briefly introduce the functionality of all the built-in apps
    by Zapier, all of which will be covered in detail in subsequent chapters.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will cover the following key topics in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating multi-step Zaps with multiple action and search steps
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deleting, duplicating, reordering, and renaming steps
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introducing apps by Zapier
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Once you have worked through each of these topics, you will know how to create
    a multi-step Zap and use the search functionality in your action steps. You will
    also have a better understanding of the basic functionality of all of Zapier’s
    built-in apps.
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To work through the content in this chapter, you will need access to a Zapier
    account. To build multi-step Zaps, you will need to subscribe to the Zapier Starter
    plan as a minimum. You can get access to the Zap templates used in this chapter
    here: [https://bit.ly/zapier-book](https://bit.ly/zapier-book). Using these templates
    will help you visualize how the process works.'
  prefs: []
  type: TYPE_NORMAL
- en: Creating Zaps with multiple action and search steps
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In [*Chapter 3*](B18474_03.xhtml#_idTextAnchor374), *Building Your First Automated
    Workflow (Zap),* we walked through a step-by-step process to create our first
    single-step Zap. In [*Chapter 5*](B18474_05.xhtml#_idTextAnchor635), *Troubleshooting
    and Handling Zap Errors*, we used this knowledge to create alert Zaps using Zapier
    Manager and App Status by Zapier. Now that you’ve experienced first-hand what
    Zapier can offer in just a single-step workflow, it’s time to explore the infinite
    automation possibilities of multi-step workflows to power your productivity.
  prefs: []
  type: TYPE_NORMAL
- en: As we discussed in [*Chapter 3*](B18474_03.xhtml#_idTextAnchor374), *Building
    Your First Automated Workflow (Zap)*, once you have set up your trigger step,
    you can add actions, searches, filters, and delays after the trigger and between
    any action step, and add paths at the end, using the **+** icon.
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: You can add up to 99 action steps to a Zap; however, for control purposes, it
    is better to have shorter workflows and to break your process down into more manageable
    Zaps where possible.
  prefs: []
  type: TYPE_NORMAL
- en: We will discuss how to add filters, delays, and paths to your workflows later
    in [*Chapter 7*](B18474_07.xhtml#_idTextAnchor905), *Getting Started with Built-In
    Apps*, when we will explore some of Zapier’s built-in apps. Before we do that,
    though, we need to understand how to use the search functionality in our action
    steps. Search functionality allows you to dynamically look up data that may not
    be present in your trigger and existing action steps. This is possible if the
    app you intend to use to search for data has search action events available through
    the integration.
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: Many apps offer you the option of searching for data. It’s difficult to express
    in words the usefulness of search action functionality. It gives the user the
    ability to extract information that you might not have available from the trigger
    steps or previous action steps. A common example would be when you make a sale
    in **Shopify** and you’re given the product ID of the product associated with
    the sale. Here, you might want to search for other information associated with
    the product to then use in other steps.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are two ways to add **search** action steps to your Zaps:'
  prefs: []
  type: TYPE_NORMAL
- en: Using the **+** icon
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By going to a **Choose value…** field and using the **Custom** header option
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let’s look at each in turn. As we progress through this section, you will see
    that many of the examples and screenshots refer to **Pipedrive CRM**. We’ve used
    this example as it illustrates the search action functionality well. Bear in mind
    that many apps have search action functionality, which you can utilize as required.
  prefs: []
  type: TYPE_NORMAL
- en: Adding a search step using the + icon
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If the app you are using has search action events available through the integration,
    they will be denoted by **Find…**, plus the item. For example, in Pipedrive, the
    following search action events are available:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Find Person**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Find Lead**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Find User**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Find Organization**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Find Deal**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Find Activity**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Find Product**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Find Product(s)**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Searches are most commonly performed using unique identifiers for items, such
    as names, email addresses, subjects, codes, and record IDs. Most apps with search
    action event integrations will allow multiple ways to search for items.
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: A common mistake that many users make is to search by the “name” associated
    with a record ID. Record IDs are generally the best way to search for an item
    as in most cases, record IDs are unique between items in an app. For example,
    in a CRM, duplicates may exist for a contact that may have variations in data;
    however, only one record ID will exist to differentiate between those duplicates.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s use an example to illustrate implementing a search action event. We will
    use an altered version of the working example from [*Chapter 3*](B18474_03.xhtml#_idTextAnchor374),
    *Building Your First Automated Workflow (Zap)*, where we will change the trigger
    app to Pipedrive and the trigger event will be **New Deal**. In this case, we
    may want to add the contact’s full name as well as their first and last name to
    columns in our Google Sheets spreadsheet. When we try to search for the person’s
    first name, we see that the data that pulls through from the trigger step only
    presents the contact’s full name. This is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: "![Figure 6.1 – \uFEFFOverview of searching by first name yielding no results](img/Figure_6.01_B18474.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 6.1 – Overview of searching by first name yielding no results
  prefs: []
  type: TYPE_NORMAL
- en: In this case, as the Pipedrive integration has a **Find Person** search action
    event, we can add a search action step between our trigger and the existing action
    step to retrieve these details. We can do this by clicking the **+** icon.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: Another option would be to add a step using the Zapier built-in app Formatter
    by Zapier. Here, you can add a `Person Name` data so that you can extract the
    first and last names. We will cover the Formatter by Zapier text splitting function
    in [*Chapter 17*](B18474_17.xhtml#_idTextAnchor1922), *Text Formatting Functions
    in Zapier –* *Part 2*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we can add Pipedrive as our app and **Find Person** as our action event,
    as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: "![Figure 6.2 – \uFEFFOverview of the Find Person action event](img/Figure_6.02_B18474.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 6.2 – Overview of the Find Person action event
  prefs: []
  type: TYPE_NORMAL
- en: 'After adding this to our Pipedrive account, we can customize our search – in
    this example, by adding the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Field To Search By**: In this case, we can use the person’s record ID to
    search with, so we will choose the **ID** value from the dropdown.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**ID (Term)**: In this case, we would map the **Person ID** dynamic data value
    from our trigger step to this field. The ID field is a number (integer) field
    and the value we enter (whether static or dynamic) should be as such.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Search For Exact Match**?: In this case, we will choose the **Yes** option
    as we want to search for an exact match.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Should This Step Be Considered A “success” When Nothing Is Found**: Use this
    Boolean field to select **Yes (true)** or **No (false)** from the drop-down menu,
    enter text, or insert data from previous steps for this step to be considered
    a “success” if nothing is found in the search. The default for this field is **No
    (false)**, which you should choose if you want the step to “halt” if nothing is
    found, as this is the most common use case. This means that Zapier will produce
    a soft error that you will not be notified of; the Zap will not pause. However,
    all subsequent steps that depend on the data in this step will be skipped. Use
    the **Yes (true)** option when you want to allow the Zap to continue and subsequent
    steps to run. If you choose this option, it is best practice to have more control
    in your workflows by adding **Filter by Zapier** or **Paths by Zapier** conditional
    logic and allowing those steps to pass or stop based on whether the search returned
    a result or not. We’ll learn how to use conditional workflows with this field
    option in [*Chapter 7*](B18474_07.xhtml#_idTextAnchor905), *Getting Started with*
    *Built-In Apps*.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Create Pipedrive Person if it doesn’t exist yet?**: Tick this checkbox if
    you want a new record to be created if the search does not return an existing
    record. Once ticked, the step will refresh and display the same fields as those
    for the **Create Person** action event. The entity you want to search for in your
    specified app – for example, **Pipedrive Person** – will differ between apps,
    and so will the **Create** entity.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'This is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: "![Figure 6.3 – \uFEFFOverview of customizing the Find Person event in the Pipedrive\
    \ search action step](img/Figure_6.03_B18474.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 6.3 – Overview of customizing the Find Person event in the Pipedrive
    search action step
  prefs: []
  type: TYPE_NORMAL
- en: We could, however, choose to use any other existing data value, either static
    or dynamic, to search by. For example, we could use the person’s email address
    or name as the item to search by if we are confident that they are likely to be
    unique enough to be able to find that specific record.
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: Search action event variables will differ between action events and apps. Therefore,
    what you see in the **Action** section is likely to be different from our example.
    The Zap editor shows useful notes as to what you can include in each field.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, if we have mapped our fields correctly, the test using this will retrieve
    the correct contact, along with all the necessary details. We need to map the
    contact’s first name and last name in our **Create Spreadsheet Row in Google Sheets**
    action step. This is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: "![Figure 6.4 – \uFEFFOverview of search for last name yielding a result](img/Figure_6.04_B18474.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 6.4 – Overview of search for last name yielding a result
  prefs: []
  type: TYPE_NORMAL
- en: Now, we can go ahead and retest our action using the **Retest action** button
    to see how our data pushes into our Google Sheets spreadsheet. Alternatively,
    we can **Skip Test**.
  prefs: []
  type: TYPE_NORMAL
- en: 'As a comparison, the following screenshot shows a search action step using
    **Mailchimp** as the app:'
  prefs: []
  type: TYPE_NORMAL
- en: "![Figure 6.5 – \uFEFFOverview of customizing the Find Subscriber search action\
    \ step](img/Figure_6.05_B18474.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 6.5 – Overview of customizing the Find Subscriber search action step
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows that a large amount of data can be extracted
    from many search action steps that can be used in your other action steps:'
  prefs: []
  type: TYPE_NORMAL
- en: "![Figure 6.6 – \uFEFFOverview of the results of the Find Subscriber sear\uFEFF\
    ch](img/Figure_6.06_B18474.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 6.6 – Overview of the results of the Find Subscriber search
  prefs: []
  type: TYPE_NORMAL
- en: Now, let’s take a look at how to add a search action step from within a **Choose**
    **value…** field.
  prefs: []
  type: TYPE_NORMAL
- en: Adding a search step in a Choose value… field
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In [*Chapter 3*](B18474_03.xhtml#_idTextAnchor374), *Building Your First Automated
    Workflow (Zap)*, we introduced the two main field types that you will find in
    action steps: **Choose value…** and **Enter text or insert data…**. When using
    the **Choose value…** field type, you can map in either static or dynamic data.
    Dynamic data retrieved from trigger or previous action steps can be mapped using
    the **Custom** header option. If the dynamic data that you specifically want to
    map does not exist in previous steps, you can add a search action if the app you
    are using allows this through the integration.'
  prefs: []
  type: TYPE_NORMAL
- en: Let’s illustrate this by adding an extra requirement to the working example.
    Some CRMs such as Pipedrive have a product module that allows you to store set
    codes, descriptions, and pricing for products that you might charge your customers
    for. In our workflow, once we have created a new row in a Google Sheets spreadsheet,
    we may want to automatically add a product to our deal in Pipedrive. For our specific
    example, when the deal is created, a “product” is selected from a drop-down menu
    in Pipedrive. We want to use this to search for the actual product from our Pipedrive
    product module so that we can add it to the deal. This example may not be that
    relevant in real life, but it serves to illustrate using the **Choose Value...**
    field type for searching.
  prefs: []
  type: TYPE_NORMAL
- en: 'First of all, we will need to add an action step after the **Create Spreadsheet
    Row in Google Sheets** action step using the **+** icon. We’ll use **Pipedrive**
    for our app and **Add Product to Deal** for our action event. Under **Action**,
    for the **Product** field, click on the **Add a search step** button next to the
    field. This is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: "![Figure 6.7 – \uFEFFOverview of finding the Add a search step button in the\
    \ Cust\uFEFFom tab](img/Figure_6.07_B18474.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 6.7 – Overview of finding the Add a search step button in the Custom
    tab
  prefs: []
  type: TYPE_NORMAL
- en: 'This will produce a popup with instructions, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: "![Figure 6.8 – \uFEFFOverview of the Add a search ste\uFEFFp popup](img/Figure_6.08_B18474.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 6.8 – Overview of the Add a search step popup
  prefs: []
  type: TYPE_NORMAL
- en: Once we have clicked on the **Add a search step** button, a Pipedrive **Find
    Product** search action step will be added automatically before the **Add Product**
    action step.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once we have confirmed the Pipedrive account we want to use, we need to map
    in a value to search with in the **Action** section. In our example, we will use
    the value we entered from our Pipedrive product field from our trigger step. This
    is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: "![Figure 6.9 – \uFEFFOverview of customizing the Find Product action step](img/Figure_6.09_B18474.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 6.9 – Overview of customizing the Find Product action step
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, performing **Test** will retrieve the product information from the
    products module in Pipedrive; the ID will be automatically mapped to our **Add
    Product to Deal** action step. This is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: "![Figure 6.10 – \uFEFFOverview of the search step results are automatically\
    \ mapped to the originating acti\uFEFFon step](img/Figure_6.10_B18474.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 6.10 – Overview of the search step results are automatically mapped to
    the originating action step
  prefs: []
  type: TYPE_NORMAL
- en: We can now fill in the other fields by adding static data or mapping dynamic
    data from previous steps, proceed to **Test**, and complete our workflow.
  prefs: []
  type: TYPE_NORMAL
- en: You can get a template of this Zap and add it to your Zapier account by going
    to [https://bit.ly/zapier-book](https://bit.ly/zapier-book). Using this Zap template
    will help you visualize how the process works.
  prefs: []
  type: TYPE_NORMAL
- en: Now, you can try this out yourself with the following exercise.
  prefs: []
  type: TYPE_NORMAL
- en: Exercise – creating a multi-step Zap with a search action
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Use one of the processes that you defined in [*Chapter 2*](B18474_02.xhtml#_idTextAnchor225),
    *Preparing to Automate Your Processes*, to work through the content in this section
    to create a multi-step Zap with a search action. Try to incorporate multiple apps
    in your workflow.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is an example that you could use:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Trigger**: A webform is submitted.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Action**: Add a new subscriber to your email marketing app.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Action**: Add a new contact to your invoicing app.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Action**: Search for a user ID on a Google Sheets spreadsheet lookup list.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Action**: Add a new onboarding task to your task management app and assign
    it to the user from *step 4*.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Action**: Send an email or a message in your messaging app to your team to
    notify them that new contact and subscriber records have been created.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can repeat this exercise for any of the processes that you have documented
    and that would benefit from automation.
  prefs: []
  type: TYPE_NORMAL
- en: You should now have a better understanding of how to create and customize multi-step
    Zaps with custom values and search functionality. Now, let’s cover how to alter
    steps in your Zaps if you need to delete, duplicate, reorder, or rename them.
  prefs: []
  type: TYPE_NORMAL
- en: Deleting, duplicating, pasting, reordering, and renaming steps in your Zaps
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As you become more familiar with building multi-step Zaps, there may be times
    that you want to delete, duplicate, reorder, or rename the steps in your Zaps.
    To do this, choose a step that you would like to perform the relevant action on,
    select the three-dots icon to reveal a drop-down menu, and select the option.
    This is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.11 – Managing a step in a Zap in the Classic Editor](img/Figure_6.11_B18474.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.11 – Managing a step in a Zap in the Classic Editor
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: In the **Visual Editor**, the **Outline** section does not exist in the left-side
    panel, therefore, all actions would be performed by clicking on the three-dots
    drop-down menu in the step. You will also notice that the **Reorder** option is
    also not available in the drop-down menu as you can drag and drop steps within
    the main editor section.
  prefs: []
  type: TYPE_NORMAL
- en: 'Steps can also be managed by selecting the three-dots icon next to the step
    to reveal a dropdown and searching for them by entering a search variable into
    the search bar using the **Outline** section in the right-side panel. You can
    also add a step below a step from the drop-down menu. This is shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.12 – Managing steps from the Outline section in the Zap editor](img/Figure_6.12_B18474.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.12 – Managing steps from the Outline section in the Zap editor
  prefs: []
  type: TYPE_NORMAL
- en: Let’s look at renaming, duplicating, adding, copying, pasting, deleting, and
    reordering steps in turn.
  prefs: []
  type: TYPE_NORMAL
- en: Renaming a step
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In [*Chapter 4*](B18474_04.xhtml#_idTextAnchor520), *Managing Your Zaps*, we
    explored how to name your Zaps adequately. The same logic can be applied to steps
    in your Zaps. As Zapier will automatically name the step based on the app and
    the trigger or action event involved, it’s useful to be able to change the name
    to make it more descriptive. This is especially important if you’re working with
    a team, to give more context to the purpose of the step, and if you have many
    steps in your Zap as you will be able to use keywords to search for steps in the
    **Outline** section rather than scrolling through your entire Zap.
  prefs: []
  type: TYPE_NORMAL
- en: Clicking on the **Rename** option in the step or from the **Outline** section
    will allow you to change the text in the step’s name. Once you have edited the
    text, simply click anywhere outside of the text box to save your changes.
  prefs: []
  type: TYPE_NORMAL
- en: Duplicating a step
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When you’re building multi-step Zaps that have repetitive steps, it is useful
    to be able to make a copy of a step. These copies might be identical to the original
    or you might only need to make some minor adjustments. For example, you might
    need to build a Zap that has multiple steps that happen in a sequence, such as
    a 7-day sales cadence of activities, where it is useful to be able to duplicate
    steps. This example is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.13 – A Zap that created a 7-day sales cadence of activities](img/Figure_6.13_B18474.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.13 – A Zap that created a 7-day sales cadence of activities
  prefs: []
  type: TYPE_NORMAL
- en: Clicking on the `Copy:` and will be followed by the name of the original step.
    You must proceed by checking the step and remapping the fields accordingly.
  prefs: []
  type: TYPE_NORMAL
- en: Adding steps
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can add steps as a routine by clicking on the **+** button between steps.
    You can also add steps below the step you select by clicking on the **Add step
    below** option from within the **Outline** section.
  prefs: []
  type: TYPE_NORMAL
- en: Copying and pasting steps
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The **Duplicate** option will make a copy of a step directly below it. You
    could, however, choose to make a copy of a specific step and easily paste that
    copy above or below another step. You can do this by clicking on the **Copy**
    option in a step or from the **Outline** section. A copy of the step will be added
    to your clipboard, a notification will be shown at the top of the Zap editor that
    will dismiss after a few seconds, and a popup will appear in the bottom-left corner
    of the Zap editor. You can click on the **X** button to hide the popup. This is
    shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.14 – Copying and pasting steps](img/Figure_6.14_B18474.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.14 – Copying and pasting steps
  prefs: []
  type: TYPE_NORMAL
- en: You can’t use your clipboard to view the data and it only contains one Zap copy
    at any time, which can be overwritten by using the **Copy** option again. Then,
    in any step in the **Outline** section (in the **Classic Editor**), you can choose
    to either select the **Paste below** option to paste the copied step below a selected
    step, or the **Paste to replace** option to completely replace a step. You must
    then check the step and remap the fields accordingly. This is a time-saving feature
    that allows you to cut out a few clicks in the process.
  prefs: []
  type: TYPE_NORMAL
- en: Deleting a step
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There might also be occasions when you no longer need a step in your workflow
    and you need to delete it. Clicking on the **Delete** option in the step or from
    the **Outline** section will allow you to remove the step entirely from your Zap.
    A prompt will appear saying **Really delete?**, asking you to confirm that you
    want to delete the step as it will not be recoverable. This is shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.15 – A prompt to confirm whether you want to delete a step](img/Figure_6.15_B18474.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.15 – A prompt to confirm whether you want to delete a step
  prefs: []
  type: TYPE_NORMAL
- en: Reordering a step
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Sometimes, you might realize that your step is in the wrong place in your Zap
    and you want to move it. In the **Classic Editor**, clicking on the **Reorder**
    option in the step will open the **Outline** section, where you can drag and drop
    your step to another place in the Zap. This is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: "![Figure 6.16 – \uFEFFOverview of reordering a step in the Outline section\
    \ in the Classic Editor](img/Figure_6.16_B18474.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 6.16 – Overview of reordering a step in the Outline section in the Classic
    Editor
  prefs: []
  type: TYPE_NORMAL
- en: 'If the step uses data from previous steps and you move the step to before those
    steps that the data comes from, the data will no longer be available to use. You
    will be presented with a warning in the form of a popup. You can choose to cancel
    the action by clicking on the **Cancel** button or proceed by clicking on the
    **Move step** button. You must then proceed to check the step and remap the fields
    accordingly. This is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: "![Figure 6.17 – \uFEFFOverview of a warning when reordering a step](img/Figure_6.17_B18474.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 6.17 – Overview of a warning when reordering a step
  prefs: []
  type: TYPE_NORMAL
- en: Reordering of steps is easily performed in the main editor section by simply
    dragging and dropping the step when using the **Visual Editor**.
  prefs: []
  type: TYPE_NORMAL
- en: Reordering a step works especially well once you have duplicated a step because
    you can then move the copy to another part of the Zap.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: Copying and pasting, duplicating, and reordering steps are new features that
    Zapier recently released that will save you a lot of time when you’re making adjustments
    to your workflows. Before this feature was released, you would have to rebuild
    steps if you made a mistake in positioning the step or if you needed to create
    a copy of that step further along in the Zap. You can use this functionality to
    build multi-step Zaps faster.
  prefs: []
  type: TYPE_NORMAL
- en: You should now have a better understanding of how to manage your steps by renaming,
    deleting, duplicating, and reordering them in your Zaps. Now, let’s take multi-step
    Zap building even further and explore all the built-in apps Zapier has created
    to make workflow automation all-encompassing on the Zapier platform.
  prefs: []
  type: TYPE_NORMAL
- en: Introducing apps by Zapier
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The basics of creating multi-step Zaps lie in knowing how to use triggers, actions,
    and searches adequately. Once you have got to grips with this, you may want to
    take advantage of the functionality of the many built-in apps that Zapier has
    created to allow you to perform common tasks without having to use another app
    and pay additional subscription fees. Zapier has created several built-in apps
    to help you supercharge your workflows.
  prefs: []
  type: TYPE_NORMAL
- en: 'We’ve categorized these apps as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Apps that control run conditions and logic
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Communication apps
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Apps for extracting and compiling data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Other useful apps
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Advanced apps
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Apps for managing your Zapier account
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Newly released apps in the alpha and beta testing phases
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The powerful Formatter by Zapier app
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Apps with AI functionality
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: Zapier releases new features and built-in apps regularly. In this book, we will
    cover the built-in apps that have been released with the triggers, actions, and
    search actions available at the time of publishing.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can get access to a handy quick-reference cheatsheet to all of the Zapier
    built-in apps here: [https://bit.ly/zapier-book](https://bit.ly/zapier-book).'
  prefs: []
  type: TYPE_NORMAL
- en: Now, let’s briefly review the apps in each of these categories.
  prefs: []
  type: TYPE_NORMAL
- en: Setting run conditions and using logic with apps by Zapier
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You may want to customize your automations by controlling when your workflows
    will continue to run. You can do this by adding logic to stop a Zap from running
    unless the data satisfies certain criteria or by adding timed delays and scheduling
    your Zaps to run at specific intervals. Zapier has created the following built-in
    apps, all of which are commonly used for setting run conditions and using logic:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Filter by Zapier**: Filter by Zapier allows you to add conditional logic
    steps to your Zaps, allowing the automation to continue only if certain criteria
    have been satisfied. For example, you may want to send an email when a new row
    has been added to your Google Sheets spreadsheet, but only if the data in a certain
    column exists.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Delay by Zapier**: By using Delay by Zapier, you can add time delays to subsequent
    action steps. You can set a delay to allow the rest of the Zap to run after a
    set period, such as 1 hour, at a certain time such as 2 P.M., or after a delay
    queue if there are multiple delays in the workflow. For example, you may want
    to send a tweet on Twitter 1 week after an image or video has been added to Instagram.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Schedule by Zapier**: You can use Schedule by Zapier as a trigger step to
    run a workflow at set times, such as every hour, every day at a certain time,
    every week on a certain day, or every month on a certain day. For example, you
    may want to add a set of tasks to your task management app (such as Asana) at
    the start of every week.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Paths by Zapier**: Paths by Zapier allows you to add branching logic to your
    Zaps. This means that you can allow different paths with different actions to
    run based on set criteria. For example, you may want to either send an email or
    a text message to a customer that has filled out a contact form on your website
    based on the contact preferences they provide.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We will cover all of these apps by Zapier in [*Chapter 7*](B18474_07.xhtml#_idTextAnchor905),
    *Getting Started with* *Built-In Apps*.
  prefs: []
  type: TYPE_NORMAL
- en: Now, let’s review the apps that Zapier has created that have communication functions.
  prefs: []
  type: TYPE_NORMAL
- en: Using apps by Zapier for communication
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Zapier has created several communication-specific built-in apps that allow
    you to trigger workflow automations and perform actions. These are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**SMS by Zapier**: Using SMS by Zapier, you can send a limited number of text
    messages to numbers that you can validate. In other words, permissions need to
    be granted to send messages to a number. Therefore, this is useful for sending
    notifications or reminders to yourself or teammates who would be able to verify
    the connection to Zapier but cannot be used to send messages to customers, for
    example.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`zapiermail.com` email address to use as a trigger or action step. You can
    then send outbound emails, and if you’ve enabled read receipts, you can trigger
    a workflow when someone opens your sent email. You can also trigger Zaps to run
    when you receive forwarded emails to your `zapiermail.com` address.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**SMTP by Zapier**: **Simple Mail Transfer Protocol** (**SMTP**) allows email
    client apps to send emails. If you are using a mail server other than Gmail, Zoho
    Mail, or Microsoft Office 365, SMTP by Zapier allows you to send emails via these
    mail servers.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**IMAP by Zapier**: **Internet Message Access Protocol** (**IMAP**) allows
    email client apps to retrieve emails from a server. If you are using a mail server
    other than Gmail, Zoho Mail, or Microsoft Office 365, you can use IMAP by Zapier
    to retrieve emails from these mail servers.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We will cover all of these apps by Zapier in [*Chapter 8*](B18474_08.xhtml#_idTextAnchor1050),
    *Built-In* *Communication Apps*.
  prefs: []
  type: TYPE_NORMAL
- en: Next, let’s explore some of the apps that Zapier has created for extracting
    and compiling data.
  prefs: []
  type: TYPE_NORMAL
- en: Extracting and compiling data with apps by Zapier
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Zapier has created a few built-in apps that allow you to extract data from
    emails, use RSS feeds in your automations, and create summaries of information.
    These are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`@robot.zapier.com` email address to which you can forward emails and enable
    data extraction from the email. For example, if you receive web form submission
    notifications by email you can use Email Parser by Zapier to extract data to be
    used in subsequent action steps.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**RSS by Zapier**: **Really Simple Syndication** (**RSS**) feeds update whenever
    a website publishes new content. The RSS by Zapier app allows you to use RSS feed
    updates as a trigger, which by then adding a notification action step such as
    an email, SMS, or Slack message will give you an update on new content. For example,
    you may want to receive updates on when your favorite business blog releases new
    articles. You can also create your own RSS feed with the app.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Digest by Zapier**: This built-in app allows you to capture data from multiple
    workflow trigger events and compile the data into single summaries that can be
    used in other action events. For example, send a weekly email with a summary of
    all sales invoices created over that week to your sales team. You can also search
    for existing digest data.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We will cover these apps by Zapier in more detail in [*Chapter 9*](B18474_09.xhtml#_idTextAnchor1152),
    *Exploring Built-In Apps for Extracting and* *Compiling Data*.
  prefs: []
  type: TYPE_NORMAL
- en: Now let’s take a quick look at some of the other useful apps that Zapier has
    created and their associated functions.
  prefs: []
  type: TYPE_NORMAL
- en: Other useful apps by Zapier
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There are several other built-in apps that Zapier has created that perform
    a variety of useful functions. These are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Zapier Chrome extension**: The Zapier Chrome extension, previously called
    Push by Zapier, uses a Google Chrome extension to trigger one-off automations
    from anywhere on the web manually. For example, you may want to create a new Trello
    card to review content in an article that you came across while browsing the internet.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**URL Shortener by Zapier**: If you want to make long **Uniform Resource Locator**
    (**URL**) strings shorter and easier on the eye, you can use URL Shortener by
    Zapier. This is especially useful if you have text length restrictions, for example,
    if you want to send an SMS or post a tweet to Twitter. This is similar to tools
    such as Bitly.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Translate by Zapier**: Translate by Zapier allows you to translate words,
    phrases, and web pages into over 100 languages, and it can be used to detect a
    language in text.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Lead Score by Zapier**: This app allows you to gather information from the
    web about a contact using their email address and can also be used to give them
    a qualification score. For example, if a new lead submits a web form, you may
    want to find out more details about the contact’s company, company size, and location.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Weather by Zapier**: Weather by Zapier gives you access to weather conditions
    in your area. You can use it to get daily weather notifications and only to trigger
    if it will rain that day (for your local area based on your Zapier timezone settings).
    You can also search for current weather conditions and tomorrow’s forecast for
    a specified location.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Retrograde by Zapier**: You can use Retrograde by Zapier to trigger your
    workflows based on Mercury retrograde astrological predictions. You can choose
    from trigger events of Mercury entering or leaving retrograde or trigger events
    once a day when Mercury is in retrograde.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We will cover all of these apps by Zapier in more detail in [*Chapter 10*](B18474_10.xhtml#_idTextAnchor1280),
    *Other Useful Built-In Apps* *by Zapier*.
  prefs: []
  type: TYPE_NORMAL
- en: Now, let’s take a look at the apps that Zapier has created that have more advanced
    functionality.
  prefs: []
  type: TYPE_NORMAL
- en: Advanced apps by Zapier
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As you become more familiar with using apps by Zapier, you may want to experiment
    with a few more built-in apps that Zapier with slightly more advanced features.
    These are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`GET`, `POST`, `PUT`, or custom HTTP requests.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Code by Zapier**: If you are familiar with **JavaScript** or **Python**,
    you can use Code by Zapier in your workflow automations. You can write code in
    JavaScript or Python to use in triggers or actions to manipulate data.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Storage by Zapier**: Storage by Zapier allows you to save and retrieve small
    data values. This allows you to store reference data each time a Zap runs and
    then share it with other Zaps by retrieving it. For example, let’s say you want
    to keep a running tally of how many new subscribers have been added to your email
    marketing app and then use this tally so that it’s displayed in a dashboard reporting
    tool such as **Databox**.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We will cover all of these apps by Zapier in [*Chapter 11*](B18474_11.xhtml#_idTextAnchor1426),
    *Advanced Built-In Apps by Zapier*. We will also explore features such as the
    **API Requests** and **App Extension** action steps.
  prefs: []
  type: TYPE_NORMAL
- en: Now, let’s take a look at the apps you can use for managing your Zapier account.
  prefs: []
  type: TYPE_NORMAL
- en: Managing your Zapier account with apps by Zapier
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you’re in charge of systems administration, then you will want to know how
    to use these apps. They allow you to build automations that help you monitor issues
    with your Zapier account, such as errors and task usage. These are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Zapier Manager**: We introduced the Zapier Manager app in [*Chapter 5*](B18474_05.xhtml#_idTextAnchor635),
    *Troubleshooting and Handling Zap Errors*, where we discussed how to use it to
    manage error alerts such as errors with Zaps, Zaps being turned off, or tasks
    being halted. You can also use Zapier Manager to notify you of new public apps
    being added to Zapier, changes to your account such as new folders or Zaps being
    created, task usage limits being reached, or new Zapier invoices being released.
    You can search for a Zap or public app, as well as turn Zaps on or off. If you
    are using a Team account, you can use Zapier Manager to invite a new user to your
    Zapier team or notify you of new team members being added.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**App Status by Zapier**: We introduced the App Status by Zapier app in [*Chapter
    5*](B18474_05.xhtml#_idTextAnchor635), *Troubleshooting and Handling Zap Errors*,
    where we discussed how to use it to get notifications of new, updated, and resolved
    incidents with public apps.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We will cover all of these apps by Zapier in [*Chapter 12*](B18474_12.xhtml#_idTextAnchor1468),
    *Managing Your Zapier Account with* *Built-In Apps*.
  prefs: []
  type: TYPE_NORMAL
- en: Next, let’s explore new built-in app releases.
  prefs: []
  type: TYPE_NORMAL
- en: Newly released apps in the alpha and beta testing phases
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Zapier is constantly improving functionality and releasing new features. The
    following apps have been released since the first edition of this book was published:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Looping by Zapier**: You can repeat actions in your Zaps several times through
    a loop for specified sets of values. This is useful when you have multiple values
    that need to run through a workflow individually.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Sub-Zap by Zapier**: You can create reusable Zap components and systems by
    building and calling them “Sub-Zaps.” This is helpful when you want to run a workflow
    separate from your main Zap and connect multiple Zaps.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Transfer**: You can transfer data between two apps in bulk, either on-demand
    or by scheduling a transfer.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Tables**: You can store data in tables hosted on the Zapier platform without
    the need for using additional spreadsheet or database apps.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Interfaces**: You can create pages that you can connect to your Zaps, such
    as forms, text pages, tables, kanbans, chatbots, and link cards that are hosted
    on the Zapier platform.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We will cover all of these apps by Zapier in [*Chapter 13*](B18474_13.xhtml#_idTextAnchor1560),
    *Newly Released Apps* *and Features*.
  prefs: []
  type: TYPE_NORMAL
- en: Now, let’s provide an overview of the versatile Formatter by Zapier app.
  prefs: []
  type: TYPE_NORMAL
- en: The powerful Formatter by Zapier app
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The **Formatter by Zapier** app is by far the most versatile built-in app by
    Zapier. Its functionality is so extensive that we will cover this app in five
    chapters. Using the Formatter by Zapier app allows you to format the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Dates and times**: You can convert date/time values into different formats
    (including time zones) and add/subtract time. We will cover date and time formatting
    using the Formatter by Zapier app in [*Chapter 14*](B18474_14.xhtml#_idTextAnchor1580),
    *Formatting Date* *and Time.*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Numbers**: You can manipulate numbers, phone numbers, and currencies and
    use spreadsheet-type formulas and math operations. We will cover number formatting
    using the Formatter by Zapier app in [*Chapter 15*](B18474_15.xhtml#_idTextAnchor1653)*,*
    *Formatting Numbers*.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Text**: You can extensively format text using this function. There are so
    many things you can do that we will cover the functionality in two chapters. In
    [*Chapter 16*](B18474_16.xhtml#_idTextAnchor1761), *Text Formatting Functions
    in Zapier – Part 1*, we will explore adjusting title case, uppercase, and lowercase,
    finding and replacing text, trimming whitespace, counting words and adjusting
    length, and pluralizing text. In [*Chapter 17*](B18474_17.xhtml#_idTextAnchor1922),
    *Text Formatting Functions in Zapier – Part 2*, we will discuss text splitting,
    truncating text, extracting patterns, URLs, phone numbers, numbers, and email
    addresses, removing HTML tags, and creating a superhero name (a fun one). We will
    also provide an overview of advanced features such as how to convert Markdown
    into HTML and ASCII and use Default Value and URL Encode/Decode.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`.csv` files. We’ll cover the Utilities functions in the Formatter by Zapier
    app in [*Chapter 18*](B18474_18.xhtml#_idTextAnchor2073), *Zapier’s* *Utilities
    Functions*.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now, let’s discuss the built-in apps that have **Artificial Intelligence** (**AI**)
    functionality.
  prefs: []
  type: TYPE_NORMAL
- en: Apps with AI functionality
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Integrating AI functionality into their software applications has become a priority
    for many SaaS companies. Zapier is no different. With the release of ChatGPT to
    the wider market and the possibility to integrate and incorporate AI functionality,
    Zapier is in the process of releasing many AI-integrated features. Some of these
    features are **AI-powered troubleshooting**, **AI Chatbots**, **Create a Zap**,
    and running **AI Actions** with the Zapier Chrome extension and the **ChatGPT
    plugin**. We will cover all of these features and more briefly in [*Chapter 19*](B18474_19.xhtml#_idTextAnchor2216),
    *AI and Automation*. AI features are all currently in beta. We will also explore
    some AI app integrations with Zapier, such as the **ChatGPT** and **OpenAI** integrations.
  prefs: []
  type: TYPE_NORMAL
- en: You should now have a better understanding of what built-in apps are available
    on the Zapier platform.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we boosted your knowledge of how to use Zapier by introducing
    the benefits of building multi-step Zaps. We covered how to use search functionality
    in action steps, how to delete, duplicate, reorder, and rename steps in Zaps,
    and encouraged you to test your knowledge by creating a multi-step workflow for
    one of your processes. Lastly, we introduced all of the built-in apps that Zapier
    has created to allow you to store, display, and transform data all from within
    the Zapier platform.
  prefs: []
  type: TYPE_NORMAL
- en: You now know how to create workflow automations with multiple action and search
    steps. You also now have a better understanding of all the built-in apps created
    by Zapier.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will introduce you to some of Zapier’s built-in apps.
    We will cover the specific functions of using conditional logic in your workflows
    with Filter by Zapier and see how to add pathways with Paths by Zapier. We will
    also review how to use Delay by Zapier and Schedule by Zapier to apply time delays
    and schedule runtimes for your Zaps.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: How many action steps can you add to a Zap?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When is it useful to be able to reorder steps in your Zaps?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Which two built-in apps can be used when you want to add conditional logic to
    your Zaps?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Which built-in app allows you to format text, dates/times, and numbers?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
