["```py\nEpoch [1/10], Loss: 0.9136Epoch [2/10], Loss: 0.6925\nEpoch [3/10], Loss: 0.7313\nEpoch [4/10], Loss: 0.6681\nEpoch [5/10], Loss: 0.3191\nEpoch [6/10], Loss: 0.5790\nEpoch [7/10], Loss: 0.4824\nEpoch [8/10], Loss: 0.6229\nEpoch [9/10], Loss: 0.7279\nEpoch [10/10], Loss: 0.3292\nTraining time: 148 seconds\nAccuracy of the network on the 10000 test images: 83.99 %\n```", "```py\nEpoch [1/10], Loss: 1.0960Epoch [2/10], Loss: 0.6656\nEpoch [3/10], Loss: 0.6444\nEpoch [4/10], Loss: 0.6463\nEpoch [5/10], Loss: 0.4772\nEpoch [6/10], Loss: 0.5548\nEpoch [7/10], Loss: 0.4800\nEpoch [8/10], Loss: 0.4190\nEpoch [9/10], Loss: 0.4885\nEpoch [10/10], Loss: 0.4708\nTraining time: 125 seconds\nAccuracy of the network on the 10000 test images: 83.76 %\n```", "```py\ndef __init__(self, num_classes=10):    super(CNN, self).__init__()\n    self.layer1 = nn.Sequential(\n        nn.Conv2d\n            (1, 32, kernel_size=3, stride=1,padding=1, bias=False),\n        nn.ReLU(),\n        nn.MaxPool2d(kernel_size = 2, stride = 2))\n    self.layer2 = nn.Sequential(\n        nn.Conv2d\n            (32, 64, kernel_size=3,stride=1,padding=1, bias=False),\n        nn.ReLU(),\n        nn.MaxPool2d(kernel_size = 2, stride = 2))\n    self.fc1 = nn.Linear(64*7*7, 512, bias=False)\n    self.fc2 = nn.Linear(512, num_classes, bias=False)\n```", "```py\nEpoch [1/10], Loss: 1.1859Epoch [2/10], Loss: 0.7575\nEpoch [3/10], Loss: 0.6956\nEpoch [4/10], Loss: 0.6296\nEpoch [5/10], Loss: 0.6997\nEpoch [6/10], Loss: 0.5369\nEpoch [7/10], Loss: 0.5247\nEpoch [8/10], Loss: 0.5866\nEpoch [9/10], Loss: 0.4931\nEpoch [10/10], Loss: 0.4058\nTraining time: 96 seconds\nAccuracy of the network on the 10000 test images: 82.14 %\n```", "```py\nEpoch [1/10], Loss: 1.5919Epoch [2/10], Loss: 0.9232\nEpoch [3/10], Loss: 0.8151\nEpoch [4/10], Loss: 0.6488\nEpoch [5/10], Loss: 0.7208\nEpoch [6/10], Loss: 0.5085\nEpoch [7/10], Loss: 0.5984\nEpoch [8/10], Loss: 0.5603\nEpoch [9/10], Loss: 0.6575\nEpoch [10/10], Loss: 0.4694\nTraining time: 76 seconds\nAccuracy of the network on the 10000 test images: 80.01 %\n```", "```py\nEpoch [1/10], Loss: 0.6036Epoch [2/10], Loss: 0.3941\nEpoch [3/10], Loss: 0.4808\nEpoch [4/10], Loss: 0.5834\nEpoch [5/10], Loss: 0.6347\nEpoch [6/10], Loss: 0.3218\nEpoch [7/10], Loss: 0.4646\nEpoch [8/10], Loss: 0.4960\nEpoch [9/10], Loss: 0.3683\nEpoch [10/10], Loss: 0.6173\nTraining time: 106 seconds\nAccuracy of the network on the 10000 test images: 83.25 %\n```", "```py\nimport osos.environ['OMP_NUM_THREADS'] = \"16\"\nos.environ['KMP_AFFINITY'] = \"granularity=fine,compact,1,0\"\nos.environ['KMP_BLOCKTIME'] = \"0\"\n```"]