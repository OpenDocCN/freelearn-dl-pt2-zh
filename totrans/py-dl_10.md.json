["```py\nmodel.download_pojo(path)\n```", "```py\npublic class AutoEncoderModelPrediction extends AbstractPrediction {\n  public double[] predictions;\n  public double[] feature;\n  public double[] reconstrunctionError;\n  public double averageReconstructionError;\n}\n```", "```py\npublic AutoEncoderModelPrediction predictAutoEncoder(RowData data) throws PredictException { double[] preds = preamble(ModelCategory.AutoEncoder, data);\n  // save predictions\n  AutoEncoderModelPrediction p = new AutoEncoderModelPrediction();\n  p.predictions = preds;\n  // save raw data\n  double[] rawData = new double[m.nfeatures()];\n  setToNaN(rawData);\n  fillRawData(data, rawData);\n  p.feature = rawData;\n  //calculate and reconstruction error\n  double[] reconstrunctionError = new double [rawData.length];\n  for (int i = 0; i < reconstrunctionError.length; i++) {\n  reconstrunctionError[i] = Math.pow(rawData[i] - preds[i],2); } p.reconstrunctionError = reconstrunctionError;\n  //calculate mean squared error\n  double sum = 0; for (int i = 0; i < reconstrunctionError.length; i++) {\n    sum = sum + reconstrunctionError[i];\n  } p.averageReconstructionError = sum/reconstrunctionError.length;\n  return p;\n }\n```", "```py\nimport java.io.*;\nimport hex.genmodel.easy.RowData;\nimport hex.genmodel.easy.EasyPredictModelWrapper;\nimport hex.genmodel.easy.prediction.*;\n\npublic class main {\n  public static String modelClassName = \"autoencoder_pojo_test\";\n\n  public static void main(String[] args) throws Exception {\n    hex.genmodel.GenModel rawModel;\n    rawModel = (hex.genmodel.GenModel) Class.forName(modelClassName).newInstance();\n    EasyPredictModelWrapper model = new EasyPredictModelWrapper(rawModel);\n\n    RowData row = new RowData();\n    row.put(\"Feature1\", \"value1\");\n    row.put(\"Feature2\", \"value2\");\n    row.put(\"Feature3\", \"value3\");\n\n    AutoEncoderModelPrediction p = model.predictAutoEncoder(row);\n    System.out.println(\"Reconstruction error is: \" + p.averageReconstructionError);\n  }\n}\n```", "```py\nwith H2OConnection.open(url='http://hostname:54321') as hc:\n hc.info().pprint()\n```", "```py\nhc.request(endpoint='GET /3/Frames')\n```", "```py\n    POST /3/ImportFiles HTTP/1.1\n    Content-Type: application/json\n    { \"path\" : \"http://s3.amazonaws.com/my-data.csv\" }\n    ```", "```py\n    POST /3/ParseSetup HTTP/1.1\n    Content-Type: application/json\n    { \"source_frames\" : \"http://s3.amazonaws.com/my-data.csv\" }\n    ```", "```py\n    POST /3/Parse HTTP/1.1\n    Content-Type: application/json\n    { \"destination_frame\" : \"my-data.hex\" , source_frames : [ \"http://s3.amazonaws.com/my-data.csv\" ] , parse_type : \"CSV\" , \"number_of_columns\" : \"3\" , \"columns_types\" : [ \"Numeric\", \"Numeric\", \"Numeric\" ] , \"delete_on_done\" : \"true\" }\n    ```", "```py\n    GET /3/Jobs/$job_name HTTP/1.1\n    ```", "```py\n    POST /3/Predictions/models/$model_name/frames/$frame_name HTTP/1.1\n    Content-Type: application/json\n    { \"predictions_frame\" : \"$prediction_name\" , \"reconstruction_error\" : \"true\" , \"reconstruction_error_per_feature\" : \"false\" , \"deep_features_hidden_layer\" : 2 }\n    ```", "```py\n    DELETE /3/Frames/$frame_name\n\n    DELETE /3/Frames/$prediction_name\n    ```"]