- en: '18'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Zapier’s Utilities Functions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far, we have discussed using the Formatter by Zapier built-in app to perform
    a variety of actions to transform dates and times, numbers, and text. There are
    a few other helpful transform functions we have not yet explored, and these are
    categorized under the **Utilities** action event. In this chapter, we’ll conclude
    our exploration of the features of the Formatter by Zapier built-in app by covering
    the functionality of the **Utilities** action event.
  prefs: []
  type: TYPE_NORMAL
- en: First, we will provide an overview of the Formatter by Zapier **Utilities**
    action event and the transform functions available. Then, we will cover how to
    import data from CSV files and use them in our Zaps, how to use lookup tables
    to store and help us find related data, and how to pick data from a list of values
    based on its position in the list. Finally, we will introduce line items and explore
    the various transform functions related to using line items in your automations.
    This will include converting text into line items and vice versa, as well as line-item
    creation and customization.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will cover the following key topics in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Introducing the Formatter by Zapier **Utilities** action event
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Importing data from CSV files
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using lookup tables for related data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Picking data from a list
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Manipulating line items
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Once you have worked through each of these topics, you will have a better understanding
    of the different **Utilities** transform functions that you can use with the Formatter
    by Zapier built-in app. You will know how to use Zapier to import data from CSV
    files, use lookup tables, pick data from a list, and work with line items.
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To make the most of the content in this chapter, you will need access to a Zapier
    account. The Zapier Starter plan will be required for you to create multi-step
    workflows using the Formatter by Zapier built-in app.
  prefs: []
  type: TYPE_NORMAL
- en: Introducing the Formatter by Zapier Utilities action event
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we have discovered so far, Formatter by Zapier can easily be used to transform
    a wide range of values from one format into another. We have explored how to manipulate
    dates and times, numbers, and text into different formats. You might want to upload
    data from CSV files to use in your automations, find related data such as user
    IDs linked to a user’s email address, select a value in a specific position in
    a list such as the first or last, or you might need to manipulate data in the
    form of line items, which are commonly used in invoicing and e-commerce apps.
    To account for these requirements, Zapier has created a grouping of these functions
    in the Formatter by Zapier built-in app, which is available by using the **Utilities**
    action event.
  prefs: []
  type: TYPE_NORMAL
- en: 'When using this action event, you can use the following **Utilities** transform
    options. These can be found within the **Action** section of your action step,
    listed in the **Transform** drop-down menu:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Import** **CSV File**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Line** **Itemizer (Create/Append/Prepend)**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Line-item** **to Text**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Lookup Table**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Pick** **from List**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Text** **to Line-Item**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We will review each of these functions in turn.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: You can use the magic AI to ask Zapier to format data in your Zap steps, which
    will then create Formatter by Zapier steps with the relevant transform options.
    We will discuss this is [*Chapter 19*](B18474_19.xhtml#_idTextAnchor2216), *AI*
    *and Automation*.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s start by exploring how to import CSV files using the **Import CSV File**
    transform option.
  prefs: []
  type: TYPE_NORMAL
- en: Importing data from CSV files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Wouldn’t it be handy to be able to automatically extract data from spreadsheet
    files so that you could use it in your Zaps? Well, Zapier allows you to do this.
    For example, you might receive a summary of the day’s transactions in a CSV file
    by email, and you want to pull this data straight into your accounting software.
    Zapier can help you extract data from a CSV file and present it in a string of
    text and as line items by using the Formatter by Zapier **Utilities** action event
    with the **Import CSV File** transform function.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are a few examples of when you can use this transform option:'
  prefs: []
  type: TYPE_NORMAL
- en: You might use an Excel spreadsheet to record details of sales and associated
    lead-to-sales conversion times. A CSV copy of this is forwarded to you by email
    every day at 5 P.M. from your CRM; normally, you would have to extract the data
    you want and manually share it with your team. You could extract that data from
    that CSV using the **Import CSV File** transform function and forward the most
    important parts of the day’s data to your Slack channel for your sales team to
    see.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You might have access to a report file (via a publicly accessible URL) that
    allows you to download the data in the form of a CSV. The report file provides
    you with information about your daily sales transactions from your till system.
    The file clears all data and refreshes at midnight. Using the **Import CSV File**
    transform function, you could extract the data in the CSV and automatically create
    invoices in your accounting system daily (with a Schedule by Zapier trigger).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In [*Chapter 3*](B18474_03.xhtml#_idTextAnchor374), *Building Your First Automated
    Workflow (Zap)*, we introduced and discussed file field types. The principles
    aligned with these field types and what is accepted by them apply to the `.``txt`
    file.
  prefs: []
  type: TYPE_NORMAL
- en: Next, let’s review how to set up an action step with the **Import CSV File**
    transform option.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up the Utilities action event with the Import CSV File transform option
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To illustrate how to use each of the **Import CSV File** transform functions,
    we will use the example of receiving a CSV file by email with sales for the day.
    The following screenshot shows an example of a CSV file that contains data:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 18.1 – Data in a CSV file that will be used to illustrate using the
    Import CSV File transform function](img/B18474_18_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 18.1 – Data in a CSV file that will be used to illustrate using the Import
    CSV File transform function
  prefs: []
  type: TYPE_NORMAL
- en: You can use the **Utilities** action event once you have set up your trigger
    step.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you have added an action step, either by selecting the **Action** step
    or clicking on the **+** icon, and have chosen **Formatter by Zapier** as the
    app and **Utilities** as the action event, you can edit the fields in the **Action**
    section, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Transform**: From the drop-down menu, select the **Import CSV File** option.
    This is a required field and must have a value for the Zap to run.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**CSV File**: You can use this field to map the CSV file you want to extract
    data from. This is a **File** field type and will require a URL or an actual file
    object from a previous step to be mapped to this field. You can enter a dynamic
    value from previous steps to specify the file to use. In our example, we will
    use the attachment value from our email trigger step. This is a required field
    and must have a value for the Zap to run.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Force First Row As Header Row**: You can use this drop-down Boolean field
    to select either **Yes** or **No** as to whether you want to force the formatter
    to recognize the first row as a header row. By default, it will try to determine
    whether a header row exists. When testing, if it has not detected the header row,
    you can force it by selecting the **Yes** option.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Type Of CSV File**: You can use this drop-down field to select the type of
    CSV file. The options are **Detect Automatically**, **Comma Delimited**, **Semicolon
    Delimited**, **Excel Comma Delimited**, **Excel Tab Delimited**, **One Column**,
    and **Text File (no csv parsing)**. By default, the Formatter will attempt to
    detect the type of file. When testing, if it has not detected the file type, you
    can force it to by selecting the appropriate file option. You can also map this
    field with dynamic data from a previous step where the type is file is known.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Encoding of CSV file**: You can use this drop-down field to select the type
    of encoding. The options are **UTF-8**, **Latin-1**, and **UTF-16**. By default,
    the Formatter will assume that the file is UTF-8 encoded. If you find that you
    get an error when testing the action step, you can specify the encoding type by
    selecting the relevant option. You can use the **Custom** option to add other
    encoding options. Supported options can be found using this reference: [https://docs.python.org/3/library/codecs.html#standard-encodings](https://docs.python.org/3/library/codecs.html#standard-encodings).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Data imports are limited to around 150 KB, which is the equivalent of approximately
    1,000 rows, which might cause some limitations for some users.
  prefs: []
  type: TYPE_NORMAL
- en: 'An example is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: "![Figure 18.2 – \uFEFFOverview of using the Formatter by Zapier Utilities action\
    \ event to import data from a CSV file](img/B18474_18_02.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 18.2 – Overview of using the Formatter by Zapier Utilities action event
    to import data from a CSV file
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on the **Continue** button. You can then use the **Test** section to
    test this step to extract the data from the CSV file. The result from the scenario
    in *Figure 18**.2* is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: "![Figure 18.3 – \uFEFFOverview of the extracted data when using the Utilities\
    \ action event to import a CSV file](img/B18474_18_03.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 18.3 – Overview of the extracted data when using the Utilities action
    event to import a CSV file
  prefs: []
  type: TYPE_NORMAL
- en: Proceed to add one or more action steps after your `csv_text` output or the
    line items presented in the `line_items` output (specifically for apps that support
    line items) or both. We will discuss line items in more detail in the *Manipulating
    line* *items* section.
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: When testing your action step, bear in mind that you will only see a limited
    number of rows (normally 50) of your CSV file. However, when your Zap runs in
    real time, all the data in the file will be processed.
  prefs: []
  type: TYPE_NORMAL
- en: You should now have a better understanding of how to import CSV files using
    the **Import CSV File** transform function.
  prefs: []
  type: TYPE_NORMAL
- en: Next, let’s explore how to use lookup tables to store and help us find related
    data using the **Lookup Table** transform function.
  prefs: []
  type: TYPE_NORMAL
- en: Using lookup tables for related data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The more you work with Zapier to connect your apps and automate your processes,
    the more you will find that commonly used key values in your various apps are
    represented differently. For example, if you sell online courses, passing data
    between your shopping cart, `VLOOKUP` function. Bear in mind that the main difference
    to consider is that in Microsoft Excel, this function is case-insensitive, whereas
    in Zapier, it is case-sensitive.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are a couple of examples of when you can use this transform option:'
  prefs: []
  type: TYPE_NORMAL
- en: Let’s say that when a deal or opportunity hits a certain stage in your pipeline
    in your CRM, you want to assign a card to the deal owner in your task management
    app. In this case, your users have different identifiers in your CRM to your task
    management app. For example, your sales manager, John, might be identified by
    name as `John Smith` in Pipedrive and `J A Smith` in Trello. Users are also identified
    by unique IDs in most systems, so in this case, John has a user ID of `125869`
    in Pipedrive and a user ID of `51f8a8cd179ff019a67e95312` in Trello. We can assign
    John as the member to the card using his Trello user ID. Therefore, we can use
    a lookup table in the Formatter by Zapier **Utilities** action event to list all
    the Pipedrive usernames and the Trello user IDs of the users for who we might
    need this data. We would then use the username in Pipedrive as the search key
    to return the user ID for Trello.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You might use a scheduling and appointment booking app such as **Acuity Scheduling**
    and need to pass your sales data to your accounting app, QuickBooks Online. As
    the names and IDs of the products are different in the two systems, you can use
    a lookup table in the Formatter by Zapier **Utilities** action event to record
    the search data you need. You can record the **Acuity Scheduling** product name
    as the search key and the QuickBooks Online product ID as a value to be returned.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Next, let’s review how to set up an action step with the **Lookup Table** transform
    option.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up the Utilities action event with the Lookup Table transform option
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can use the **Utilities** action event once you have set up your trigger
    step.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you have added an action step, either by selecting the **Action** step
    or clicking on the **+** icon, and have chosen **Formatter by Zapier** as the
    app and **Utilities** as the action event, you can edit the fields in the **Action**
    section, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Transform**: From the drop-down menu, select the **Lookup Table** option.
    This is a required field and must have a value for the Zap to run.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Lookup Key**: You can use this field to map the search key value of the data
    you want to search for in the lookup table. You can either enter a static value,
    a dynamic value from previous steps, or a combination of both to specify this
    value. This field supports line items, which means that if dynamic data from a
    previous step is mapped to this field and the data is in the form of line-item
    arrays, the result of the lookup will produce multiple values, one for each of
    the line-item array keys. Although this is not a required field, the formatter
    function will not return a result if there is no value.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Lookup Table**: This table is comprised of two columns. In the left column,
    you can enter the data you want to use as the search reference. This is the data
    that Zapier will use to match against the search value in **Lookup Key** – for
    example, the username. This column only accepts static text being entered. It
    is also case-sensitive and will only return an exact match with the **Lookup Key**
    value. In the right column, you can enter the data that you want to be returned
    from the search – for example, the corresponding user ID. You can either enter
    a static value, a dynamic value from previous steps, or a combination of both
    to specify the value in this column.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fallback Value**: Here, you can enter a default value to use if the **Lookup
    Key** value does not match any of the search reference data in the left column.
    This is especially useful if the **Lookup Key** value is empty.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'An example is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: "![Figure 18.4 – \uFEFFOverview of using the Formatter by Zapier Utilities action\
    \ event to find related data in a lookup table](img/B18474_18_04.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 18.4 – Overview of using the Formatter by Zapier Utilities action event
    to find related data in a lookup table
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on the **Continue** button. You can then use the **Test** section to
    find reference data in a lookup table. The result from the scenario in *Figure
    18**.4* is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: "![Figure 18.5 – \uFEFFOverview of the matching data retrieved from the lookup\
    \ table when using the Utilities action event](img/B18474_18_05.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 18.5 – Overview of the matching data retrieved from the lookup table
    when using the Utilities action event
  prefs: []
  type: TYPE_NORMAL
- en: Proceed to add one or more action steps after your **Utilities** action step.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: Although there is only one field for **Lookup Key**, you can retrieve and find
    multiple values from **Lookup Table** if your search key is in line-item format.
    You can also have multiple steps using this function in one Zap. This is ideal
    if you need to use various search criteria to find related data.
  prefs: []
  type: TYPE_NORMAL
- en: You should now have a better understanding of how and when to use lookup tables
    using the **Lookup Table** transform function.
  prefs: []
  type: TYPE_NORMAL
- en: Next, let’s discuss how to pick data from a list of values using the **Pick
    from List** transform function.
  prefs: []
  type: TYPE_NORMAL
- en: Picking data from a list
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Have you ever wanted to run a quiz or assign a random result to your participants?
    Or perhaps you need to assign a support query to a member of your team based on
    a priority rating. You can easily do this by using the Formatter by Zapier **Utilities**
    action event with the **Pick from List** transform function to choose a value
    from a list based on its position.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are a couple of examples of when you can use this transform option:'
  prefs: []
  type: TYPE_NORMAL
- en: You might create a single-question, fun Q&A that you push out on social media
    to engage your audience and drive traffic to your website. You ask them to complete
    one question in Google Forms, such as “What is your birth month?” and then randomly
    assign them an “inner mythical beast” based on their answer. You can pick a random
    result from a list of “inner mythical beast” values, such as `Unicorn`, `Dragon`,
    `Pheonix`, `Kraken`, and `Pegasus`, then display the result on a page on your
    website.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You might have a list of team members that you assign help desk requests to.
    The team could be assigned the requests by you randomly picking their names from
    a list. Alternatively, you might want to assign the requests to specific users
    based on a priority rating. For example, Jim (the customer service assistant)
    is assigned level `0` requests, Jenny (the supervisor) is assigned level `1` requests,
    and June (the manager) is assigned all level `2` ratings. You can create a list
    with Jim, Jenny, and June, in that order to pick which person to route a request
    to.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let’s review how to set up an action step with the **Pick from List** transform
    option.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up the Utilities action event with the Pick from List transform option
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can use the **Utilities** action event once you have set up your trigger
    step.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you have added an action step, either by selecting the **Action** step
    or clicking on the **+** icon, and have chosen **Formatter by Zapier** as the
    app and **Utilities** as the action event, you can edit the fields in the **Action**
    section, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Transform**: From the drop-down menu, select the **Pick from List** option.
    This is a required field and must have a value for the Zap to run.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`0`, the second will be `1`, the third will be `2`, and so on. You can also
    use negative numbers to select from the end of the list, such as `-1` for the
    last, `-2` for the second last, and so on. This is a required field and must have
    a value for the Zap to run.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Input**: You can use this field to map in the values of the data that you
    want to return. As you enter a value in one field line, another will appear just
    below. Add the values in the order you want to set them. You can remove lines
    by clicking on the **X** button at the end of the line. You can either enter a
    static value, a dynamic value from previous steps, or a combination of both to
    specify this value. Although this is not a required field, the formatter function
    will not return a result if there is no value.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Default**: Here, you can enter a default value to use if the **Operation**
    value does not match any position in the **Input** section.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'An example is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: "![Figure 18.6 – \uFEFFOverview of using the Formatter by Zapier Utilities action\
    \ event to pick a value from a list](img/B18474_18_06.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 18.6 – Overview of using the Formatter by Zapier Utilities action event
    to pick a value from a list
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on the **Continue** button. You can then use the **Test** section to
    pick a value from a list. The result from the scenario in *Figure 18**.6* is shown
    in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: "![Figure 18.7 – \uFEFFOverview of the data returned when picking from a list](img/B18474_18_07.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 18.7 – Overview of the data returned when picking from a list
  prefs: []
  type: TYPE_NORMAL
- en: Proceed to add one or more action steps after your **Utilities** action step.
  prefs: []
  type: TYPE_NORMAL
- en: You should now have a better understanding of how and when to use the **Pick
    from List** transform function.
  prefs: []
  type: TYPE_NORMAL
- en: Next, let’s cover how to manipulate data in or convert data to line-item format.
  prefs: []
  type: TYPE_NORMAL
- en: Manipulating line items
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Line items** are blocks of data that have multiple items associated with
    them and are used in a special field within Zapier. They are essentially objects
    containing what is commonly known as an **array** of objects. The use of line-item
    data is very common in e-commerce, payment processing, and accounting apps, such
    as Shopify, PayPal, and Xero, where you often have multiple lines of data in an
    order or invoice, such as itemized lines on a paper receipt. For example, in one
    order, a customer might purchase an initial product, such as two medium T-shirts
    priced at $9.99 each, and a second product, such as one large T-shirt priced at
    $10.99\. They may also have paid for shipping at $7.50, and a coupon of $5.00
    off was applied to the entire order. The details for each individualized item
    consist of the product name, description, quantity, and price, and these details
    are normally shown as one line on an invoice. You can also think of each line
    as a row in a spreadsheet where the details are displayed in columns. Therefore,
    one invoice can consist of multiple lines with specific details related to that
    line.'
  prefs: []
  type: TYPE_NORMAL
- en: The content in this section might be most useful for users in bookkeeping or
    accounting roles that deal with financial transactions, as well as those in operations
    roles concerning shipping and logistics.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding line items
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When you map data into your fields in your action steps in your Zaps, you usually
    have one piece of text data, represented individually or as a string of text.
    Line items are complex in the sense that they often contain several bits of data
    clumped together, and having more than one line item complicates things further.
    As you can imagine, when data bunched into line items or multiple line items exists
    in one app that you want to transfer to another app, being able to use line-item
    automation is a huge time-saver so that you don’t need to enter all those details
    manually.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can quickly identify data that is presented as line items as an item with
    rows of data, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: "![Figure 18.8 – \uFEFFOverview of how line-item data is displayed in\uFEFF\
    \ rows](img/B18474_18_08.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 18.8 – Overview of how line-item data is displayed in rows
  prefs: []
  type: TYPE_NORMAL
- en: 'The data is also labeled with **Line Items**, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: "![Figure 18.9 – \uFEFFOverview of how line-item data is labeled](img/B18474_18_09.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 18.9 – Overview of how line-item data is labeled
  prefs: []
  type: TYPE_NORMAL
- en: 'There are a few apps that integrate with Zapier that offer **line-item support**.
    Here are a few examples:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Accounting apps**: QuickBooks Online, Xero'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**CRM** **apps**: Keap'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**E-commerce apps**: ShipStation, Shopify, WooCommerce'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Invoicing apps**: Harvest, Wave, Zoho Invoice'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Payment processing apps**: Chargify, PayPal'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Other apps**: Google Sheets'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Zapier built-in apps**: Formatter by Zapier'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Many of Zapier’s Formatter action events and transform functions support the
    use of line items so that you can manipulate multiple rows of text, numbers, dates,
    and times with line-item data in one action.
  prefs: []
  type: TYPE_NORMAL
- en: 'It is, of course, much simpler if the apps you are transferring data between
    all support line items, but as only a few apps do, there is often the need to
    manipulate data to either create line items or change line items back into text
    field data. Therefore, to use line items, both your trigger app and action app(s)
    must support their use. If one or the other doesn’t, you can use Formatter by
    Zapier with the **Utilities** action event to transform line-item data so that
    it’s compatible and can be used with apps that either require data in line-item
    format or support it. We can use the following transform functions:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Text** **to Line-item**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Line-item** **to Text**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Line** **Itemizer (Create/Append/Prepend)**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let’s review how to convert text into line items using the **Text to Line-item**
    transform function.
  prefs: []
  type: TYPE_NORMAL
- en: Converting text into line items
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: By using the Formatter by Zapier built-in app with the `Apple, Pear, Kiwi` or
    `Apple,` `Pear, Kiwi`.
  prefs: []
  type: TYPE_NORMAL
- en: You might want to perform this action when you have data in text format and
    want to create line items to use in other apps that support line-item usage. In
    the preceding example, the text would be transformed into `["Apple","Pear","Kiwi"]`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are a few examples of when you can use this transform option:'
  prefs: []
  type: TYPE_NORMAL
- en: Your CRM might have multiple product listings, quantities, and prices associated
    with your deals, and when a deal hits a certain stage in the pipeline, you might
    want to create an invoice in your accounting system. Your CRM doesn’t support
    line items, so the product information in the deal is presented as text. You can
    use the **Text to Line-item** transform function to change the text into line
    items so that you can generate invoices in your accounting system, QuickBooks
    Online.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You might take orders for special products using a web form embedded in your
    website. Once an order comes through, you want to convert each part of the order
    into line items so that you can create separate lines in a Google spreadsheet.
    You can use the **Text to Line-item** transform function to do that.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let’s discuss how to set up an action step with the **Text to Line-item** transform
    option.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up the Utilities action event with the Text to Line-item transform option
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can use the **Utilities** action event once you have set up your trigger
    step.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you have added an action step, either by selecting the **Action** step
    or clicking on the **+** icon, and have chosen **Formatter by Zapier** as the
    app and **Utilities** as the action event, you can edit the fields in the **Action**
    section, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Transform**: From the drop-down menu, select the **Text to Line-item** option.
    This is a required field and must have a value for the Zap to run.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Input**: You can use this field to map in the comma-separated text values
    that you want to convert into line items. You can either enter a static value,
    a dynamic value from previous steps, or a combination of both, to specify this
    value. Although this is not a required field, the formatter function will not
    return a result if there is no value.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'An example is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: "![Figure 18.10 – \uFEFFOverview of using the Formatter by Zapier Utilities\
    \ action event to change text into line items](img/B18474_18_10.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 18.10 – Overview of using the Formatter by Zapier Utilities action event
    to change text into line items
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on the **Continue** button. You can then use the **Test** section to
    transform comma-separated text into line-item arrays. The result from the scenario
    in *Figure 18**.10* is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: "![Figure 18.11 – \uFEFFOverview of the data returned when transforming text\
    \ into line items](img/B18474_18_11.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 18.11 – Overview of the data returned when transforming text into line
    items
  prefs: []
  type: TYPE_NORMAL
- en: The output shown in *Figure 18**.11* is displayed as one line item with three
    rows of data.
  prefs: []
  type: TYPE_NORMAL
- en: Proceed to add one or more action steps after your **Utilities** action step.
  prefs: []
  type: TYPE_NORMAL
- en: You should now have a better understanding of how and when to use the **Text
    to Line-item** transform function.
  prefs: []
  type: TYPE_NORMAL
- en: Next, let’s cover how to reverse this action and convert line items into text
    using the **Line-item to Text** transform function.
  prefs: []
  type: TYPE_NORMAL
- en: Converting line items into text
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We’ve just discussed how to convert comma-delimited text into line items. There
    will be scenarios where you want to do the opposite, in that you will want to
    change line-item data into comma-delimited text. We can use the Formatter by Zapier
    built-in app with the **Utilities** action event and the **Line-item to Text**
    transform option to do just that.
  prefs: []
  type: TYPE_NORMAL
- en: In the same action step, we can also split the resulting text into separate
    fields in the same way the **Split Text** transform function works, as discussed
    in [*Chapter 17*](B18474_17.xhtml#_idTextAnchor1922), *Text Formatting Functions
    in Zapier –* *Part 2*.
  prefs: []
  type: TYPE_NORMAL
- en: For example, you might raise invoices in your accounting app, Xero, for products
    that you sell. You also include delivery charges on the invoice as a separate
    invoice line. Once the invoice has been created, you want to send a message in
    Slack to your team with the details of the product that’s been sold, not the delivery
    charge.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s use this example to illustrate how to use and set up an action step with
    the **Line-item to Text** transform option.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up the Utilities action event with the Line-item to Text transform option
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can use the **Utilities** action event once you have set up your trigger
    step.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you have added an action step, either by selecting the **Action** step
    or clicking on the **+** icon, and have chosen **Formatter by Zapier** as the
    app and **Utilities** as the action event, you can edit the fields in the **Action**
    section, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Transform**: From the drop-down menu, select the **Line-item to Text** option.
    This is a required field and must have a value for the Zap to run.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Input**: You can use this field to map the values of the data that you want
    to convert into line items. You can either enter a static value, a dynamic value
    from previous steps, or a combination of both, to specify this value. Although
    this is not a required field, the formatter function will not return a result
    if there is no value.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`[:space:]` syntax. Although this is not a required field, if left blank, the
    default will be the `,` character.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'An example is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: "![Figure 18.12 – \uFEFFOverview of using the Formatter by Zapier Utilities\
    \ action event to change line items into text and split them into separate fields](img/B18474_18_12.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 18.12 – Overview of using the Formatter by Zapier Utilities action event
    to change line items into text and split them into separate fields
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on the **Continue** button. You can then use the **Test** section to
    transform line items into comma-delimited text split into separate fields. The
    result from the scenario in *Figure 18**.12* is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: "![Figure 18.13 – \uFEFFOverview of the data returned when transforming line\
    \ items into text split into fields](img/B18474_18_13.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 18.13 – Overview of the data returned when transforming line items into
    text split into fields
  prefs: []
  type: TYPE_NORMAL
- en: The output shown in *Figure 18**.13* is separate field items (`item_1`, `item_2`,
    and `item_last`), as well as the fully converted comma-separated `text`.
  prefs: []
  type: TYPE_NORMAL
- en: Proceed to add one or more action steps after your **Utilities** action step.
  prefs: []
  type: TYPE_NORMAL
- en: You should now have a better understanding of how and when to use the **Line-item
    to Text** transform function.
  prefs: []
  type: TYPE_NORMAL
- en: Next, let’s explore creating, appending, and prepending line items using the
    **Line Itemizer (Create/Append/Prepend)** transform function.
  prefs: []
  type: TYPE_NORMAL
- en: Using a line itemizer to create, append, or prepend line items
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Being able to create line items, attach additional items to the end of a line-item
    grouping, or insert additional items at the start of a line-item grouping – and
    all in one action step – is very useful. This will be most commonly needed if
    you have variables in your data from your trigger app that you need to push into
    another app where there needs to be consistency. Alternatively, you might need
    to collate data from several different action steps and combine the data to form
    line items. For example, you might sell your products through a shopping cart
    app such as ThriveCart and need to add the transaction information to QuickBooks
    Online. You might find that you need to use product searches to retrieve product
    IDs and combine order information from an upsell. You might also need to add a
    quantity of `1` for a coupon and delivery costs, which may not be represented
    in the data from the shopping cart. You can do all of this using the Formatter
    by Zapier built-in app with the `Price` and `Quantity`.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s use this example to illustrate how to use and set up an action step with
    the **Line Itemizer (Create/Append/Prepend)** transform option.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up the Utilities action event with the Line Itemizer (Create/Append/Prepend)
    transform option
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can use the **Utilities** action event once you have set up your trigger
    step.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you have added an action step, either by selecting the **Action** step
    or clicking on the **+** icon, and have chosen **Formatter by Zapier** as the
    app and **Utilities** as the action event, you can edit the fields in the **Action**
    section, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Transform**: From the drop-down menu, select the **Line Itemizer (Create/Append/Prepend)**
    option. This is a required field and must have a value for the Zap to run.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Invoices`, `Orders`, or `Line-items for Invoice`. You can either enter a static
    value, a dynamic value from previous steps, or a combination of both, to specify
    this value. The default is **Line-Item(s)**.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Product code`, `Description`, `Price`, `Qty`, and so on. The left column only
    accepts static text. In the right column, enter the comma-separated text or single
    values when creating line items. When appending or prepending, you can combine
    line items with comma-separated text or single values. You can either enter a
    static value, a dynamic value from previous steps, or a combination of both, to
    specify the values in the right column. You can add additional rows by clicking
    on the **+** button, and remove rows by clicking on the **X** button at the end
    of the row. Although this is not a required field, the formatter function will
    not return a result if there is no value.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Price` or `Quantity` (`Qty`), these values can be multiplied together to create
    a `Subtotal` property. This is useful if the app you’re sending data to requires
    `Total` values, which saves you from having to add another Formatter action step
    to create these values. You can either enter a static value, a dynamic value from
    previous steps, or a combination of both, to specify this value. The default is
    **No**.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Decimal Places For Subtotal Values**: If you select **Yes** for the **Create
    Subtotal Property?** field, you can enter a numerical value for how many decimal
    places you want the subtotal to be displayed as. You can either enter a static
    value, a dynamic value from previous steps, or a combination of both, to specify
    this value.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'An example is shown in the following screenshot, where an additional item,
    such as a standard delivery charge, has been added to a collection of line items:'
  prefs: []
  type: TYPE_NORMAL
- en: "![Figure 18.14 – \uFEFFOverview of using the Formatter by Zapier Utilities\
    \ action event to create, append, or prepend line-item data](img/B18474_18_14.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 18.14 – Overview of using the Formatter by Zapier Utilities action event
    to create, append, or prepend line-item data
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on the **Continue** button. You can then use the **Test** section to
    create, append, and prepend line items. The result from the scenario in *Figure
    18**.14* is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: "![Figure 18.15 – \uFEFFOverview of the data returned when creating, appending,\
    \ and prepending line-item data](img/B18474_18_15.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 18.15 – Overview of the data returned when creating, appending, and prepending
    line-item data
  prefs: []
  type: TYPE_NORMAL
- en: The output shown in *Figure 18**.15* is separate line items for `Description`,
    `Price`, `Product code`, `Quantity`, and `subtotal`.
  prefs: []
  type: TYPE_NORMAL
- en: Proceed to add one or more action steps after your **Utilities** action step.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following are a few useful resources that have been created by Zapier that
    will help you further when using line items with Formatter by Zapier:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://zapier.com/blog/formatter-line-item-automation/](https://zapier.com/blog/formatter-line-item-automation/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://help.zapier.com/hc/en-us/articles/8496277737997-Use-line-items-in-Zaps#1-identify-your-trigger-s-line-item-fields-0-0](https://help.zapier.com/hc/en-us/articles/8496277737997-Use-line-items-in-Zaps#1-identify-your-trigger-s-line-item-fields-0-0)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://community.zapier.com/featured-articles-65/formatter-features-line-itemizer-overview-11844](https://community.zapier.com/featured-articles-65/formatter-features-line-itemizer-overview-11844)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://community.zapier.com/featured-articles-65/an-example-of-how-to-use-the-line-itemizer-feature-of-our-formatter-app-7272](https://community.zapier.com/featured-articles-65/an-example-of-how-to-use-the-line-itemizer-feature-of-our-formatter-app-7272)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You should now have a better understanding of how and when to use the **Text
    to Line-item**, **Line-item to Text**, and **Line Itemizer (Create/Append/Prepend)**
    transform functions to manipulate line items.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we completed our exploration of the features of the Formatter
    by Zapier built-in app by covering the functionality of the **Utilities** action
    event. First, we introduced the Formatter by Zapier **Utilities** action event.
    Then, we discussed how to import CSV files, how to use lookup tables to store
    and help you find related data, and how to pick data from a list of values. Finally,
    we covered the various transform functions related to using line items in your
    automations.
  prefs: []
  type: TYPE_NORMAL
- en: You now know how to use the Formatter by Zapier built-in app to transform several
    different functions, including importing CSV files, using lookup tables, picking
    data from lists, converting text into line items, and vice versa, as well as line-item
    creation and customization.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, you will learn how to boost your productivity by combining
    **Artificial Intelligence** (**AI**) and automation. We will explore some of the
    Zapier’s built-in AI functionality such as the ChatGPT plugin and the Build A
    Zap AI feature, as well as dive into the OpenAI and ChatGPT integrations with
    Zapier.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you were running a customer support desk and wanted to randomly assign tickets
    to your support agents, which Formatter by Zapier **Utilities** transform option
    could you use?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What type of apps commonly express data as line items?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
