["```py\nCPU, 2ns per operation (higher per-core clock than GPU, fewer cores):\n\n1 * 4\n2 * 5\n3 * 6\n     = [4, 10, 18]\n\nTime taken: 6ns\n\nGPU, 4ns per operation (lower per-core clock than CPU, more cores):\n\n1 * 4 | 2 * 5 | 3 *6\n     = [4, 10, 18]\n\nTime taken: 4ns\n```", "```py\nfunc Conv2d(im, filter *G.Node, kernelShape tensor.Shape, pad, stride, dilation []int) (retVal *G.Node, err error) {\n    var op *convolution\n    if op, err = makeConvolutionOp(im, filter, kernelShape, pad, stride, dilation); err != nil {\n        return nil, err\n    }\n    return G.ApplyOp(op, im, filter)\n}\n```", "```py\nfunc Conv1d(in, filter *G.Node, kernel, pad, stride, dilation int) (*G.Node, error) {\n    return Conv2d(in, filter, tensor.Shape{1, kernel}, []int{0, pad}, []int{1, stride}, []int{1, dilation})\n}\n```", "```py\nfunc MaxPool2D(x *G.Node, kernel tensor.Shape, pad, stride []int) (retVal *G.Node, err error) {\n    var op *maxpool\n    if op, err = newMaxPoolOp(x, kernel, pad, stride); err != nil {\n        return nil, err\n    }\n    return G.ApplyOp(op, x)\n}\n```", "```py\nfunc Dropout(x *G.Node, prob float64) (retVal *G.Node, err error) {\n    var op *dropout\n    if op, err = newDropout(x, prob); err != nil {\n        return nil, err\n    }\n\n    // states := &scratchOp{x.Shape().Clone(), x.Dtype(), \"\"}\n    // m := G.NewUniqueNode(G.WithType(x.Type()), G.WithOp(states), G.In(x.Graph()), G.WithShape(states.shape...))\n\n    retVal, err = G.ApplyOp(op, x)\n    return\n}\n```", "```py\nfunc Rectify(x *G.Node) (retVal *G.Node, err error) {\n var op *activation\n if op, err = newRelu(); err != nil {\n return nil, err\n }\n retVal, err = G.ApplyOp(op, x)\n return\n}\n```", "```py\nfunc BatchNorm(x, scale, bias *G.Node, momentum, epsilon float64) (retVal, γ, β *G.Node, op *BatchNormOp, err error) {\n    dt, err := dtypeOf(x.Type())\n    if err != nil {\n        return nil, nil, nil, nil, err\n    }\n```", "```py\nchannels := x.Shape()[1]\nH, W := x.Shape()[2], x.Shape()[3]\nscratchShape := tensor.Shape{1, channels, H, W}\n\nmeanScratch := &gpuScratchOp{scratchOp{x.Shape().Clone(), dt, \"mean\"}}\nvarianceScratch := &gpuScratchOp{scratchOp{x.Shape().Clone(), dt, \"variance\"}}\ncacheMeanScratch := &gpuScratchOp{scratchOp{scratchShape, dt, \"cacheMean\"}}\ncacheVarianceScratch := &gpuScratchOp{scratchOp{scratchShape, dt, \"cacheVariance\"}}\n```", "```py\ng := x.Graph()\n\ndims := len(x.Shape())\n\nmean := G.NewTensor(g, dt, dims, G.WithShape(scratchShape.Clone()...), G.WithName(x.Name()+\"_mean\"), G.WithOp(meanScratch))\n\nvariance := G.NewTensor(g, dt, dims, G.WithShape(scratchShape.Clone()...), G.WithName(x.Name()+\"_variance\"), G.WithOp(varianceScratch))\n\ncacheMean := G.NewTensor(g, dt, dims, G.WithShape(scratchShape.Clone()...),      G.WithOp(cacheMeanScratch))\n\ncacheVariance := G.NewTensor(g, dt, dims, G.WithShape(scratchShape.Clone()...), G.WithOp(cacheVarianceScratch))\n```", "```py\nif scale == nil {\n    scale = G.NewTensor(g, dt, dims, G.WithShape(scratchShape.Clone()...), G.WithName(x.Name()+\"_γ\"), G.WithInit(G.GlorotN(1.0)))\n}\n\nif bias == nil {\n    bias = G.NewTensor(g, dt, dims, G.WithShape(scratchShape.Clone()...), G.WithName(x.Name()+\"_β\"), G.WithInit(G.GlorotN(1.0)))\n}\n\nop = newBatchNormOp(momentum, epsilon)\n\nretVal, err = G.ApplyOp(op, x, scale, bias, mean, variance, cacheMean, cacheVariance)\n\nreturn retVal, scale, bias, op, err\n```", "```py\nsudo apt install nvidia-390 nvidia-cuda-toolkit libcupti-dev\n```", "```py\nmkdir $GOPATH/src/gorgonia.org/gorgonia/cuda\\ modules/target\n```", "```py\ncd $GOPATH/src/gorgonia.org/gorgonia/cmd/cudagen\ngo run main.go\n```", "```py\ngo install gorgonia.org/cu/cmd/cudatest cudatest\ncd $GOPATH/src/gorgonia.org/cu/cmd/cudatest\ngo run main.go\n```", "```py\npacman -Syu\n```", "```py\npacman -Su\n```", "```py\npacman -S mingw-w64-x86_64-toolchain\n```", "```py\nC_INCLUDE_PATH\nC:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v9.2\\include\n\nLIBRARY_PATH\nC:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v9.2\\lib\\x64\n\nPATH\nC:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v9.2\\bin\nC:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v9.2\\libnvvp\nC:\\msys64\\mingw64\\bin\nC:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\bin\\x86_amd64\n```", "```py\n$GOPATH/src/gorgonia.org/gorgonia/cuda\\ modules/target\n```", "```py\ncd $GOPATH/src/gorgonia.org/gorgonia/cmd/cudagen\ngo run main.go\n```", "```py\ngo install gorgonia.org/cu/cmd/cudatest cudatest\n```", "```py\nCUDA version: 9020\nCUDA devices: 1\nDevice 0\n========\nName : \"GeForce GTX 1080\"\nClock Rate: 1835000 kHz\nMemory : 8589934592 bytes\nCompute : 6.1\n```", "```py\ngo build -tags='cuda'\n```", "```py\nw0 := gorgonia.NewMatrix(g, dt, gorgonia.WithShape(784, 300), gorgonia.WithName(\"w0\"), gorgonia.WithInit(gorgonia.GlorotN(1.0)))\n\nw1 := gorgonia.NewMatrix(g, dt, gorgonia.WithShape(300, 100), gorgonia.WithName(\"w1\"), gorgonia.WithInit(gorgonia.GlorotN(1.0)))\n\nw2 := gorgonia.NewMatrix(g, dt, gorgonia.WithShape(100, 10), gorgonia.WithName(\"w2\"), gorgonia.WithInit(gorgonia.GlorotN(1.0)))\n```", "```py\n2018/07/21 23:48:45 Batches 600\n2018/07/21 23:49:12 Epoch 0 | cost -0.6898460176511779\n2018/07/21 23:49:38 Epoch 1 | cost -0.6901109698353116\n2018/07/21 23:50:05 Epoch 2 | cost -0.6901978951202982\n2018/07/21 23:50:32 Epoch 3 | cost -0.6902410983814113\n2018/07/21 23:50:58 Epoch 4 | cost -0.6902669350941992\n2018/07/21 23:51:25 Epoch 5 | cost -0.6902841232197489\n2018/07/21 23:51:52 Epoch 6 | cost -0.6902963825164774\n2018/07/21 23:52:19 Epoch 7 | cost -0.6903055672849466\n2018/07/21 23:52:46 Epoch 8 | cost -0.6903127053988457\n2018/07/21 23:53:13 Epoch 9 | cost -0.690318412509433\n2018/07/21 23:53:13 Run Tests\n2018/07/21 23:53:19 Epoch Test | cost -0.6887220522190024\n```", "```py\n2018/07/21 23:54:31 Using CUDA build\n2018/07/21 23:54:32 Batches 600\n2018/07/21 23:54:56 Epoch 0 | cost -0.6914807096357707\n2018/07/21 23:55:19 Epoch 1 | cost -0.6917470871356043\n2018/07/21 23:55:42 Epoch 2 | cost -0.6918343739257966\n2018/07/21 23:56:05 Epoch 3 | cost -0.6918777292080605\n2018/07/21 23:56:29 Epoch 4 | cost -0.6919036464362168\n2018/07/21 23:56:52 Epoch 5 | cost -0.69192088335746\n2018/07/21 23:57:15 Epoch 6 | cost -0.6919331749749763\n2018/07/21 23:57:39 Epoch 7 | cost -0.691942382545885\n2018/07/21 23:58:02 Epoch 8 | cost -0.6919495375223687\n2018/07/21 23:58:26 Epoch 9 | cost -0.691955257565567\n2018/07/21 23:58:26 Run Tests\n2018/07/21 23:58:32 Epoch Test | cost -0.6896057773382677\n```"]