- en: '1'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '1'
- en: 'Getting Started: ChatGPT, the OpenAI API, and Prompt Engineering'
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 入门指南：ChatGPT、OpenAI API和提示工程
- en: '**ChatGPT** is a **large language model** (**LLM**) developed by **OpenAI**,
    which is specifically designed to generate context-aware responses and content
    based on the prompts provided by users. It leverages the power of **generative
    AI** to understand and respond intelligently to a wide range of queries, making
    it a valuable tool for numerous applications, including cybersecurity.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '**ChatGPT**是由**OpenAI**开发的一个**大型语言模型**（**LLM**），专门设计用于根据用户提供的提示生成具有上下文意识的响应和内容。它利用**生成式人工智能**的力量来理解并智能地回应各种查询，使其成为许多应用程序的宝贵工具，包括网络安全。'
- en: Important note
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: '**Generative AI** is a branch of **artificial intelligence** (**AI**) that
    uses **machine learning** (**ML**) algorithms and **natural language processing**
    (**NLP**) to analyze patterns and structures within a dataset and generate new
    data that resembles the original dataset. You likely use this technology every
    day if you use autocorrect in word processing applications, mobile chat apps,
    and more. That said, the advent of LLMs goes far beyond simple autocomplete.'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '**生成式人工智能**是**人工智能**（**AI**）的一个分支，它使用**机器学习**（**ML**）算法和**自然语言处理**（**NLP**）来分析数据集中的模式和结构，并生成类似原始数据集的新数据。如果你在文字处理应用程序、手机聊天应用等地方使用自动更正，那么你很可能每天都在使用这项技术。也就是说，LLM
    的出现远远超出了简单的自动补全。'
- en: LLMs are a type of generative AI that are trained on massive amounts of text
    data, enabling them to understand context, generate human-like responses, and
    create content based on user input. You may have already used LLMs if you have
    ever communicated with a helpdesk chatbot.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: LLM 是一种经过大量文本数据训练的生成式人工智能，使其能够理解上下文，生成类似人类的响应，并根据用户输入创建内容。如果你曾与帮助台聊天机器人进行过沟通，那么你可能已经使用过LLMs了。
- en: '**GPT** stands for **Generative Pre-Trained Transformer** and, as the name
    suggests, is an LLM that has been pre-trained to improve accuracy and/or provide
    specific knowledge-based data generation.'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '**GPT**代表**生成式预训练识别器**，顾名思义，它是一个预先训练的LLM，用于提高准确性和/或提供特定的基于知识的数据生成。'
- en: ChatGPT has raised concerns about plagiarism in some academic and content-creation
    communities. It has also been implicated in misinformation and social engineering
    campaigns due to its ability to generate realistic and human-like text. However,
    its potential to revolutionize various industries cannot be ignored. In particular,
    LLMs have shown great promise in more technical fields, such as programming and
    cybersecurity, due to their deep knowledge base and ability to perform complex
    tasks such as instantly analyzing data and even writing fully functional code.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: ChatGPT 在一些学术和内容创作社区引起了关于抄袭的担忧。由于其生成逼真和类似人类的文本的能力，它还被牵涉到了误传和社会工程活动中。然而，其改革多个行业的潜力也是不可忽视的。特别是由于其深厚的知识基础和执行复杂任务的能力（比如即时分析数据甚至编写完全功能的代码），LLMs
    在更严谨的领域，比如编程和网络安全，已经显示出了巨大的潜力。
- en: In this chapter, we will guide you through the process of setting up an account
    with OpenAI, familiarizing yourself with ChatGPT, and mastering the art of prompt
    engineering (the key to leveraging the real power of this technology). We will
    also introduce you to the OpenAI API, equipping you with the necessary tools and
    techniques to harness ChatGPT’s full potential.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，我们将指导你完成与OpenAI建立账户、熟悉ChatGPT并掌握提示工程（这是发挥这项技术真正力量的关键）的过程。我们还将介绍OpenAI
    API，为你提供必要的工具和技术，以充分发挥ChatGPT的潜力。
- en: You’ll begin by learning how to create a ChatGPT account and generate an API
    key, which serves as your unique access point to the OpenAI platform. We’ll then
    explore basic ChatGPT prompting techniques using various cybersecurity applications,
    such as instructing ChatGPT to write Python code that finds your IP address and
    simulating an AI CISO role by applying ChatGPT roles.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 你将首先学习如何创建 ChatGPT 账户并生成 API 密钥，该密钥作为你访问 OpenAI 平台的唯一访问点。然后我们将探讨使用各种网络安全应用程序的基本
    ChatGPT 提示技术，比如指导 ChatGPT 编写查找你的 IP 地址的 Python 代码以及模拟应用 ChatGPT 角色的 AI CISO 角色。
- en: We’ll dive deeper into enhancing your ChatGPT outputs with templates to generate
    comprehensive threat reports, as well as formatting output as tables for improved
    presentation, such as creating a security controls table. As you progress through
    this chapter, you’ll learn how to set the OpenAI API key as an environment variable
    to streamline your development process, send requests and handle responses with
    Python, efficiently use files for prompts and API key access, and effectively
    employ prompt variables to create versatile applications, such as generating manual
    pages based on user inputs. By the end of this chapter, you’ll have a solid understanding
    of the various aspects of ChatGPT and how to utilize its capabilities in the cybersecurity
    domain.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将深入探讨如何利用模板增强 ChatGPT 输出，生成全面的威胁报告，并将输出格式化为表格，以改善展示效果，例如创建安全控制表。在阅读本章的过程中，你将学会如何将
    OpenAI API 密钥设置为环境变量，以简化开发流程；使用 Python 发送请求和处理响应；高效地利用文件进行提示和 API 密钥访问；有效地使用提示变量创建多功能应用程序，如根据用户输入生成手册页面。到本章结束时，你将对
    ChatGPT 的各个方面有扎实的理解，以及如何在网络安全领域利用其功能。
- en: Tip
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 小贴士
- en: Even if you are already familiar with the basic ChatGPT and OpenAI API setup
    and mechanics, it will still be advantageous for you to review the recipes in
    [*Chapter 1*](B21091_01.xhtml#_idTextAnchor022) as they are almost all set within
    the context of cybersecurity, which is reflected through some of the prompting
    examples.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 即使您已经熟悉基本的 ChatGPT 和 OpenAI API 设置和原理，回顾[*第一章*](B21091_01.xhtml#_idTextAnchor022)中的菜谱仍然对您有利，因为几乎所有的例子都设置在网络安全的背景下，这在一些提示示例中得到了体现。
- en: 'In this chapter, we will cover the following recipes:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍以下的菜谱：
- en: Setting up a ChatGPT Account
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置 ChatGPT 账号
- en: Creating an API Key and interacting with OpenAI
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建 API 密钥和与 OpenAI 进行交互
- en: 'Basic prompting (Application: Finding Your IP Address)'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基本提示（应用场景：查找您的 IP 地址）
- en: 'Applying ChatGPT Roles (Application: AI CISO)'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应用 ChatGPT 角色（应用场景：AI CISO）
- en: 'Enhancing Output with Templates (Application: Threat Report)'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 利用模板增强输出（应用场景：威胁报告）
- en: 'Formatting Output as a Table (Application: Security Controls Table)'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将输出格式化为表格（应用场景：安全控制表）
- en: Setting the OpenAI API Key as an Environment Variable
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将 OpenAI API 密钥设置为环境变量
- en: Sending API Requests and Handling Responses with Python
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Python 发送 API 请求并处理响应
- en: Using Files for Prompts and API Key Access
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用文件进行提示和 API 密钥访问
- en: 'Using Prompt Variables (Application: Manual Page Generator)'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用提示变量（应用场景：手册页面生成器）
- en: Technical requirements
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: For this chapter, you will need a **web browser** and a stable **internet connection**
    to access the ChatGPT platform and set up your account. Basic familiarity with
    the Python programming language and working with the command line is necessary
    as you’ll be using **Python 3.x**, which needs to be installed on your system
    so that you can work with the OpenAI GPT API and create Python scripts. A **code
    editor** will also be essential for writing and editing Python code and prompt
    files as you work through the recipes in this chapter.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 本章需要使用**网络浏览器**和稳定的**互联网连接**来访问 ChatGPT 平台并设置您的账户。需要基本熟悉 Python 编程语言和命令行操作，因为你将要使用**Python
    3.x**，需要在系统上安装Python 3.x，以便使用 OpenAI GPT API 并创建 Python 脚本。还需要一个**代码编辑器**来编写和编辑
    Python 代码和提示文件，以便在此章节中编写和编辑代码。
- en: 'The code files for this chapter can be found here: [https://github.com/PacktPublishing/ChatGPT-for-Cybersecurity-Cookbook](https://github.com/PacktPublishing/ChatGPT-for-Cybersecurity-Cookbook).'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的代码文件可以在此处找到：[https://github.com/PacktPublishing/ChatGPT-for-Cybersecurity-Cookbook](https://github.com/PacktPublishing/ChatGPT-for-Cybersecurity-Cookbook)
    。
- en: Setting up a ChatGPT Account
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置 ChatGPT 账号
- en: In this recipe, we will learn about generative AI, LLMs, and ChatGPT. Then,
    we will guide you through the process of setting up an account with OpenAI and
    exploring the features it offers.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将学习生成式人工智能、LLMs 和 ChatGPT。然后，我们将为你介绍如何注册 OpenAI 账户并探索其提供的功能。
- en: Getting ready
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: To set up a ChatGPT account, you will need an active email address and a modern
    web browser.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 要设置 ChatGPT 账户，您需要一个活跃的电子邮件地址和现代的网络浏览器。
- en: Important note
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: Every effort has been made to ensure that every illustration and instruction
    is correct at the time of writing. However, this is such a fast-moving technology
    and many of the tools used in this book are currently being updated at a rapid
    pace. Therefore, you might find slight differences.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在撰写本书时，我们已经尽力确保每个插图和指令都是正确的。但是，这是一个快速发展的技术领域，本书中使用的许多工具目前正在快速更新。因此，您可能会发现细微的差异。
- en: How to do it…
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '如何做... '
- en: 'By setting up a ChatGPT account, you’ll gain access to a powerful AI tool that
    can greatly enhance your cybersecurity workflow. In this section, we’ll walk you
    through the steps of creating an account, allowing you to leverage ChatGPT’s capabilities
    for a range of applications, from threat analysis to generating security reports:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 通过建立 ChatGPT 账号，您将获得访问一个强大 AI 工具的能力，可以极大地增强您的网络安全工作流程。在本节中，我们将指导您完成创建账号的步骤，让您能够利用
    ChatGPT 的能力进行各种应用，从威胁分析到生成安全报告：
- en: Visit the OpenAI website at [https://platform.openai.com/](https://platform.openai.com/)
    and click **Sign up**.
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 访问 OpenAI 网站 [https://platform.openai.com/](https://platform.openai.com/) 并点击
    **注册**。
- en: 'Enter your email address and click **Continue**. Alternatively, you can register
    with your existing Google or Microsoft account:'
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入您的电子邮件地址然后点击 **继续**。另外，您也可以使用您现有的 Google 或 Microsoft 账号注册：
- en: '![Figure 1.1 – OpenAI signup form](img/Figure_1.01_B21091.jpg)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.1 – OpenAI 注册表](img/Figure_1.01_B21091.jpg)'
- en: Figure 1.1 – OpenAI signup form
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.1 – OpenAI 注册表
- en: Enter a strong password and click **Continue**.
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入一个强密码然后点击 **继续**。
- en: Check your email for a verification message from OpenAI. Click the link provided
    in the email to verify your account.
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查您的电子邮件，看看来自 OpenAI 的验证消息。点击邮件中提供的链接验证您的账号。
- en: Once your account has been verified, enter the required information (first name,
    last name, optional organization name, and birthday) and click **Continue**.
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 完成账号验证后，输入所需信息（名字、姓氏、可选的机构名称和生日）然后点击 **继续**。
- en: Enter your phone number to verify by phone and click **Send code**.
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入您的电话号码进行电话验证，然后点击 **发送验证码**。
- en: When you receive the text message with the code, enter the code and click **Continue**.
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当您收到包含验证码的短信时，输入验证码然后点击 **继续**。
- en: Visit and bookmark [https://platform.openai.com/docs/](https://platform.openai.com/docs/)
    to start becoming familiar with OpenAI’s documentation and features.
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 访问并收藏 [https://platform.openai.com/docs/](https://platform.openai.com/docs/)
    以开始熟悉 OpenAI 的文档和功能。
- en: How it works…
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: By setting up an account with OpenAI, you gain access to the ChatGPT API and
    other features offered by the platform, such as **Playground** and all available
    models. This enables you to utilize ChatGPT’s capabilities in your cybersecurity
    operations, enhancing your efficiency and decision-making process.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 通过建立一个 OpenAI 账号，您将获得访问 ChatGPT API 和平台提供的其他功能的权限，如 **Playground** 和所有可用模型。这将使您能够在您的网络安全操作中利用
    ChatGPT 的能力，提升您的效率和决策流程。
- en: There’s more…
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'When you sign up for a free OpenAI account, you get $18 in free credits. While
    you most likely won’t use up all of your free credits throughout the recipes in
    this book, you will eventually with continued use. Consider upgrading to a paid
    OpenAI plan to access additional features, such as increased API usage limits
    and priority access to new features and improvements:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 当您注册免费的 OpenAI 账号时，您将获得价值 $18 的免费信用额度。虽然您可能不会在本书的内容中用完所有的免费信用额度，但随着持续使用，最终会用完。考虑升级到付费的
    OpenAI 计划以访问额外功能，如增加的 API 使用限制以及优先访问新功能和改进：
- en: '**Upgrading to** **ChatGPT Plus**:'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**升级到** **ChatGPT Plus**:'
- en: ChatGPT Plus is a subscription plan that offers additional benefits beyond free
    access to ChatGPT. With a ChatGPT Plus subscription, you can expect faster response
    times, general access to ChatGPT even during peak times, and priority access to
    new features and improvements (this includes access to GPT-4 at the time of writing).
    This subscription is designed to provide an enhanced user experience and ensure
    that you can make the most out of ChatGPT for your cybersecurity needs.
  id: totrans-50
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ChatGPT Plus 是一个订阅计划，提供了比免费访问 ChatGPT 更多的好处。通过 ChatGPT Plus 订阅，您可以期待更快的响应时间，在高峰时段甚至有通用访问
    ChatGPT，以及优先访问新功能和改进（在撰写本文时包括访问 GPT-4）。这个订阅计划旨在提供增强的用户体验，并确保您能充分利用 ChatGPT 来满足您的网络安全需求。
- en: '**Benefits of having an** **API key**:'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**拥有 API 密钥的好处**：'
- en: Having an API key is essential for utilizing ChatGPT’s capabilities programmatically
    through the OpenAI API. With an API key, you can access ChatGPT directly from
    your applications, scripts, or tools, enabling more customized and automated interactions.
    This allows you to build a wide range of applications, integrating ChatGPT’s intelligence
    to enhance your cybersecurity practices. By setting up an API key, you’ll be able
    to harness the full power of ChatGPT and tailor its features to your specific
    requirements, making it an indispensable tool for your cybersecurity tasks.
  id: totrans-52
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Tip
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
- en: I highly recommend upgrading to ChatGPT Plus so that you have access to GPT-4\.
    While GPT-3.5 is still very powerful, GPT-4’s coding efficiency and accuracy make
    it more suited to the types of use cases we will be covering in this book and
    with cybersecurity in general. At the time of writing, there are also other additional
    features in ChatGPT Plus, such as the availability of plugins and the code interpreter,
    which will be covered in later chapters.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
- en: Creating an API Key and interacting with OpenAI
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will guide you through the process of obtaining an OpenAI
    API key and introduce you to the OpenAI Playground, where you can experiment with
    different models and learn more about their capabilities.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To get an OpenAI API key, you will need to have an active OpenAI account. If
    you haven’t already, complete the *Setting up a ChatGPT account* recipe to set
    up your ChatGPT account.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Creating an API key and interacting with OpenAI allows you to harness the power
    of ChatGPT and other OpenAI models for your applications. This means you’ll be
    able to leverage these AI technologies to build powerful tools, automate tasks,
    and customize your interactions with the models. By the end of this recipe, you
    will have successfully created an API key for programmatic access to OpenAI models
    and learned how to experiment with them using the OpenAI Playground.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let’s proceed with the steps to create an API key and explore the OpenAI
    Playground:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
- en: Log in to your OpenAI account at [https://platform.openai.com](https://platform.openai.com).
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'After logging in, click on your **profile picture/name** in the top-right corner
    of the screen and select **View API keys** from the drop-down menu:'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: "![Figure 1.2 \uFEFF– The API keys screen](img/Figure_1.02_B21091.jpg)"
  id: totrans-64
  prefs: []
  type: TYPE_IMG
- en: Figure 1.2 – The API keys screen
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
- en: Click the **+ Create new secret key** button to generate a new API key.
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Give your API key a name (optional) and click **Create** **secret key**:'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 1.3 – Naming your API key](img/Figure_1.03_B21091.jpg)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
- en: Figure 1.3 – Naming your API key
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
- en: 'Your new API key will be displayed on the screen. Click the **copy icon**,
    ![copy icon](img/Icon_1.png), to copy the key to your clipboard:'
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tip
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
- en: Save your API key in a secure location immediately as you will need it later
    when working with the OpenAI API; you cannot view the key again in its entirety
    once it has been saved.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.4 – Copying your API key](img/Figure_1.04_B21091.jpg)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.4 – 复制您的 API 密钥](img/Figure_1.04_B21091.jpg)'
- en: Figure 1.4 – Copying your API key
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.4 – 复制您的 API 密钥
- en: How it works…
  id: totrans-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理…
- en: By creating an API key, you enable programmatic access to ChatGPT and other
    OpenAI models through the OpenAI API. This allows you to integrate ChatGPT’s capabilities
    into your applications, scripts, or tools, enabling more customized and automated
    interactions.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 通过创建 API 密钥，您可以通过 OpenAI API 实现对 ChatGPT 和其他 OpenAI 模型的编程访问。这使您能够将 ChatGPT 的功能集成到您的应用程序、脚本或工具中，从而实现更加定制化和自动化的交互。
- en: There’s more…
  id: totrans-77
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多内容…
- en: 'The **OpenAI Playground** is an interactive tool that allows you to experiment
    with different OpenAI models, including ChatGPT, and their various parameters,
    but without requiring you to write any code. To access and use the Playground,
    follow these steps:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '**OpenAI Playground** 是一个交互式工具，允许您尝试不同的 OpenAI 模型，包括 ChatGPT，以及它们的各种参数，但不需要您编写任何代码。要访问和使用
    Playground，请按照以下步骤操作：'
- en: Important note
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: Using the Playground requires token credits; you are billed each month for the
    credits used. For the most part, this cost can be considered very affordable,
    depending on your perspective. However, excessive use can add up to significant
    costs if not monitored.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Playground 需要令牌积分；您每个月都会为所使用的积分付费。从大多数情况来看，这个成本可以被认为是非常负担得起的，这取决于您的观点。然而，如果不加以监控，过度使用会导致显著的成本累积。
- en: Log in to your OpenAI account.
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 登录到您的 OpenAI 账户。
- en: 'Click **Playground** in the top navigation bar:'
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击顶部导航栏中的 **Playground**：
- en: '![Figure 1.5 – The OpenAI Playground](img/Figure_1.05_B21091.jpg)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.5 – OpenAI Playground](img/Figure_1.05_B21091.jpg)'
- en: Figure 1.5 – The OpenAI Playground
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.5 – OpenAI Playground
- en: 'In the Playground, you can choose from various models by selecting the model
    you want to use from the **Model** drop-down menu:'
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Playground 中，您可以通过从**模型**下拉菜单中选择要使用的模型来选择不同的模型：
- en: '![Figure 1.6 – Selecting a model](img/Figure_1.06_B21091.jpg)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.6 – 选择模型](img/Figure_1.06_B21091.jpg)'
- en: Figure 1.6 – Selecting a model
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.6 – 选择模型
- en: 'Enter your prompt in the textbox provided and click **Submit** to see the model’s
    response:'
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在提供的文本框中输入您的提示，然后点击 **提交** 查看模型的响应：
- en: '![Figure 1.7 – Entering a prompt and generating a response](img/Figure_1.07_B21091.jpg)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.7 – 输入提示并生成响应](img/Figure_1.07_B21091.jpg)'
- en: Figure 1.7 – Entering a prompt and generating a response
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.7 – 输入提示并生成响应
- en: Tip
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: Even though you are not required to enter an API key to interact with the Playground,
    usage still counts toward your account’s token/credit usage.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 即使您不需要输入 API 密钥来与 Playground 交互，使用仍然会计入您账户的令牌/积分使用情况。
- en: 'You can also adjust various settings, such as the maximum length, number of
    generated responses, and more, from the settings panel to the right of the message
    box:'
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您还可以从消息框右侧的设置面板调整各种设置，如最大长度、生成的响应数量等：
- en: '![Figure 1.8 – Adjusting settings in the Playground](img/Figure_1.08_B21091.jpg)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.8 – 调整 Playground 中的设置](img/Figure_1.08_B21091.jpg)'
- en: Figure 1.8 – Adjusting settings in the Playground
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.8 – 调整 Playground 中的设置
- en: 'Two of the most important parameters are **Temperature** and **Maximum length**:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 最重要的两个参数是**温度**和**最大长度**：
- en: The **Temperature** parameter affects the randomness and creativity of the model’s
    responses. A higher temperature (for example, 0.8) will produce more diverse and
    creative outputs, while a lower temperature (for example, 0.2) will generate more
    focused and deterministic responses. By adjusting the temperature, you can control
    the balance between the model’s creativity and adherence to the provided context
    or prompt.
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**温度**参数影响模型响应的随机性和创造性。较高的温度（例如，0.8）将产生更多样化和创造性的输出，而较低的温度（例如，0.2）将生成更加专注和确定性的响应。通过调整温度，您可以控制模型的创造性与对提供的上下文或提示的遵循之间的平衡。'
- en: The **Maximum length** parameter controls the number of tokens (words or word
    pieces) the model will generate in its response. By setting a higher maximum length,
    you can obtain longer responses, while a lower maximum length will produce more
    concise outputs. Adjusting the maximum length can help you tailor the response
    length to your specific needs or requirements.
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**最大长度**参数控制模型在其响应中将生成的标记（单词或单词片段）的数量。通过设置较高的最大长度，您可以获得更长的响应，而较低的最大长度将产生更简洁的输出。调整最大长度可以帮助您将响应长度定制到您特定的需求或要求。'
- en: Feel free to experiment with these parameters in the OpenAI Playground or when
    using the API to find the optimal settings for your specific use case or desired
    output.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
- en: 'The Playground allows you to experiment with different prompt styles, presets,
    and model settings, helping you better understand how to tailor your prompts and
    API requests for optimal results:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.9 – Prompt presets and model modes](img/Figure_1.09_B21091.jpg)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
- en: Figure 1.9 – Prompt presets and model modes
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
- en: While we will be covering several of the different prompt settings using the
    API throughout this book, we won’t cover them all. You are encouraged to review
    the *OpenAPI documentation* for more details.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
- en: 'Basic Prompting (Application: Finding Your IP Address)'
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will explore the basics of ChatGPT prompting using the ChatGPT
    interface, which is different from the OpenAI Playground we used in the previous
    recipe. The advantage of using the ChatGPT interface is that it does not consume
    account credits and is better suited for generating formatted output, such as
    writing code or creating tables.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-107
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To use the ChatGPT interface, you will need to have an active OpenAI account.
    If you haven’t already, complete the *Setting up a ChatGPT account* recipe to
    set up your ChatGPT account.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  id: totrans-109
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe, we’ll guide you through using the ChatGPT interface to generate
    a Python script that retrieves a user’s public IP address. By following these
    steps, you’ll learn how to interact with ChatGPT in a conversation-like manner
    and receive context-aware responses, including code snippets.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let’s proceed with the steps in this recipe:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
- en: In your browser, go to [https://chat.openai.com](https://chat.openai.com) and
    click **Log in**.
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Log in using your OpenAI credentials.
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Once you are logged in, you will be taken to the ChatGPT interface. The interface
    is similar to a chat application, with a text box at the bottom where you can
    enter your prompts:'
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 1.10 – The ChatGPT interface](img/Figure_1.10_B21091.jpg)'
  id: totrans-115
  prefs: []
  type: TYPE_IMG
- en: Figure 1.10 – The ChatGPT interface
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
- en: 'ChatGPT uses a conversation-based approach, so you can simply type your prompt
    as a message and press *Enter* or click the ![Enter](img/Icon_2.png) button to
    receive a response from the model. For example, you can ask ChatGPT to generate
    a piece of Python code to find the public IP address of a user:'
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 1.11 – Entering a prompt](img/Figure_1.11_B21091.jpg)'
  id: totrans-118
  prefs: []
  type: TYPE_IMG
- en: Figure 1.11 – Entering a prompt
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
- en: 'ChatGPT will generate a response containing the requested Python code, along
    with a thorough explanation:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.12 – ChatGPT response with code](img/Figure_1.12_B21091.jpg)'
  id: totrans-121
  prefs: []
  type: TYPE_IMG
- en: Figure 1.12 – ChatGPT response with code
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
- en: 'Continue the conversation by asking follow-up questions or providing additional
    information, and ChatGPT will respond accordingly:'
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 1.13 – ChatGPT contextual follow-up response](img/Figure_1.13_B21091.jpg)'
  id: totrans-124
  prefs: []
  type: TYPE_IMG
- en: Figure 1.13 – ChatGPT contextual follow-up response
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the ChatGPT-generated code by clicking on `.py` Python script, and run
    it from a terminal:'
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-127
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Figure 1.14 – Running the ChatGPT-generated script
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  id: totrans-129
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: By using the ChatGPT interface to enter prompts, you can generate context-aware
    responses and content that continues throughout an entire conversation, similar
    to a chatbot. The conversation-based approach allows for more natural interactions
    and the ability to ask follow-up questions or provide additional context. The
    responses can even include complex formatting such as code snippets or tables
    (more on tables later).
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
- en: There’s more…
  id: totrans-131
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As you become more familiar with ChatGPT, you can experiment with different
    prompt styles, instructions, and contexts to obtain the desired output for your
    cybersecurity tasks. You can also compare the results that are generated through
    the ChatGPT interface and the OpenAI Playground to determine which approach best
    fits your needs.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
- en: You can further refine the generated output by providing very clear and specific
    instructions or using roles. It also helps to divide complex prompts into several
    smaller prompts, giving ChatGPT one instruction per prompt, building on the previous
    prompts as you go.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
- en: In the upcoming recipes, we will delve into more advanced prompting techniques
    that utilize these techniques to help you get the most accurate and detailed responses
    from ChatGPT.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
- en: As you interact with ChatGPT, your conversation history is automatically saved
    in the left panel of the ChatGPT interface. This feature allows you to easily
    access and review your previous prompts and responses.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
- en: 'By leveraging the conversation history feature, you can keep track of your
    interactions with ChatGPT and quickly reference previous responses for your cybersecurity
    tasks or other projects:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.15 – Conversation history in the ChatGPT interface](img/Figure_1.15_B21091.jpg)'
  id: totrans-138
  prefs: []
  type: TYPE_IMG
- en: Figure 1.15 – Conversation history in the ChatGPT interface
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
- en: To view a saved conversation, simply click on the desired conversation in the
    left panel. You can also create new conversations by clicking on the **+ New chat**
    button located at the top of the conversation list. This enables you to separate
    and organize your prompts and responses based on specific tasks or topics.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
- en: Note of caution
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
- en: Keep in mind that when you start a new conversation, the model loses the context
    of the previous conversation. If you want to reference any information from a
    previous conversation, you will need to include that context in your new prompt.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
- en: 'Applying ChatGPT Roles (Application : AI CISO)'
  id: totrans-143
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will demonstrate how you can use roles in your prompts to
    improve the accuracy and detail of ChatGPT’s responses. Assigning roles to ChatGPT
    helps it generate more context-aware and relevant content, particularly when you
    need expert-level insights or recommendations.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-145
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Ensure you have access to the ChatGPT interface by logging in to your OpenAI
    account.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  id: totrans-147
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'By assigning roles, you’ll be able to obtain expert-level insights and recommendations
    from the model. Let’s dive into the steps for this recipe:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 通过分配角色，您将能够从模型中获得专家级别的见解和建议。让我们深入了解此配方的步骤：
- en: 'To assign a role to ChatGPT, start your prompt by describing the role you want
    the model to assume. For example, you could use the following prompt:'
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要为 ChatGPT 分配一个角色，请在你的提示开头描述你希望模型扮演的角色。例如，你可以使用以下提示：
- en: '[PRE1]'
  id: totrans-150
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'ChatGPT will generate a response that aligns with the assigned role, providing
    a detailed explanation of the topic based on the expertise and perspective of
    a cybersecurity expert:'
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: ChatGPT 将生成一个符合分配角色的响应，根据网络安全专家的专业知识和观点提供关于该主题的详细解释：
- en: '![Figure 1.16 – ChatGPT response with role-based expertise](img/Figure_1.16_B21091.jpg)'
  id: totrans-152
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.16 – 具有基于角色的专业知识的 ChatGPT 响应](img/Figure_1.16_B21091.jpg)'
- en: Figure 1.16 – ChatGPT response with role-based expertise
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.16 – 具有基于角色的专业知识的 ChatGPT 响应
- en: 'Experiment with assigning different roles for different scenarios, such as
    the following:'
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 尝试为不同情景分配不同角色，例如以下情况：
- en: '[PRE2]'
  id: totrans-155
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Alternatively, you can use the following:'
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 或者，你可以使用以下方式：
- en: '[PRE3]'
  id: totrans-157
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Note of caution
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 注意事项
- en: Keep in mind that ChatGPT’s knowledge is based on the data it was trained on,
    which has a cutoff date of September 2021\. As a result, the model may not be
    aware of the latest developments, trends, or technologies in the cybersecurity
    field that emerged after its training data cutoff. Always verify the information
    generated by ChatGPT with up-to-date sources and take its training limitations
    into account when interpreting its responses. We will discuss techniques on how
    to get around this limitation later in this book.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，ChatGPT 的知识基于它所训练的数据，截止日期为 2021 年 9 月。因此，该模型可能不了解在其训练数据截止日期之后出现的网络安全领域的最新发展、趋势或技术。在解释其响应时，始终使用最新的来源验证
    ChatGPT 生成的信息，并考虑其训练限制。我们将在本书的后面讨论如何克服这一限制的技术。
- en: How it works…
  id: totrans-160
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理…
- en: When you assign a role to ChatGPT, you provide a specific context or persona
    for the model to work with. This helps the model generate responses that are tailored
    to the given role, resulting in more accurate, relevant, and detailed content.
    The model will generate content that aligns with the expertise and perspective
    of the assigned role, offering better insights, opinions, or recommendations.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 当你为 ChatGPT 分配一个角色时，你提供了一个特定的上下文或角色给模型参考。这有助于模型生成符合给定角色的响应，从而产生更准确、相关和详细的内容。该模型将生成符合分配角色的专业知识和观点的内容，提供更好的见解、意见或建议。
- en: There’s more…
  id: totrans-162
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多…
- en: 'As you become more comfortable using roles in your prompts, you can experiment
    with different combinations of roles and scenarios to obtain the desired output
    for your cybersecurity tasks. For example, you can create a dialogue between two
    roles by alternating prompts for each role:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 当你在提示中更加熟悉使用角色时，你可以尝试使用不同角色和场景的不同组合，以获得符合网络安全任务要求的期望输出。例如，你可以通过为每个角色交替提示来创建一个对话：
- en: '**Role 1**:'
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**角色 1**：'
- en: '[PRE4]'
  id: totrans-165
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '**Role 2**:'
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**角色 2**：'
- en: '[PRE5]'
  id: totrans-167
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: By using roles creatively and experimenting with different combinations, you
    can leverage ChatGPT’s expertise and obtain more accurate and detailed responses
    for a wide range of cybersecurity topics and situations.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 通过创造性地使用角色并尝试不同的组合，你可以利用 ChatGPT 的专业知识，并获得更准确和详细的响应，涵盖了各种网络安全主题和情景。
- en: We will experiment with automating role conversations in later chapters.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在后面的章节中尝试自动化角色对话。
- en: 'Enhancing Output with Templates (Application: Threat Report)'
  id: totrans-170
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用模板增强输出（应用：威胁报告）
- en: In this recipe, we will explore how to use output templates to guide ChatGPT’s
    responses, making them more consistent, well-structured, and suitable for reports
    or other formal documents. By providing a specific format for the output, you
    can ensure that the generated content meets your requirements and is easier to
    integrate into your cybersecurity projects.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 在本配方中，我们将探讨如何使用输出模板来引导 ChatGPT 的响应，使其更加一致、结构良好，并适用于报告或其他正式文档。通过为输出提供一个具体的格式，你可以确保生成的内容符合你的要求，并且更容易集成到你的网络安全项目中。
- en: Getting ready
  id: totrans-172
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Ensure you have access to the ChatGPT interface by logging in to your OpenAI
    account.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 确保你可以通过登录你的 OpenAI 帐户访问 ChatGPT 接口。
- en: How to do it…
  id: totrans-174
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 怎么做…
- en: 'To get started, follow these steps:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始，请按照以下步骤进行：
- en: 'When crafting your prompt, you can specify the output of several different
    formatting options, such as headings, font weight, lists, and more. The following
    prompt demonstrates how to create output with headings, font weights, and list
    types:'
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-177
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'ChatGPT will generate a response that follows the specified template, providing
    a well-structured and consistent output:'
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 1.17 – ChatGPT response with formatting (headings, bold font, and
    lists)](img/Figure_1.17_B21091.jpg)'
  id: totrans-179
  prefs: []
  type: TYPE_IMG
- en: Figure 1.17 – ChatGPT response with formatting (headings, bold font, and lists)
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.18 – ChatGPT response with formatting (heading, lists, and italicized
    text)](img/Figure_1.18_B21091.jpg)'
  id: totrans-181
  prefs: []
  type: TYPE_IMG
- en: Figure 1.18 – ChatGPT response with formatting (heading, lists, and italicized
    text)
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
- en: This formatted text is now more structured and can be easily transferred to
    other documents through copying and pasting while retaining its formatting.
  id: totrans-183
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  id: totrans-184
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: By providing a clear template for the output in your prompt, you guide ChatGPT
    to generate responses that adhere to the specified structure and formatting. This
    helps ensure that the generated content is consistent, well organized, and suitable
    for use in reports, presentations, or other formal documents. The model will focus
    on generating content that matches the output template formatting and structure
    you’ve provided while still delivering the information you requested.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
- en: 'The following conventions are used when formatting ChatGPT output:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
- en: To create a main `#`), followed by a space and the text of the heading. In this
    case, the main heading is *Threat Report*.
  id: totrans-187
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To create a `##`), followed by a space and the text of the subheading. In this
    case, the subheadings are *Overview*, *Cyber Kill Chain Analysis*, and *Mitigation
    Recommendations*. You can continue to create additional subheading levels by increasing
    the number of pound signs.
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To create `-`) or asterisk (`*`), followed by a space and the text of the bullet
    point. In this case, the bullet points are used in the *Overview* section to indicate
    the threat’s name, date of occurrence, industries affected, and impact.
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To create `**`) or underscores (`__`) to surround the text you want to bold.
    In this case, each of the bullets and numbered list keywords were bolded.
  id: totrans-190
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To `*`) or underscores (`_`) to surround the text you want to italicize. In
    this case, the second kill chain step is italicized using a pair of underscores.
    Here, italicized text is used for the *mitigations* *recommendations bullets*.
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To create a **numbered list**, use a number followed by a period and a space,
    followed by the text of the list item. In this case, the *Cyber Kill Chain Analysis
    section* is a numbered list.
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: There’s more…
  id: totrans-193
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Combining templates with other techniques, such as roles, can further enhance
    the quality and relevance of the generated content. By applying both templates
    and roles, you can create output that is not only well-structured and consistent
    but also tailored to specific expert perspectives.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
- en: As you become more comfortable using templates in your prompts, you can experiment
    with different formats, structures, and scenarios to obtain the desired output
    for your cybersecurity tasks. For example, in addition to text formatting, you
    can also use tables to organize the generated content even further, which is what
    we will cover in the next recipe.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
- en: 'Formatting Output as a Table (Application: Security Controls Table)'
  id: totrans-196
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will demonstrate how to create prompts that guide ChatGPT
    to generate output in table format. Tables can be an effective way to organize
    and present information in a structured and easy-to-read manner. In this example,
    we will create a security controls comparison table.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-198
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Ensure you have access to the ChatGPT interface by logging into your OpenAI
    account.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  id: totrans-200
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This example will demonstrate how to create a security controls comparison
    table. Let’s dive into the steps to achieve this:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
- en: 'Craft your prompt by specifying the table format and the information you want
    to include. For this example, we will generate a table comparing different security
    controls:'
  id: totrans-202
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-203
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'ChatGPT will generate a response containing a table with the specified columns,
    populated with relevant information:'
  id: totrans-204
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 1.19 – Snippet of a ChatGPT response with a table](img/Figure_1.19_B21091.jpg)'
  id: totrans-205
  prefs: []
  type: TYPE_IMG
- en: Figure 1.19 – Snippet of a ChatGPT response with a table
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
- en: 'You can now easily copy and paste the generated table directly into a document
    or spreadsheet, where it can be further formatted and refined:'
  id: totrans-207
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 1.20 – ChatGPT response copied/pasted directly into a spreadsheet](img/Figure_1.20_B21091.jpg)'
  id: totrans-208
  prefs: []
  type: TYPE_IMG
- en: Figure 1.20 – ChatGPT response copied/pasted directly into a spreadsheet
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  id: totrans-210
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: By specifying the table format and required information in your prompt, you
    guide ChatGPT to generate content in a structured, tabular manner. The model will
    focus on generating content that matches the specified format and populating the
    table with the requested information. The ChatGPT interface automatically understands
    how to provide table formatting using markdown language, which is then interpreted
    by the browser.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
- en: In this example, we asked ChatGPT to create a table comparing five different
    security controls with columns for **Control Name**, **Description**, **Implementation
    Cost**, **Maintenance Cost**, **Effectiveness**, and **Ease of Implementation**.
    The resulting table provides an organized and easy-to-understand overview of the
    different security controls.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
- en: There’s more…
  id: totrans-213
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As you become more comfortable using tables in your prompts, you can experiment
    with different formats, structures, and scenarios to obtain the desired output
    for your cybersecurity tasks. You can also combine tables with other techniques,
    such as roles and templates, to further enhance the quality and relevance of the
    generated content.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
- en: By using tables creatively and experimenting with different combinations, you
    can leverage ChatGPT’s capabilities to generate structured and organized content
    for various cybersecurity topics and situations.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
- en: Setting the OpenAI API Key as an Environment Variable
  id: totrans-216
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will show you how to set up your OpenAI API key as an environment
    variable. This is an essential step as it allows you to use the API key in your
    Python code without hardcoding it, which is a best practice for security purposes.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-218
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Ensure that you have already obtained your OpenAI API key by signing up for
    an account and accessing the API key section, as outlined in the *Creating an
    API key and interacting with* *OpenAI* recipe.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  id: totrans-220
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This example will demonstrate how to set up your OpenAI API key as an environment
    variable for secure access in your Python code. Let’s dive into the steps to achieve
    this.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
- en: Set up the API key as an environment variable on your operating system.
  id: totrans-222
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For Windows
  id: totrans-223
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Open the Start menu, search for `Environment Variables`, and click **Edit the
    system** **environment variables**.
  id: totrans-224
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **System Properties** window, click the **Environment** **Variables**
    button.
  id: totrans-225
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Environment Variables** window, click **New** under **User variables**
    or **System variables** (depending on your preference).
  id: totrans-226
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter `OPENAI_API_KEY` as the variable’s name and paste your API key as the
    variable value. Click **OK** to save the new environment variable.
  id: totrans-227
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For macOS/Linux
  id: totrans-228
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Open a Terminal window.
  id: totrans-229
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the API key to your shell configuration file (such as `.bashrc`, .`zshrc`,
    or `.profile`) by running the following command (replace `your_api_key` with your
    actual API key):'
  id: totrans-230
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-231
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Tip
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
- en: If you are using a different shell configuration file, replace `~/.bashrc` with
    the appropriate file (for example, `., ~/.zshrc` or `~/.profile`).
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
- en: Restart Terminal or run `source ~/.bashrc` (or the appropriate configuration
    file) to apply the changes.
  id: totrans-234
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Access the API key in your Python code using the `os` module:'
  id: totrans-235
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-236
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Important note
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
- en: There are many different versions of Linux and Unix-based systems, and the exact
    syntax for setting environment variables might differ slightly from what is presented
    here. However, the general approach should be similar. If you encounter issues,
    consult the documentation specific to your system for guidance on setting environment
    variables.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  id: totrans-239
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: By setting up the OpenAI API key as an environment variable, you make it available
    for use in your Python code without hardcoding the key, which is a security best
    practice. In the Python code, you use the `os` module to access the API key from
    the environment variable you created earlier.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
- en: Using environment variables is a common practice when working with sensitive
    data, such as API keys or other credentials. This approach allows you to separate
    your code from your sensitive data and makes it easier to manage your credentials
    as you only need to update them in one place (the environment variables). Additionally,
    it helps prevent accidental exposure of sensitive information when you’re sharing
    code with others or publishing it in public repositories.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
- en: There’s more…
  id: totrans-242
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In some cases, you may want to use a Python package such as `python-dotenv`
    to manage your environment variables. This package allows you to store your environment
    variables in a `.env` file, which you can load in your Python code. The advantage
    of this approach is that you can keep all your project-specific environment variables
    in a single file, making it easier to manage and share your project settings.
    Keep in mind, though, that you should never commit the `.env` file to a public
    repository; always include it in your `.gitignore` file or similar version control
    ignore configuration.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
- en: Sending API Requests and Handling Responses with Python
  id: totrans-244
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will explore how to send requests to the OpenAI GPT API and
    handle the responses using Python. We’ll walk through the process of constructing
    API requests, sending them, and processing the responses using the `openai` module.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-246
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Ensure you have Python installed on your system.
  id: totrans-247
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Install the OpenAI Python module by running the following command in your Terminal
    or command prompt:'
  id: totrans-248
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-249
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: How to do it…
  id: totrans-250
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The importance of using the API lies in its ability to communicate with and
    get valuable insights from ChatGPT in real time. By sending API requests and handling
    responses, you can harness the power of GPT to answer questions, generate content,
    or solve problems in a dynamic and customizable way. In the following steps, we’ll
    demonstrate how to construct API requests, send them, and process the responses,
    enabling you to effectively integrate ChatGPT into your projects or applications:'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
- en: 'Start by importing the required modules:'
  id: totrans-252
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-253
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Set up your API key by retrieving it from an environment variable, as we did
    in the *Setting the OpenAI API key as an Environment* *Variable* recipe:'
  id: totrans-254
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-255
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Define a function to send a prompt to the OpenAI API and receive a response:'
  id: totrans-256
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-257
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Call the function with a prompt to send a request and receive a response:'
  id: totrans-258
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-259
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: How it works…
  id: totrans-260
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: First, we import the required modules. The `openai` module is the OpenAI API
    library, and the `os` module helps us retrieve the API key from an environment
    variable.
  id: totrans-261
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We set up the API key by retrieving it from an environment variable using the
    `os` module.
  id: totrans-262
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next, we define a function called `get_chat_gpt_response()` that takes a single
    argument: the prompt. This function sends a request to the OpenAI API using the
    `openai.Completion.create()` method. This method has several parameters:'
  id: totrans-263
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`engine`: Here, we specify the engine (in this case, `chat-3.5-turbo`).'
  id: totrans-264
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`prompt`: The input text for the model to generate a response.'
  id: totrans-265
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`max_tokens`: The maximum number of tokens in the generated response. A token
    can be as short as one character or as long as one word.'
  id: totrans-266
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`n`: The number of generated responses you want to receive from the model.
    In this case, we’ve set it to `1` to receive a single response.'
  id: totrans-267
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`stop`: A sequence of tokens that, if encountered by the model, will stop the
    generation process. This can be useful for limiting the response’s length or stopping
    at specific points, such as the end of a sentence or paragraph.'
  id: totrans-268
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`temperature`: A value that controls the randomness of the generated response.
    A higher temperature (for example, 1.0) will result in more random responses,
    while a lower temperature (for example, 0.1) will make the responses more focused
    and deterministic.'
  id: totrans-269
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Finally, we call the `get_chat_gpt_response()` function with a prompt, send
    the request to the OpenAI API, and receive the response. The function returns
    the response text, which is then printed to the console. The function returns
    the response text, which is then printed to the console. The `return response.choices[0].message.content.strip()`
    line of code retrieves the generated response text by accessing the first choice
    (`index 0`) in the list of choices.
  id: totrans-270
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`response.choices` is a list of generated responses from the model. In our
    case, since we set `n=1`, there is only one response in the list. The `.text`
    attribute retrieves the actual text of the response, and the `.strip()` method
    removes any leading or trailing whitespace.'
  id: totrans-271
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'For example, a non-formatted response from the OpenAI API may look like this:'
  id: totrans-272
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-273
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'In this example, we access the response text using `response.choices[0].text.strip()`,
    which returns the following text:'
  id: totrans-274
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-275
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: There’s more…
  id: totrans-276
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can further customize the API request by modifying the parameters in the
    `openai.Completion.create()` method. For example, you can adjust the temperature
    to get more creative or focused responses, change the `max_tokens` value to limit
    or expand the length of the generated content, or use the `stop` parameter to
    define specific stopping points for the response generation.
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
- en: Additionally, you can experiment with the `n` parameter to generate multiple
    responses and compare their quality or variety. Keep in mind that generating multiple
    responses will consume more tokens and may affect the cost and execution time
    of the API request.
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
- en: It’s essential to understand and fine-tune these parameters to get the desired
    output from ChatGPT since different tasks or scenarios may require different levels
    of creativity, response length, or stopping conditions. As you become more familiar
    with the OpenAI API, you’ll be able to leverage these parameters effectively to
    tailor the generated content to your specific cybersecurity tasks and requirements.
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
- en: Using Files for Prompts and API Key Access
  id: totrans-280
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, you will learn how to use external text files to store and retrieve
    prompts for interacting with the OpenAI API through Python. This method allows
    for better organization and easier maintenance as you can quickly update the prompt
    without modifying the main script. We will also introduce a new method of accessing
    the OpenAI API key – that is, using files – making the process of changing the
    API key much more flexible.
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-282
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Ensure you have access to the OpenAI API and have set up your API key according
    to the *Creating an API key and interacting with OpenAI* and *Setting the OpenAI
    API key as an Environment* *Variable* recipes.
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  id: totrans-284
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This recipe demonstrates a practical approach to managing prompts and API keys,
    making it easier to update and maintain your code. By using external text files,
    you can efficiently organize your project and collaborate with others. Let’s walk
    through the steps to implement this method:'
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
- en: Create a new text file and save it as `prompt.txt`. Write your desired prompt
    inside this file and save it.
  id: totrans-286
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Modify your Python script so that it includes a function to read the contents
    of a text file:'
  id: totrans-287
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  id: totrans-288
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Using the script from the *Sending API Requests and Handling Responses with
    Python* recipe, replace the hardcoded prompt with a call to the `open_file` function,
    passing the path to the `prompt.txt` file as an argument:'
  id: totrans-289
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  id: totrans-290
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Create a file called `prompt.txt` and enter the following prompt text (the
    same prompt as in the *Sending API Requests and Handling Responses with* *Python*
    recipe):'
  id: totrans-291
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  id: totrans-292
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Set up your API key using a file instead of environment variables:'
  id: totrans-293
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  id: totrans-294
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Important note
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
- en: It’s important to place this line of code after the `open_file` function; otherwise,
    Python will throw an error for calling a function that has not been declared yet.
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
- en: Create a file called `openai-key.txt` and paste your **OpenAI API key** into
    the file with nothing else.
  id: totrans-297
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use the prompt variable in your API call as you normally would.
  id: totrans-298
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Here is an example of how the modified script from the *Sending API Requests
    and Handling Responses with Python* recipe would look:'
  id: totrans-299
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE21]'
  id: totrans-300
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: How it works...
  id: totrans-301
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `open_file()` function takes a file path as an argument and opens the file
    using the `with open` statement. It reads the file’s content and returns it as
    a string. This string is then used as the prompt for the API call. A second `open_file()`
    function call is used to access a text file containing the OpenAI API key instead
    of accessing the API key using environment variables.
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
- en: By using an external text file for the prompt and to access the API key, you
    can easily update or change both without needing to modify the main script or
    environment variables. This can be particularly helpful when you’re working with
    multiple prompts or collaborating with others.
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
- en: Note of caution
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
- en: Using this technique to access your API key does come with a certain level of
    risk. A text file is easier to discover and access than an environment variable,
    so be sure to take the necessary security precautions. It is also important to
    remember to remove your API key from the `openapi-key.txt` file before you share
    your script with others, to prevent unintended and/or unauthorized charges to
    your OpenAI account.
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
- en: There’s more...
  id: totrans-306
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can also use this method to store other parameters or configurations that
    you may want to change frequently or share with others. This could include API
    keys, model parameters, or any other settings relevant to your use case.
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
- en: 'Using Prompt Variables (Application: Manual Page Generator)'
  id: totrans-308
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we’ll create a Linux-style manual page generator that will accept
    user input in the form of a tool’s name, and our script will generate the manual
    page output, similar to entering the `man` command in Linux Terminal. In doing
    so, we will learn how to use variables in a text file to create a standard prompt
    *template* that can be easily modified by changing certain aspects of it. This
    approach is particularly useful when you want to use user input or other dynamic
    content as part of the prompt while maintaining a consistent structure.
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-310
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Ensure you have access to the ChatGPT API by logging in to your OpenAI account
    and have Python and the `openai` module installed.
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  id: totrans-312
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Using a text file that contains the prompt and placeholder variables, we can
    create a Python script that will replace the placeholder with user input. In this
    example, we will use this technique to create a Linux-style manual page generator.
    Here are the steps:'
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a Python script and import the necessary modules:'
  id: totrans-314
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  id: totrans-315
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Define a function to open and read a file:'
  id: totrans-316
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  id: totrans-317
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Set up your API key:'
  id: totrans-318
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  id: totrans-319
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Create the `openai-key.txt` file in the same manner as the previous recipe.
  id: totrans-320
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Define the `get_chat_gpt_response()` function to send the prompt to ChatGPT
    and obtain a response:'
  id: totrans-321
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  id: totrans-322
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Receive user input for the filename and read the content of the file:'
  id: totrans-323
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  id: totrans-324
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Replace the `<<INPUT>>` variable in the `prompt.txt` file with the content
    of the file:'
  id: totrans-325
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  id: totrans-326
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Create the `prompt.txt` file with the following text:'
  id: totrans-327
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  id: totrans-328
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Send the modified prompt to the `get_chat_gpt_response()` function and print
    the result:'
  id: totrans-329
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  id: totrans-330
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Here’s an example of how the complete script should look:'
  id: totrans-331
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE30]'
  id: totrans-332
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: How it works…
  id: totrans-333
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this example, we created a Python script that utilizes a text file as a
    prompt template. The text file contains a variable called `<<INPUT>>` that can
    be replaced with any content, allowing for dynamic modification of the prompt
    without the need to change the overall structure. Specifically for this case,
    we are replacing it with user input:'
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
- en: The `openai` module is imported to access the ChatGPT API, and the `os` module
    is imported to interact with the operating system and manage environment variables.
  id: totrans-335
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `open_file()` function is defined to open and read a file. It takes a file
    path as an argument, opens the file with read access and UTF-8 encoding, reads
    the content, and then returns the content.
  id: totrans-336
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The API key for accessing ChatGPT is set up by reading it from a file using
    the `open_file()` function and then assigning it to `openai.api_key`.
  id: totrans-337
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `get_chat_gpt_response()` function is defined to send a prompt to ChatGPT
    and return the response. It takes the prompt as an argument, configures the API
    request with the desired settings, and then sends the request to the ChatGPT API.
    It extracts the response text, removes leading and trailing whitespaces, and returns
    it.
  id: totrans-338
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The script receives user input for the Linux command. This content will be used
    to replace the placeholder in the prompt template.
  id: totrans-339
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `<<INPUT>>` variable in the `prompt.txt` file is replaced with the content
    of the file provided by the user. This is done using Python’s string `replace()`
    method, which searches for the specified placeholder and replaces it with the
    desired content.
  id: totrans-340
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`man` command.'
  id: totrans-341
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The modified prompt, with the `<<INPUT>>` placeholder replaced, is sent to the
    `get_chat_gpt_response()` function. The function sends the prompt to ChatGPT,
    which retrieves the response, and the script prints the analysis result. This
    demonstrates how to use a prompt template with a variable that can be replaced
    to create customized prompts for different inputs.
  id: totrans-342
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This approach is particularly useful in a cybersecurity context as it allows
    you to create standard prompt templates for different types of analysis or queries
    and easily modify the input data as needed.
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
- en: There’s more...
  id: totrans-344
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Use multiple variables in your prompt template**: You can use more than one
    variable in your prompt template to make it even more versatile. For example,
    you can create a template with placeholders for different components of a cybersecurity
    analysis, such as IP addresses, domain names, and user agents. Just make sure
    you replace all the necessary variables before sending the prompt to ChatGPT.'
  id: totrans-345
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`<<INPUT>>` format, you can customize your variable format to better suit your
    needs or preferences. For example, you can use curly braces (for example, `{input}`)
    or any other format that you find more readable and manageable.'
  id: totrans-346
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`open_file()` function to read an environment variable instead of a file, ensuring
    that sensitive data is not accidentally leaked or exposed.'
  id: totrans-347
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Error handling and input validation**: To make your script more robust, you
    can add error handling and input validation. This can help you catch common issues,
    such as missing or improperly formatted files, and provide clear error messages
    to guide the user in correcting the problem.'
  id: totrans-348
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: By exploring these additional techniques, you can create more powerful, flexible,
    and secure prompt templates for use with ChatGPT in your cybersecurity projects.
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
