["```py\nimport torch\nnp.random.seed(123)\ntorch.manual_seed(123)\n```", "```py\nclass ConvNet(nn.Module):\n    def __init__(self):\n    def forward(self, x):\n```", "```py\ndef train(model, device, train_dataloader, optim,  epoch):\ndef test(model, device, test_dataloader):\n```", "```py\ntrain_dataloader = torch.utils.data.DataLoader(...)\ntest_dataloader = torch.utils.data.DataLoader(...)\n```", "```py\ndevice = torch.device(\"cpu\")\nmodel = ConvNet()\noptimizer = optim.Adadelta(model.parameters(), lr=0.5)\n```", "```py\nfor epoch in range(1, 20):\n    train(model, device, train_dataloader, optimizer, epoch)\n    test(model, device, test_dataloader)\n```", "```py\ntest_samples = enumerate(test_dataloader)\nb_i, (sample_data, sample_targets) = next(test_samples)\nplt.imshow(sample_data[0][0], cmap='gray', interpolation='none')\nplt.show()\n```", "```py\nprint(f\"Model prediction is : {model(sample_data).data.max(1)[1][0]}\")\nprint(f\"Ground truth is : {sample_targets[0]}\")\n```", "```py\nmodel_children_list = list(model.children())\nconvolutional_layers = []\nmodel_parameters = []\nmodel_children_list\n```", "```py\nfor i in range(len(model_children_list)):\n    if type(model_children_list[i]) == nn.Conv2d:\n        model_parameters.append(model_children_list[i].w      eight)\n        convolutional_layers.append(model_children_list[i])\n```", "```py\nplt.figure(figsize=(5, 4))\nfor i, flt in enumerate(model_parameters[0]):\n    plt.subplot(4, 4, i+1)\n    plt.imshow(flt[0, :, :].detach(), cmap='gray')\n    plt.axis('off')\nplt.show()\n```", "```py\nplt.figure(figsize=(5, 8))\nfor i, flt in enumerate(model_parameters[1]):\nplt.show()\n```", "```py\nper_layer_results = [convolutional_layers[0](sample_data)]\nfor i in range(1, len(convolutional_layers)):\n    per_layer_results.append(convolutional_layers[i](per_layer_results[-1]))\n```", "```py\nplt.figure(figsize=(5, 4))\nlayer_visualisation = per_layer_results[0][0, :, :, :]\nlayer_visualisation = layer_visualisation.data\nprint(layer_visualisation.size())\nfor i, flt in enumerate(layer_visualisation):\n    plt.subplot(4, 4, i + 1)\n    plt.imshow(flt, cmap='gray')\n    plt.axis(\"off\")\nplt.show()\n```", "```py\nplt.figure(figsize=(5, 8))\nlayer_visualisation = per_layer_results[1][0, :, :, :]\n    plt.subplot(8, 4, i + 1)\nplt.show()\n```", "```py\nfrom captum.attr import IntegratedGradients\nfrom captum.attr import Saliency\nfrom captum.attr import DeepLift\nfrom captum.attr import visualization as viz\n```", "```py\ncaptum_input = sample_data[0].unsqueeze(0)\ncaptum_input.requires_grad = True\n```", "```py\norig_image = np.tile(np.transpose((sample_data[0].cpu().detach().numpy() / 2) + 0.5, (1, 2, 0)), (1,1,3))\n_ = viz.visualize_image_attr(None, orig_image, cmap='gray', method=\"original_image\", title=\"Original Image\")\n```", "```py\nsaliency = Saliency(model)\ngradients = saliency.attribute(captum_input, target=sample_targets[0].item())\ngradients = np.reshape(gradients.squeeze().cpu().detach().numpy(), (28, 28, 1))\n_ = viz.visualize_image_attr(gradients, orig_image, method=\"blended_heat_map\", sign=\"absolute_value\",\nshow_colorbar=True, title=\"Overlayed Gradients\")\n```", "```py\nplt.imshow(np.tile(gradients/(np.max(gradients)), (1,1,3)));\n```", "```py\ninteg_grads = IntegratedGradients(model)\nattributed_ig, delta=integ_grads.attribute(captum_input, target=sample_targets[0], baselines=captum_input * 0, return_convergence_delta=True)\nattributed_ig = np.reshape(attributed_ig.squeeze().cpu().detach().numpy(), (28, 28, 1))\n_ = viz.visualize_image_attr(attributed_ig, orig_image, method=\"blended_heat_map\",sign=\"all\",show_colorbar=True, title=\"Overlayed Integrated Gradients\")\n```", "```py\ndeep_lift = DeepLift(model)\nattributed_dl = deep_lift.attribute(captum_input, target=sample_targets[0], baselines=captum_input * 0, return_convergence_delta=False)\nattributed_dl = np.reshape(attributed_dl.squeeze(0).cpu().detach().numpy(), (28, 28, 1))\n_ = viz.visualize_image_attr(attributed_dl, orig_image, method=\"blended_heat_map\",sign=\"all\",show_colorbar=True, title=\"Overlayed DeepLift\")\n```"]