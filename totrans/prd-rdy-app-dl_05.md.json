["```py\ndataset_<timestamp>\n> metadata.json\n> img1.png\n> img2.png\n> img3.png\n```", "```py\n{\n   \"created_by\": \"Adam\"\n   \"created_on\": \"2022-01-01\"\n   \"labelled_by\": \"Bob\"\n   \"number_of_samples\": 3\n}\n```", "```py\npip install wandb\nwandb login\n```", "```py\nimport wandb\nrun_1 = wandb.init(project=\"example-DL-Book\", name=\"run-1\") \n```", "```py\nwandb.log_artifact(file_path, name='new_artifact', type='my_dataset')\n```", "```py\nrun = wandb.init(project=\"example-DL-Book\")\nartifact = run.use_artifact('example-DL-Book/new_artifact:v0', type='my_dataset')\nartifact_dir = artifact.download()\n```", "```py\nimport wandb\nfrom wandb.keras import WandbCallback\nfrom tensorflow import keras\nfrom tensorflow.keras import layers\nwandb.init(project=\"example-DL-Book\", name=\"run-1\")\nwandb.config = {\n   \"learning_rate\": 0.001,\n   \"epochs\": 50,\n   \"batch_size\": 128\n}\nmodel = keras.Sequential()\nlogging_callback = WandbCallback(log_evaluation=True)\nmodel.fit(\n   x=x_train, y=y_train,\n   epochs=wandb.config['epochs'],\n   batch_size=wandb.config['batch_size'], \n   verbose='auto', \n   validation_data=(x_valid, y_valid),\n   callbacks=[logging_callback])\n```", "```py\nimport pytorch_lightning as pl\nfrom pytorch_lightning.loggers import WandbLogger\nwandb_logger = WandbLogger(project=\"example-DL-Book\")\ntrainer = Trainer(logger=wandb_logger)\nclass LitModule(LightningModule):\n   def __init__(self, *args, **kwarg):\n       self.save_hyperparameters()\n   def training_step(self, batch, batch_idx):\n       self.log(\"train/loss\", loss)\n```", "```py\npip install mlflow\n```", "```py\nimport os\nimport mlflow\nfrom mlflow import log_metric, log_param, log_artifacts\nlog_param(\"epochs\", 30)\nlog_metric(\"custom\", 0.6)\nlog_metric(\"custom\", 0.75) # metrics can be updated\nif not os.path.exists(\"artifact_dir\"):\n   os.makedirs(\"artifact_dir\")\nwith open(\"artifact_dir/test.txt\", \"w\") as f:\n   f.write(\"simple example\")\nlog_artifacts(\"artifact_dir\")\n```", "```py\nexp_id = mlflow.create_experiment(\"DLBookModel_1\")\nexp = mlflow.get_experiment(exp_id)\nwith mlflow.start_run(experiment_id=exp.experiment_id, run_name='run_1') as run:\n   # logging starts here\n   mlflow.set_tag('model_name', 'model1_dev')\n```", "```py\nhistory = keras_model.fit(...)\nmlflow.keras.log_model(keras_model, model_dir)\n```", "```py\nimport pytorch_lightning as pl \nfrom pytorch_lightning import Trainer\nfrom pytorch_lightning.loggers import MLFlowLogger\nmlf_logger = MLFlowLogger(experiment_name=\"example-DL-Book \", tracking_uri=\"file:./ml-runs\")\ntrainer = Trainer(logger=mlf_logger)\nclass DLBookModel(pl.LightningModule):\n   def __init__(self):\n       super(DLBookModel, self).__init__()\n       ...\n   def training_step(self, batch, batch_nb):\n       loss = self.log(\"train_loss\", loss, on_epoch=True)\n```", "```py\npip install dvc\n```", "```py\n    git init\n    dvc init\n    git commit -m 'initialize repo'\n    ```", "```py\n    dvc remote add -d myremote /tmp/dvc-storage\n    git commit .dvc/config -m \"Added local remote storage\"\n    ```", "```py\n    mkdir data\n    cp example_data.csv data/\n    ```", "```py\n    dvc add data/example_data.csv\n    ```", "```py\n    git add data/.gitignore data/example_data.csv.dvc\n    git commit -m 'data tracking'\n    git tag -a 'v1' -m 'test_data'\n    dvc push\n    ```", "```py\n    dvc pull data/example_data.csv.dvc\n    ```", "```py\n    dvc add data/example_data.csv\n    git add data/example_data.csv.dvc\n    git commit -m 'data modification description'\n    git tag -a 'v2' -m 'modified test_data'\n    dvc push\n    ```", "```py\nimport mlflow\nimport dvc.api\nimport pandas as pd\ndata_path='data/example_data.csv'\nrepo='/Users/BookDL_demo/'\nversion='v2'\ndata_url=dvc.api.get_url(path=path, repo=repo, rev=version)\n# this will fetch the right version of our data file\ndata = pd.read_csv(data_url)\n# log important information using mlflow\nmlflow.start_run()\nmlflow.log_param(\"data_url\", data_url)\nmlflow.log_artifact(...)\n```", "```py\nmlflow ui \n```"]