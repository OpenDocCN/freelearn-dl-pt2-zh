["```py\n    You are an experienced software development manager with expertise in secure software development and the Secure Software Development Lifecycle (SSDLC).\n    ```", "```py\n    Provide a detailed overview of the Secure Software Development Lifecycle (SSDLC), highlighting the main phases and their significance.\n    ```", "```py\n    Considering a project for developing a secure online banking system, detail the key considerations for the initial concept and feasibility phase.\n    ```", "```py\n    Outline a checklist for gathering and analyzing requirements for the online banking system project during the requirements phase of the SSDLC.\n    ```", "```py\n    Highlight important considerations when designing a secure online banking system during the system design phase of the SSDLC.\n    ```", "```py\n    Discuss secure coding best practices to follow when developing an online banking system during the development phase of the SSDLC.\n    ```", "```py\n    Enumerate the key types of testing that should be conducted on an online banking system during the testing phase of the SSDLC.\n    ```", "```py\n    List some best practices for deploying an online banking system during the deployment phase of the SSDLC.\n    ```", "```py\n    Describe the main activities during the maintenance phase of an online banking system and how they can be managed effectively.\n    ```", "```py\n    You are an experienced cybersecurity consultant specializing in secure software development.\n    ```", "```py\n    Describe a project for developing a secure medical record management system. Include details about the type of software, its purpose, intended users, and the environments in which it will be deployed.\n    ```", "```py\n    Given the project description, list potential security threats and vulnerabilities that should be considered.\n    ```", "```py\n    Based on the identified threats and vulnerabilities, generate a list of security requirements that the software must meet to mitigate these threats.\n    ```", "```py\n    Provide additional security requirements that follow general best practices in secure software development, regardless of the specific project details.\n    ```", "```py\n    Prioritize the generated security requirements based on their impact on the security of the software and the consequences of not meeting them.\n    ```", "```py\n    You are a veteran software engineer with extensive experience in secure coding practices, particularly in the healthcare sector.\n    ```", "```py\n    Provide a general overview of secure coding and why it's important in healthcare software development.\n    ```", "```py\n    What are the key secure coding practices to follow when developing healthcare software in Python?\n    ```", "```py\n    What guidelines should be followed for secure input validation when developing a healthcare application?\n    ```", "```py\n    What are the best practices for secure error and exception handling in healthcare software development?\n    ```", "```py\n    What are the best practices for secure session management in healthcare web application development?\n    ```", "```py\n    What are the best practices to ensure secure coding when a healthcare application interacts with databases?\n    ```", "```py\n    What secure coding practices should be followed when managing network communications in healthcare software development?\n    ```", "```py\n    What approach should be taken to review code for security issues in a healthcare application, and what types of tests should be conducted to ensure security?\n    ```", "```py\n    You are a seasoned security engineer with extensive experience in reviewing code for potential security vulnerabilities.\n    ```", "```py\n    Please review the following PHP code snippet that interacts with a database. Identify any potential security flaws and suggest fixes:\n    $username = $_POST['username'];\n    $password = $_POST['password'];\n    $sql = \"SELECT * FROM users WHERE username = '$username' AND password = '$password'\";\n    $result = mysqli_query($conn, $sql);\n    ```", "```py\n    Please review the following JavaScript code snippet for a web application. Identify any potential security flaws and suggest fixes:\n    let userContent = document.location.hash.substring(1);\n    document.write(\"<div>\" + userContent + \"</div>\");\n    ```", "```py\n    Please review the following Python code snippet for a web application. Identify any potential security flaws and suggest fixes:\n    @app.route('/file', methods=['GET'])\n    def file():\n        file_name = request.args.get('file_name')\n        return send_from_directory(APP_ROOT, file_name)\n    ```", "```py\n    import openai\n    from openai import OpenAI\n    import os\n    import ast\n    from ast import NodeVisitor\n    import threading\n    import time\n    ```", "```py\n    openai.api_key = os.getenv(\"OPENAI_API_KEY\")\n    ```", "```py\n    class CodeVisitor(NodeVisitor):\n        ...\n    ```", "```py\n    def review_code(source_code: str) -> str:\n        ...\n        return response['choices'][0]['message']['content'].strip()\n    ```", "```py\n    def generate_test_script(testing_steps: str, output_file: str):\n        with open(output_file, 'w') as file:\n            file.write(testing_steps)\n    ```", "```py\n    # Change the name of the file to match your source\n    with open('source_code.py', 'r') as file:\n        source_code = file.read()\n        visitor = CodeVisitor()\n        visitor.visit(ast.parse(source_code))\n    ```", "```py\n    testing_steps = review_code(source_code)\n    ```", "```py\n    test_script_output_file = \"test_script.py\"\n    generate_test_script(testing_steps, test_script_output_file)\n    ```", "```py\n    def display_elapsed_time():\n        ...\n    ```", "```py\nimport openai\nfrom openai import OpenAI\nimport os\nimport ast\nfrom ast import NodeVisitor\nimport threading\nimport time\n# Set up the OpenAI API\nopenai.api_key = os.getenv(\"OPENAI_API_KEY\")\nclass CodeVisitor(NodeVisitor):\n    def __init__(self):\n        self.function_defs = []\n    def visit_FunctionDef(self, node):\n        self.function_defs.append(node.name)\n        self.generic_visit(node)\ndef review_code(source_code: str) -> str:\n    messages = [\n        {\"role\": \"system\", \"content\": \"You are a seasoned security engineer with extensive experience in reviewing code for potential security vulnerabilities.\"},\n        {\"role\": \"user\", \"content\": f\"Please review the following Python code snippet. Identify any potential security flaws and then provide testing steps:\\n\\n{source_code}\"}\n    ]\n\n    client = OpenAI()\n\n    response = client.chat.completions.create(\n        model=\"gpt-3.5-turbo\",\n        messages=messages,\n        max_tokens=2048,\n        n=1,\n        stop=None,\n        temperature=0.7,\n    )\n    return response.choices[0].message.content.strip()\ndef generate_test_script(testing_steps: str, output_file: str):\n    with open(output_file, 'w') as file:\n        file.write(testing_steps)\ndef display_elapsed_time():\n    start_time = time.time()\n    while not api_call_completed:\n        elapsed_time = time.time() - start_time\n        print(f\"\\rCommunicating with the API - Elapsed time: {elapsed_time:.2f} seconds\", end=\"\")\n        time.sleep(1)\n# Load the source code\n# Change the name of the file to match your source\nwith open('source_code.py', 'r') as file:\n    source_code = file.read()\nvisitor = CodeVisitor()\nvisitor.visit(ast.parse(source_code))\napi_call_completed = False\nelapsed_time_thread = threading.Thread(target=display_elapsed_time)\nelapsed_time_thread.start()\n# Handle exceptions during the API call\ntry:\n    testing_steps = review_code(source_code)\n    api_call_completed = True\n    elapsed_time_thread.join()\nexcept Exception as e:\n    api_call_completed = True\n    elapsed_time_thread.join()\n    print(f\"\\nAn error occurred during the API call: {e}\")\n    exit()\n# Save the testing steps as a Python test script\ntest_script_output_file = \"test_script.py\"\n# Handle exceptions during the test script generation\ntry:\n    generate_test_script(testing_steps, test_script_output_file)\n    print(\"\\nTest script generated successfully!\")\nexcept Exception as e:\n    print(f\"\\nAn error occurred during the test script generation: {e}\")\n```", "```py\n    import openai\n    from openai import OpenAI\n    import os\n    import re\n    ```", "```py\n    client = OpenAI()\n    openai.api_key = os.getenv(\"OPENAI_API_KEY\")\n    ```", "```py\n    with open('source_code.py', 'r') as file:\n        source_code = file.read()\n    ```", "```py\n    def review_code(source_code: str) -> str:\n        print(\"Reviewing the source code and adding comments.\\n\")\n        messages = [\n            {\"role\": \"system\", \"content\": \"You are a seasoned security engineer with extensive experience in reviewing code for potential security vulnerabilities.\"},\n            {\"role\": \"user\", \"content\": f\"Please review the following Python source code. Recreate it with helpful and meaningful comments... Souce code:\\n\\n{source_code}\"}\n        ]\n        response = client.chat.completions.create(\n            model=\"gpt-3.5-turbo\",\n            messages=messages,\n            max_tokens=2048,\n            n=1,\n            stop=None,\n            temperature=0.7,\n        )\n        return response.choices[0].message.content.strip()\n    ```", "```py\n    reviewed_code = review_code(source_code)\n    ```", "```py\n    with open('source_code_commented.py', 'w') as file:\n        reviewed_code = re.sub(r'^```", "```py$', '', reviewed_code)  # Cleanup\n        file.write(reviewed_code)\n    ```", "```py\n    print(\"The source code has been reviewed and the comments have been added to the file source_code_commented.py\")\n    Here's how the complete script should look.\n    import openai\n    from openai import OpenAI \n    import os\n    import re\n    client = OpenAI()\n    openai.api_key = os.getenv(\"OPENAI_API_KEY\")\n    # open a souce code file to provide a souce code file as the source_code parameter\n    with open('source_code.py', 'r') as file:\n        source_code = file.read()\n    def review_code(source_code: str) -> str:\n        print(f\"Reviewing the source code and adding comments.\\n\")\n        messages = [\n            {\"role\": \"system\", \"content\": \"You are a seasoned security engineer with extensive experience in reviewing code for potential security vulnerabilities.\"},\n            {\"role\": \"user\", \"content\": f\"Please review the following Python source code. Recreate it with helpful and meaningful comments that will help others identify what the code does. Be sure to also include comments for code/lines inside of the functions, where the use/functionality might be more complex Use the hashtag form of comments and not triple quotes. For comments inside of a function place the comments at the end of the corresponding line. For function comments, place them on the line before the function. Souce code:\\n\\n{source_code}\"}\n        ]\n        response = client.chat.completions.create(\n            model=\"gpt-3.5-turbo\",\n            messages=messages,\n            max_tokens=2048,\n            n=1,\n            stop=None,\n            temperature=0.7,\n        )\n        return response.choices[0].message.content.strip()\n    reviewed_code = review_code(source_code)\n    # Output the reviewed code to a file called source_code_commented.py\n    with open('source_code_commented.py', 'w') as file:\n        # Remove the initial code block markdown from the response\n        reviewed_code = re.sub(r'^```", "```py$', '', reviewed_code)\n        file.write(reviewed_code)\n    print(\"The source code has been reviewed and the comments have been added to the file source_code_commented.py\")\n    ```", "```py\n    import openai\n    from openai import OpenAI\n    import os\n    from docx import Document\n    openai.api_key = os.getenv(\"OPENAI_API_KEY\")\n    ```", "```py\n    design_doc_structure = [\n        \"Introduction\",\n        \"Software Architecture\",\n        \"Function Descriptions\",\n        \"Flow Diagrams\"\n    ]\n    user_guide_structure = [\n        \"Introduction\",\n        \"Installation Guide\",\n        \"Usage Guide\",\n        \"Troubleshooting\"\n    ]\n    ```", "```py\n    def generate_section_content(section_title: str, source_code: str) -> str:\n        messages = [\n            {\"role\": \"system\", \"content\": f\"You are an experienced software engineer with extensive knowledge in writing {section_title} sections for design documents.\"},\n            {\"role\": \"user\", \"content\": f\"Please generate a {section_title} section for the following Python code:\\n\\n{source_code}\"}\n        ]\n        client = OpenAI()\n\n        response = client.chat.completions.create(\n            model=\"gpt-3.5-turbo\",\n            messages=messages,\n            max_tokens=2048,\n            n=1,\n            stop=None,\n            temperature=0.7,\n        )\n        return response.choices[0].message.content.strip()\n    ```", "```py\n    with open('source_code.py', 'r') as file:\n        source_code = file.read()\n    ```", "```py\n    def write_to_word_document(document: Document, title: str, content: str):\n        document.add_heading(title, level=1)\n        document.add_paragraph(content)\n    ```", "```py\n    design_document = Document()\n    for section in design_doc_structure:\n        section_content = generate_section_content(section, source_code)\n        write_to_word_document(design_document, section, section_content)\n    design_document.save('DesignDocument.docx')\n    ```", "```py\nimport openai\nfrom openai import OpenAI \nimport os\nfrom docx import Document\n# Set up the OpenAI API\nopenai.api_key = os.getenv(\"OPENAI_API_KEY\")\n# Define the structure of the documents\ndesign_doc_structure = [\n    \"Introduction\",\n    \"Software Architecture\",\n    \"Function Descriptions\",\n    \"Flow Diagrams\"\n]\nuser_guide_structure = [\n    \"Introduction\",\n    \"Installation Guide\",\n    \"Usage Guide\",\n    \"Troubleshooting\"\n]\ndef generate_section_content(section_title: str, source_code: str) -> str:\n    messages = [\n        {\"role\": \"system\", \"content\": f\"You are an experienced software engineer with extensive knowledge in writing {section_title} sections for design documents.\"},\n        {\"role\": \"user\", \"content\": f\"Please generate a {section_title} section for the following Python code:\\n\\n{source_code}\"}\n    ]\n    client = OpenAI()\n\n    response = client.chat.completions.create(\n        model=\"gpt-3.5-turbo\",\n        messages=messages,\n        max_tokens=2048,\n        n=1,\n        stop=None,\n        temperature=0.7,\n    )\n    return response.choices[0].message.content.strip()\ndef write_to_word_document(document: Document, title: str, content: str):\n    document.add_heading(title, level=1)\n    document.add_paragraph(content)\n# Load the source code\nwith open('source_code.py', 'r') as file:\n    source_code = file.read()\n# Create the design document\ndesign_document = Document()\nfor section in design_doc_structure:\n    section_content = generate_section_content(section, source_code)\n    write_to_word_document(design_document, section, section_content)\ndesign_document.save('DesignDocument.docx')\n# Create the user guide\nuser_guide = Document()\nfor section in user_guide_structure:\n    section_content = generate_section_content(section, source_code)\n    write_to_word_document(user_guide, section, section_content)\nuser_guide.save('UserGuide.docx')\n```"]