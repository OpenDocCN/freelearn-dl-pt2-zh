["```py\nimport boto3\n# create CloudWatch client using boto3 library\ncloudwatch = boto3.client('cloudwatch')\n# metrics data to ingest\ndata_metrics=[\n    {\n       'MetricName': 'gross_merchandise_value',\n       'Dimensions': [\n          {\n             'Name': 'num_goods_sold',\n             'Value': '369'\n          } ],\n       'Unit': 'None',\n       'Value': 900000.0\n    } ]\n# ingest the data for monitoring \ncloudwatch.put_metric_data(\n    MetricData=data_metrics, # data for metrics \n    Namespace='ECOMMERCE/Revenue' # namespace to separate domain/projects)\n```", "```py\nimport sagemaker\n# IAM role of the notebook\nrole_exec=sagemaker.get_execution_role()\n# a sagemaker session object\nsag_sess=sagemaker.session()\n```", "```py\nimport sagemaker\nfrom sagemaker.estimator import Estimator\n# regex pattern for capturing error metrics \nreg_pattern_metrics=[\n   {'Name':'train:error','Regex':'Train_error=(.*?);'},\n   {'Name':'validation:error','Regex':'Valid_error=(.*?)'}]\n# Estimator instance for model training\nestimator = Estimator(\n   image_uri=...,\n   role=role_exec,\n   sagemaker_session=sag_sess,\n   instance_count=...,\n   instance_type=...,\n   metric_definitions=reg_pattern_metrics)\n```", "```py\n# inference.py\ndef output_handler(data, context):\n    # retrieve the predictions\n    results=data.content\n    # data that will be ingested to CloudWatch\n    data_metrics=[\n       {\n          'MetricName': 'model_name',\n          'Dimensions': [\n             {\n                'Name': 'classify',\n                'Value': results\n              } ],\n          'Unit': 'None',\n          'Value': \"classify_applicant_risk\"\n      } ]\n    # print will ingest information into CloudWatch\n    print(data_metrics)\n```"]