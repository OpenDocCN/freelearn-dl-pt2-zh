["```py\nimport numpy \nfrom keras.datasets import mnist  \nimport matplotlib.pyplot as plt \nimport matplotlib.cm as cm\n```", "```py\ndef main(image, im_filter):\n      im = X_train[image]\n```", "```py\n      width = im.shape[0]       \n      height = im.shape[1]\n      imC = numpy.zeros((width-2, height-2))\n```", "```py\n      for row in range(1,width-1):\n          for col in range(1,height-1):\n              for i in range(len(im_filter[0])):\n                  for j in range(len(im_filter)):\n                      imC[row-1][col-1] += im[row-1+i][col-1+j]*im_filter[i][j]\n              if imC[row-1][col-1] > 255:\n                  imC[row-1][col-1] = 255\n              elif imC[row-1][col-1] < 0:\n                  imC[row-1][col-1] = 0 \n```", "```py\n      plt.imshow( im, cmap = cm.Greys_r )         \n      plt.show()\n      plt.imshow( imC/255, cmap = cm.Greys_r )       \n      plt.show()\n```", "```py\n    blur = [[1./9, 1./9, 1./9], [1./9, 1./9, 1./9], [1./9, 1./9, 1./9]]\n```", "```py\nif __name__ == '__main__':          \n    (X_train, Y_train), (X_test, Y_test) = mnist.load_data()\n    blur = [[1./9, 1./9, 1./9], [1./9, 1./9, 1./9], [1./9, 1./9, 1./9]]\n    main(3, blur)\n```", "```py\n    edges = [[1, 1, 1], [1, -8, 1], [1, 1, 1]]\n```", "```py\nimport numpy  \nimport theano  \nimport matplotlib.pyplot as plt \nimport theano.tensor as T\nfrom theano.tensor.nnet import conv\nimport skimage.data\nimport matplotlib.cm as cm\n```", "```py\ndepth = 4\nfilter_shape = (3, 3) \n\ninput = T.tensor4(name='input')  \n\nw_shape = (depth, 3, filter_shape[0], filter_shape[1]) \ndist = numpy.random.uniform(-0.2, 0.2, size=w_shape)\nW = theano.shared(numpy.asarray(dist, dtype=input.dtype), name = 'W')\nconv_output = conv.conv2d(input, W)   \noutput = T.nnet.sigmoid(conv_output)\nf = theano.function([input], output)\n```", "```py\nastronaut = skimage.data.astronaut()\nimg = numpy.asarray(astronaut, dtype='float32') / 255\nfiltered_img = f(img.transpose(2, 0, 1).reshape(1, 3, 512, 512))\n```", "```py\nplt.axis('off') \nplt.imshow(img) \nplt.show()  \nfor img in range(depth):\n    fig = plt.figure()   \n    plt.axis( 'off')   \n    plt.imshow(filtered_img[0, img, :, :, ], cmap = cm.gray)\n    plt.show()\n    filename = \"astro\" + str(img)\n    fig.savefig(filename, bbox_inches='tight')\n```", "```py\n    hidden_neurons = 400\n    epochs = 30\n```", "```py\nX_train = X_train.astype('float32')     \nX_test = X_test.astype('float32')     \nX_train /= 255     \nX_test /= 255\n```", "```py\nmodel.compile(loss='categorical_crossentropy', \n              metrics=['accuracy'], optimizer='adadelta')\n```", "```py\nmodel.add(Activation('relu'))\n```", "```py\nfrom keras.layers import Convolution2D, MaxPooling2D, Flatten\nhidden_neurons = 200\nX_train = X_train.reshape(60000, 28, 28, 1)     \nX_test = X_test.reshape(10000, 28, 28, 1)\nmodel.add(Convolution2D(32, (3, 3), input_shape=(28, 28, 1)))\nmodel.add(Activation('relu'))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Flatten())\n```", "```py\nmodel.add(Convolution2D(32, (3, 3))) \nmodel.add(Activation('relu'))\n```", "```py\nfrom keras.layers import Dropout\nmodel.add(Dropout(0.25))\n```", "```py\nimport numpy as np      \nnp.random.seed(0)  #for reproducibility\nfrom keras.datasets import mnist \nfrom keras.models import Sequential  \nfrom keras.layers import Dense, Activation, Convolution2D, MaxPooling2D, Flatten, Dropout  \nfrom keras.utils import np_utils\n\ninput_size = 784\nbatch_size = 100     \nhidden_neurons = 200     \nclasses = 10     \nepochs = 8          \n\n(X_train, Y_train), (X_test, Y_test) = mnist.load_data()          \nX_train = X_train.reshape(60000, 28, 28, 1)     \nX_test = X_test.reshape(10000, 28, 28, 1)          \nX_train = X_train.astype('float32')     \nX_test = X_test.astype('float32')     \nX_train /= 255     \nX_test /= 255               \nY_train = np_utils.to_categorical(Y_train, classes)     \nY_test = np_utils.to_categorical(Y_test, classes)              \nmodel = Sequential()\nmodel.add(Convolution2D(32, (3, 3), input_shape=(28, 28, 1)))             \nmodel.add(Activation('relu'))                     \nmodel.add(Convolution2D(32, (3, 3)))\nmodel.add(Activation('relu'))                  \nmodel.add(MaxPooling2D(pool_size=(2, 2)))             \nmodel.add(Dropout(0.25))                  \nmodel.add(Flatten())         \nmodel.add(Dense(hidden_neurons))\nmodel.add(Activation('relu'))       \nmodel.add(Dense(classes))       \nmodel.add(Activation('softmax'))\nmodel.compile(loss='categorical_crossentropy',             \n              metrics=['accuracy'], optimizer='adadelta')    \nmodel.fit(X_train, Y_train, batch_size=batch_size,        \n        epochs=epochs, validation_split = 0.1, verbose=1) \nscore = model.evaluate(X_train, Y_train, verbose=1)\nprint('Train accuracy:', score[1])                           \nscore = model.evaluate(X_test, Y_test, verbose=1) \nprint('Test accuracy:', score[1])\n```", "```py\n(X_train, Y_train), (X_test, Y_test) = cifar10.load_data()\n```", "```py\nmodel.add(Convolution2D(32, (3, 3), input_shape=(32, 32, 3)))\n```", "```py\nmodel.add(Convolution2D(64, (3, 3))) \nmodel.add(Activation('relu'))     \nmodel.add(Convolution2D(64, (3, 3)))     \nmodel.add(Activation('relu'))     \nmodel.add(MaxPooling2D(pool_size=(2, 2)))     \nmodel.add(Dropout(0.25))\n```", "```py\nindex = 0\nnumpy.set_printoptions(threshold='nan')     \nfor layer in model.layers:       \n    filename = \"conv_layer_\" + str(index)       \n    f1 = open(filename, 'w+')       \n    f1.write(repr(layer.get_weights()))       \n    f1.close()       \n    print (filename + \" has been opened and closed\")     \n    index = index+1\n```"]