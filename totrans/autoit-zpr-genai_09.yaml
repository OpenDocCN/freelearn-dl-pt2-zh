- en: '7'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Getting Started with Built-In Apps
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When you create your Zaps, you will specify what event you want your workflows
    to be triggered on, and the actions to take after that. You might find that there
    are occasions where you want to create conditions to stop your workflows from
    running unless they satisfy certain criteria or to run different actions depending
    on specific requirements. You might also want some of your actions to run only
    a certain amount of time after the workflow is triggered or to trigger at a certain
    time. Using Zapier’s built-in apps, we can apply conditional logic and run conditions
    on our workflows to achieve this.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will introduce the four built-in Zapier apps that allow
    you to either control run conditions or use conditional logic in workflows by
    filtering, delaying, scheduling, or choosing pathways. We will give descriptions
    of their functionality and provide practical tips on how to use them.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will cover the following key topics in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Filter by Zapier – applying conditional logic to your Zaps
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Paths by Zapier – adding branching logic to your Zaps
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Delay by Zapier – adding delays to your Zaps
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Schedule by Zapier – scheduling your Zaps to run at intervals
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exercise – creating a multi-step Zap with a scheduled trigger, search action,
    filter, path, and delay
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Once you have worked through each of these topics, you will know how to apply
    conditional and branching logic and add delays or schedules to your workflows.
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To work through the content in this chapter, you will need access to a Zapier
    account. To build multi-step Zaps and use filters, you will need to subscribe
    to the Zapier Starter plan as a minimum. To work through the *Paths by Zapier
    – adding branching logic to your Zaps* section, you will need access to a Professional
    plan or higher to be able to use the Paths by Zapier app.
  prefs: []
  type: TYPE_NORMAL
- en: Filter by Zapier – applying conditional logic to your Zaps
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once your workflows have been triggered, you may want to control whether they
    continue to run and follow through with subsequent action steps. This is useful
    for stopping your Zaps from running unless specific criteria from your trigger
    or previous action steps match the conditions you specify. We can use the “if
    this, then that” conditional logic that has been built into the Filter by Zapier
    built-in app to achieve this.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are a couple of examples of when you can use conditional logic in your
    Zaps:'
  prefs: []
  type: TYPE_NORMAL
- en: You might record details of all bills and their payments on a **Smartsheet**
    spreadsheet. These are a combination of bills that are paid automatically by a
    credit card and those requiring a transfer of bank funds to settle them. You mark
    a column called **Paid** with **Yes** or **No** accordingly. You may want to send
    an email to your accounts team when a new row has been added to your Smartsheet
    spreadsheet to notify them, but only if the bill requires payment (if the data
    in the **Paid** column is **No**).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You might want to add a copy of an email to `My Favorite Blog` label, and only
    want these emails to be added to Evernote.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In these scenarios, you can use the Filter by Zapier app to set conditional
    logic in your Zaps.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: For more inspiration and access to pre-built templates, you can review the Filter
    by Zapier built-in app profile page at [https://zapier.com/apps/filter/integrations](https://zapier.com/apps/filter/integrations).
  prefs: []
  type: TYPE_NORMAL
- en: Using filters in your Zaps is a smart way of controlling your automations.
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: Filters only count toward your monthly task usage when the data passes successfully,
    allowing the workflow to move on to the next action step. This is very important
    as having this feature available allows you to have more control over your task
    usage and to be savvier with your allocated task quota.
  prefs: []
  type: TYPE_NORMAL
- en: Now, let’s take a look at how to use Filter by Zapier.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up the Filter by Zapier app
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Filter by Zapier can only be used as an action event that you can customize
    by setting up rules to specify when your workflow should continue to the next
    steps. You can add the app anywhere after the trigger step and have multiple filters
    within a Zap.
  prefs: []
  type: TYPE_NORMAL
- en: Adding a filter step and customizing your rules
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Once you have added an action step, either by selecting the **Action** step
    or clicking on the **+** icon, and chosen **Filter by Zapier** as the app and
    **Only continue if…** as the action event, you can edit the fields in the **Filter
    Setup & Testing** section, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Choose field…**: Use the drop-down menu to choose a field from the previous
    steps to enter a dynamic data value. This is the value that you want the filter
    to check. As the value is dynamic, it will most likely change every time the Zap
    runs and will be used to decide whether the Zap should pass the filter step.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Choose condition…**: Use the drop-down menu to choose one condition (or logic)
    to cross-reference the dynamic value against a reference key. We will discuss
    filter conditions in detail in the next section.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Enter text or insert data…**: This field holds the data value that will be
    used as the reference value to check against the dynamic data value and condition.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For example, you might only want the workflow to continue if your dynamic value
    from a previous step is `10`. This is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: "![Figure 7.1 – \uFEFFOverview of setting up a filter with the Filter by Zapier\
    \ app](img/B18474_07_01.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 7.1 – Overview of setting up a filter with the Filter by Zapier app
  prefs: []
  type: TYPE_NORMAL
- en: Next, you can customize your filter so that it has multiple criteria using the
    **+ And** and **+ Or** buttons. Use **+ And** logic if you want your filter to
    pass only when two or more conditions are satisfied. Alternatively, use **+ Or**
    logic if you want your filter to pass if either of the requirements is satisfied.
    Then, click **Continue**.
  prefs: []
  type: TYPE_NORMAL
- en: Testing your filter
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Zapier will then test your conditions against sample data in the workflow.
    If the conditions pass, and the Zap would have continued, this will be indicated,
    as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: "![Figure 7.2 – \uFEFFOverview of a passed test filter in the Filter by Zapier\
    \ app](img/B18474_07_02.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 7.2 – Overview of a passed test filter in the Filter by Zapier app
  prefs: []
  type: TYPE_NORMAL
- en: 'If, however, the filter conditions do not pass, the Zap will be stopped. This
    will be indicated, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: "![Figure 7.3 – \uFEFFOverview of a stopped test filter in the Filter by Zapier\
    \ app](img/B18474_07_03.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 7.3 – Overview of a stopped test filter in the Filter by Zapier app
  prefs: []
  type: TYPE_NORMAL
- en: You can alter your conditions accordingly or click the **Close** button to continue,
    then proceed to add one or more action steps. In either case, if you click on
    the down arrow icon, you will be shown what item(s) matched or did not match,
    as indicated by the arrow in *Figure 7**.2*. This will help you validate your
    testing of the filter.
  prefs: []
  type: TYPE_NORMAL
- en: Now, let’s explore the different types of filter conditions and use cases.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding filter conditions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Zapier has built multiple conditions into the app to allow you to work with
    various scenarios. When using the **Choose condition…** drop-down menu from the
    **Filter Setup & Testing** section, you will be presented with logic options involving
    five types of filter rules: **Text**, **Number**, **Date/time**, **Boolean**,
    and **Generic**. This is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: "![Figure 7.4 – \uFEFFOverview of the choice of logic options in the Filter\
    \ by Zapier app](img/B18474_07_04.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 7.4 – Overview of the choice of logic options in the Filter by Zapier
    app
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: Each condition will only work with the type of filter rule specified in parentheses
    unless it is generic.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s review each of these filter types in turn.
  prefs: []
  type: TYPE_NORMAL
- en: Text filters
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: There is a range of text filters to choose from, which can be case-sensitive
    depending on the type of rule that you use. The only case-sensitive rules are
    **(Text) Exactly matches** and **(Text) Does not** **exactly match**.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is a list of text filter options:'
  prefs: []
  type: TYPE_NORMAL
- en: '**(Text) Contains**: This condition checks whether the dynamic data value contains
    the reference value'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**(Text) Does not contain**: This condition is the opposite of **(Text) Contains**
    and checks that the dynamic data value does not contain the reference value'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**(Text) Exactly matches**: This condition checks that the dynamic data value
    matches the reference value exactly, character for character'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**(Text) Does not exactly match**: This condition checks that the dynamic data
    value does not match the reference value exactly, character for character'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**(Text) Is in**: This condition checks that the dynamic data value is in a
    specified list of reference values'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**(Text) Is not in**: This condition checks that the dynamic data value is
    not in a specified list of reference values'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**(Text) Starts with**: This condition checks that the dynamic data value starts
    with the reference value'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**(Text) Does not start with**: This condition checks that the dynamic data
    value does not start with the reference value'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**(Text) Ends with**: This condition checks that the dynamic data value ends
    with the reference value'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**(Text) Does not end with**: This condition checks that the dynamic data value
    does not end with the reference value'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Next, let’s take a look at number filters.
  prefs: []
  type: TYPE_NORMAL
- en: Number filters
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In [*Chapter 3*](B18474_03.xhtml#_idTextAnchor374), *Building Your First Automated
    Workflow (Zap)*, we discussed using number (integer) field types. Number filters
    work in the same way, and in them, you can only use numeric values, such as `9.5`
    or `334`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is a list of number filter options:'
  prefs: []
  type: TYPE_NORMAL
- en: '**(Number) Greater than**: This condition checks whether the dynamic data value
    is greater than the reference number value'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**(Number) Less than**: This condition checks whether the dynamic data value
    is less than the reference number value'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now, let’s review date/time filters.
  prefs: []
  type: TYPE_NORMAL
- en: Date/time filters
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In [*Chapter 3*](B18474_03.xhtml#_idTextAnchor374), *Building Your First Automated
    Workflow (Zap)*, we discussed using date/time field types. Date/time filters work
    in the same way, and you can use a variety of date/time formats but cannot use
    text such as `today` or `tomorrow at` `9 a.m.`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is a list of date/time filter options:'
  prefs: []
  type: TYPE_NORMAL
- en: '**(Date/time) After**: This condition checks whether the dynamic data value
    is after the reference date value'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**(Date/time) Before**: This condition checks whether the dynamic data value
    is before the reference date value'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**(Date/time) Equals**: This condition checks whether the dynamic data value
    is equal (identical) to the reference date value'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Next, let’s take a look at Boolean filters.
  prefs: []
  type: TYPE_NORMAL
- en: Boolean filters
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As we discussed in [*Chapter 3*](B18474_03.xhtml#_idTextAnchor374), *Building
    Your First Automated Workflow (Zap)*, Boolean values are either true or false.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is a list of Boolean filter options:'
  prefs: []
  type: TYPE_NORMAL
- en: '**(Boolean) Is true**: This condition checks whether the dynamic data value
    is true'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**(Boolean) Is false**: This condition checks whether the dynamic data value
    is false'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Finally, let’s review generic filters.
  prefs: []
  type: TYPE_NORMAL
- en: Generic filters
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Generic filters can be used with any type of field.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is a list of generic filter options:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Exists**: Checks whether a value exists (can be used with any type of field)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Does not exist**: Checks that a value doesn’t exist (can be used with any
    type of field)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You should now have a better understanding of how and when to use the Filter
    by Zapier app to apply conditional logic to your Zaps. Next, let’s dive into using
    branching logic in your Zaps with the Paths by Zapier built-in app.
  prefs: []
  type: TYPE_NORMAL
- en: Paths by Zapier – adding branching logic to your Zaps
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Paths by Zapier allows you to add branching logic to your Zaps. This means
    that you can allow different paths with different actions to run based on set
    criteria. This builds on what you learned about using Filter by Zapier and takes
    it one step further to allow you to create multi-step workflow automation pathways
    that run depending on what you have specified. Let’s look at a few examples of
    how you would use Paths by Zapier:'
  prefs: []
  type: TYPE_NORMAL
- en: You might be an online retailer with an e-commerce store, and you have various
    products that need to be processed in a slightly different way. Product A might
    be a digital product that needs to be sent for printing, shipping, and fulfillment
    with **Printful**. Product B might require assembly before shipping, and you need
    to notify the warehouse team by email, add a card to Trello, and print a shipping
    note.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You might have a **Gravity Forms** form on your website for customer service
    queries, and you allow customers to specify whether their question is related
    to training, technical issues, or billing. Each support query is dealt with by
    a different team in the business, so you might want each query to be routed to
    a different department by sending a Slack message to a department channel and
    assigning a task in **Asana** to all the members of that team.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In both of these examples, you can use Paths by Zapier to create conditions
    to allow each pathway to run only if those criteria were satisfied. To help you
    visualize what this might look like, I’ve created a simple workflow diagram that
    represents the second example previously:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.5 – A visualization of a workflow using Paths by Zapier](img/B18474_07_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.5 – A visualization of a workflow using Paths by Zapier
  prefs: []
  type: TYPE_NORMAL
- en: Paths by Zapier allows you to take the use of conditional logic in your Zaps
    to another level.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: For more inspiration and access to pre-built templates, you can review the Paths
    by Zapier built-in app profile page at [https://zapier.com/apps/paths/integrations](https://zapier.com/apps/paths/integrations).
  prefs: []
  type: TYPE_NORMAL
- en: Paths by Zapier is best used with simple logic; however, once you are more familiar
    with using it, the two main things to bear in mind are that you can only use Paths
    by Zapier at the end of a workflow and you are limited to creating three branches
    to start with. To get access to more branches, the account admin user will need
    to contact Zapier Support. With this being said, you can use multiple Paths by
    Zapier apps within each path to increase your range.
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: Zapier has a hard limit of 10 branches per path to ensure stability in the Zap
    editor and prevent long runtimes with potential timeouts. In addition, Zapier
    recommends only using three branches with three additional nested paths within
    each branch. The larger the Zap and the more complex it is, the greater the chance
    of validation problems and you may not be able to turn your Zap on. Typically,
    the lower the number of branches, the better the performance of the Zap. In general,
    the more complex your scenarios, the more risk there is for errors and data corruption.
    This is a reminder to keep it simple!
  prefs: []
  type: TYPE_NORMAL
- en: 'Creating complex pathways requires a logical assessment of what conditions
    are required for each, and it is recommended that you map them out. Here are a
    few things to consider when you’re thinking about using branching logic:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Map out your processes visually**: Refer to *Chapter 2*, *Preparing to Automate
    Your Processes*, and use process mapping techniques to visualize your process
    and strategize the conditional logic before creating paths'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Plan for the future**: Ask yourself whether there may be a possibility of
    other conditions being presented later, as this might require you to add additional
    paths later, bearing in mind the restriction on the number of branches you can
    add'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This will save you time in the long run if you get it right the first time around.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: If you are not subscribed to a Zapier plan that supports Paths by Zapier, you
    can use a Filter by Zapier step as a compromise. If your workflow is simple enough,
    you can replicate a process that would otherwise use Paths by Zapier. You can
    do this by creating multiple Zaps that run based on the same trigger and placing
    a filter directly after the trigger step. The filter in each workflow would have
    different filter criteria in each Zap, thus replicating those criteria specified
    in each branch filter of the Paths by Zapier step. Using this workaround is also
    appropriate if you need to add more than three unique pathways.
  prefs: []
  type: TYPE_NORMAL
- en: Now, let’s review how to set up the Paths by Zapier built-in app.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up the Paths by Zapier app
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To get started with using Paths by Zapier, add the Paths by Zapier app to the
    end of your workflow, by either selecting the **Action** step or clicking the
    **+** icon. You will be presented with two pathway options, named **Path A** and
    **Path B**. Clicking on the **Add New Path** button will allow you to create one
    further path branch.
  prefs: []
  type: TYPE_NORMAL
- en: 'You will also see the following options within each path block:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Three dots icon**: Clicking on this icon will show seven options in a drop-down
    menu:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Rename**: Selecting this option will allow you to rename the path'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Duplicate**: Selecting this option will allow you to duplicate the path'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Reorder**: Selecting this option will allow you to move the path to a different
    position'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Copy**: Selecting this option will allow you to make a copy of the path,
    add it to a clipboard, and then use either the **Paste below** or **Paste to**
    **replace** option'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Paste below**: Use this option in conjunction with the **Copy** option to
    paste a copy of the path below the selected path'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Paste to replace**: Use this option in conjunction with the **Copy** option
    to replace the selected path with the copy in the clipboard'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Delete**: Selecting this option will allow you to delete individual branch
    paths'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'This is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: "![Figure 7.6 – \uFEFFOverview of setting up branches using the Paths by Zapier\
    \ app](img/B18474_07_06.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 7.6 – Overview of setting up branches using the Paths by Zapier app
  prefs: []
  type: TYPE_NORMAL
- en: These functions work in the same way as described in the *Deleting, duplicating,*
    *pasting,* *reordering, and renaming steps in your Zaps* section of [*Chapter
    6*](B18474_06.xhtml#_idTextAnchor795), *Creating Multi-Step Zaps and Using* *Built-In
    Apps*.
  prefs: []
  type: TYPE_NORMAL
- en: Next, let’s review how to customize a path.
  prefs: []
  type: TYPE_NORMAL
- en: Customizing a path
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Choose one path to work on first, such as **Path A**, and click on that block
    to customize the filter conditions for that path. You will be presented with a
    pop-up screen, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: "![Figure 7.7 – \uFEFFOverview of customizing a Paths by Zapier step](img/B18474_07_07.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 7.7 – Overview of customizing a Paths by Zapier step
  prefs: []
  type: TYPE_NORMAL
- en: The name of the path can be customized by clicking on the **Name** section if
    required.
  prefs: []
  type: TYPE_NORMAL
- en: Next, let’s take a look at the navigational options from within a path.
  prefs: []
  type: TYPE_NORMAL
- en: Navigating within a path
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'You will be presented with the following navigational options in the top bar:'
  prefs: []
  type: TYPE_NORMAL
- en: '**House icon**: Clicking on this icon will take you back to the main view of
    the Zap editor, which shows your Zap steps.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Path menu**: Clicking on this menu will present a drop-down menu of paths
    and associated nested steps. You can navigate easily between your paths using
    this option.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**X icon**: Clicking on this icon closes the popup and takes you back to the
    main view of the Zap editor.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'This is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: "![Figure 7.8 – \uFEFFOverview of customizing a Paths by Zapier step](img/B18474_07_08.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 7.8 – Overview of customizing a Paths by Zapier step
  prefs: []
  type: TYPE_NORMAL
- en: Now, let’s review how to customize a path.
  prefs: []
  type: TYPE_NORMAL
- en: Customizing the first step in the path
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The first step of the path now represents a combination of a trigger and a filter
    for subsequent action steps in the branch.
  prefs: []
  type: TYPE_NORMAL
- en: 'Work through the following steps to customize your path:'
  prefs: []
  type: TYPE_NORMAL
- en: In the **Name** section, rename your path. This field is required for the Zap
    to run. It cannot be left blank.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: As we discussed in [*Chapter 3*](B18474_03.xhtml#_idTextAnchor374), *Building
    Your First Automated Workflow (Zap)*, naming steps in your Zaps will help you
    keep track of what each step of your workflow does and makes it easier to find
    steps and data results from those steps further down your workflow. This is equally
    important when you’re using Paths by Zapier as naming each path properly can help
    you summarize your filter conditions. Then, click the **Continue** button.
  prefs: []
  type: TYPE_NORMAL
- en: Use the instructions we covered in the *Filter by Zapier – applying conditional
    logic to your Zaps* section to customize your path filter accordingly in the **Rules
    setup & testing** section. Then, click the **Continue** button to test the conditions
    against example data.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Alter your conditions accordingly or click the **Continue** button to continue.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can then proceed to add one or more action steps.
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: Conditional logic should be applied carefully. Assess your logic carefully to
    ensure that you do not accidentally allow more than one path to run because of
    the way you have set your filters. You could, of course, apply this logic deliberately.
    For example, you could set your Path A filter to continue if *X* is less than
    10, your Path B filter to continue if *X* is less than 20, and your Path C filter
    to continue if *X* is greater than 20\. In this example, if *X* was equal to 5,
    then Path A and Path B would run but not Path C.
  prefs: []
  type: TYPE_NORMAL
- en: You should now have a better understanding of how and when to use the Paths
    by Zapier built-in app. Now, let’s take a look at how to add time delays to Zaps.
  prefs: []
  type: TYPE_NORMAL
- en: Delay by Zapier – adding delays to your Zaps
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Delay by Zapier app allows you to add time delays to subsequent action steps.
    This can be extremely useful in both simple and more complex workflows where you
    may want to prevent further action steps from running for a set period or until
    a specific time.
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: The maximum time a delayed task can be held is 1 month – that is, 31 days.
  prefs: []
  type: TYPE_NORMAL
- en: 'This app can only be used as an action step and added after a trigger step
    or between action steps to delay the running of subsequent action steps. The following
    action events can be used:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Delay** **For** (action)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Delay** **Until** (action)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Delay After** **Queue** (action)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let’s look at each.
  prefs: []
  type: TYPE_NORMAL
- en: The Delay For action event
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This action event waits for a set amount of time before running any further
    actions in the Zaps. Here are a few examples of how to use the Delay by Zapier
    **Delay For** action event:'
  prefs: []
  type: TYPE_NORMAL
- en: When a **Typeform** web form has been submitted, send an email with Gmail after
    a delay of 10 minutes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When a new row is added to a **Microsoft Excel** spreadsheet, add new tasks
    to Microsoft To Do after a delay of one hour
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let’s explore how to set up this action event.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up the Delay For action event
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Once you have added an action step, either by selecting the **Action** step
    or clicking on the **+** icon, and chosen **Delay by Zapier** as the app and **Delay
    For** as the action event, you can edit the fields in the **Set up action** section,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Time Delayed For (value)**: Enter a number with or without a decimal, as
    required by this decimal field type. The minimum delay you can add is one minute.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Time Delayed For (unit)**: Choose a unit of either minutes, hours, days,
    or weeks from the drop-down menu, or add dynamic data from previous steps using
    the **Custom** tab.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These are both required fields and must have values for the Zap to run.
  prefs: []
  type: TYPE_NORMAL
- en: 'An example of this is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: "![Figure 7.9 – \uFEFFOverview of customizing the Delay For action event](img/B18474_07_09.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 7.9 – Overview of customizing the Delay For action event
  prefs: []
  type: TYPE_NORMAL
- en: Click the **Continue** button to move to the **Test** section. You can then
    use the **Test** section to test this step or **Skip test**. Proceed to add one
    or more action steps after your delay step.
  prefs: []
  type: TYPE_NORMAL
- en: You should now be able to use the **Delay For** action event. Next, let’s have
    a look at the **Delay Until** action event.
  prefs: []
  type: TYPE_NORMAL
- en: The Delay Until action event
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This action event waits to run any further actions until a time or date you
    choose. Here are a few examples of how to use the Delay by Zapier **Delay Until**
    action event:'
  prefs: []
  type: TYPE_NORMAL
- en: When a task is completed in **Asana**, send a Slack message at 2 P.M. that day
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When an image or video has been added to **Instagram**, send a tweet on Twitter
    the next day at noon
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let’s explore how to set up this action event.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up the Delay Until action event
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Once you have added an action step, either by selecting the **Action** step
    or clicking on the **+** icon, and chosen **Delay by Zapier** as the app and **Delay
    Until** as the action event, you can edit the fields in the **Action** section,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Date/Time Delayed Until**: Use the date/time field type format examples we
    covered in [*Chapter 3*](B18474_03.xhtml#_idTextAnchor374), *Building Your First
    Automated Workflow (Zap)*, to enter a relative static date/time value for this
    field type or a dynamic date/time value from previous steps. For example, you
    may want to delay until a time specified in your trigger app, such as a due date.
    This is a required field and must have a value for the Zap to run.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**How Should We Handle Dates in The Past?**: This field controls how the delay
    will run if the **Date/Time Delayed Until** field value contains a date/time in
    the past. Choose an option from the drop-down menu to allow the delay task to
    continue if the value is either 15 minutes, 1 hour, or 1 day in the past, or to
    always continue regardless. The default is **Continue if it’s up to one** **day
    (default)**.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'An example of how to set up this action event is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: "![Figure 7.10 – \uFEFFOverview of customizing the Delay Until action event](img/B18474_07_10.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 7.10 – Overview of customizing the Delay Until action event
  prefs: []
  type: TYPE_NORMAL
- en: Click on the **Continue** button to move to the **Test** section. You can then
    use the **Test** section to test this step or **Skip test**. Proceed to add one
    or more action steps after your delay step.
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: When using times by themselves, if the time has already passed, the delay task
    will complete immediately, and subsequent actions will run. To prevent this from
    happening, you could add a Filter by Zapier step after the Schedule by Zapier
    **Delay Until** action step, where you can specify that you do not want the Zap
    to continue if the time the Zap triggers is older than the time you specify in
    your **Delay** **Until** step.
  prefs: []
  type: TYPE_NORMAL
- en: You should now be able to use the **Delay Until** action event. Next, let’s
    review the **Delay After Queue** action event.
  prefs: []
  type: TYPE_NORMAL
- en: The Delay After Queue action event
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This action event waits a specified amount of time to allow Zap runs to proceed
    one after each other rather than all at once before running any further actions
    in the Zaps. This is useful if a Zap triggers multiple times over a few seconds
    or multiple Zaps are likely to run in parallel with each other, and you only want
    them to run in a series. This option is often used to deal with **race conditions**
    (where an attempt is made to perform two or more operations at the same time,
    which is considered undesirable) or **rate limiting** (where your Zap may trigger
    multiple times over a short period). You can read more about rate limiting here:
    [https://help.zapier.com/hc/en-us/articles/8496181445261-Rate-limits-and-throttling-in-Zapier#webhook-throttling-0-3](https://help.zapier.com/hc/en-us/articles/8496181445261-Rate-limits-and-throttling-in-Zapier#webhook-throttling-0-3).'
  prefs: []
  type: TYPE_NORMAL
- en: The Zap will be delayed at that step for a set period before releasing the next
    bit of trigger information through the Zap. For example, you might want to perform
    a series of tasks when an opportunity changes stage in Salesforce; however, your
    Zap will trigger if multiple opportunities change stage at the same time when
    you do a bulk edit. You might want your Zap to run through completely before any
    new data runs through the Zap. You can prevent the Zap from running multiple times
    at the same time by using the Delay by Zapier **Delay After Queue** action event
    in a step directly after the trigger step to hold trigger data for a set period,
    such as 5 minutes, to allow the Zap the run through completely first.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: Estimate the time your Zap may take to run and add your queue time accordingly.
    For example, if your Zap is 20 steps long and each step takes 5 seconds to run,
    consider specifying your queue time as 5 minutes to account for the entire Zap
    to run.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s explore how to set up this action event.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up the Delay After Queue action event
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Once you have added an action step, either by selecting the **Action** step
    or clicking on the **+** icon, and chosen **Delay by Zapier** as the app and **Delay
    After Queue** as the action event, you can complete the fields in the **Action**
    section, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Queue Title**: Enter a title of up to 32 characters for the queue using static
    or dynamic data. This field is optional.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Time Delayed For (value)**: Enter a number with or without a decimal, as
    required by this decimal field type. The minimum delay you can add is one minute.
    This is a required field and must have a value for the Zap to run.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Time Delayed For (unit)**: Choose a unit of either minutes, hours, days,
    or weeks from the drop-down menu. This is a required field and must have a value
    for the Zap to run.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'An example of this is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: "![Figure 7.11 – \uFEFFOverview of customizing the Delay After Queue action\
    \ event](img/B18474_07_11.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 7.11 – Overview of customizing the Delay After Queue action event
  prefs: []
  type: TYPE_NORMAL
- en: Use the **Test** section to test this step and ensure your conditions will be
    met. Proceed to add one or more action steps after your delay step.
  prefs: []
  type: TYPE_NORMAL
- en: You should now have a better understanding of how and when to use the **Delay
    After Queue** action event, as well as the other Delay by Zapier built-in app
    action events.
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: If a Zap contains delay steps and has existing Zap runs that have not been completed
    because tasks are being held due to the delay, we recommend that you make edits
    to your Zap with caution. Publishing changes to a Zap that has active Zap runs
    with data held in a delay can prevent those runs from proceeding. Wait until your
    Zap has completed all held delay runs before making published changes.
  prefs: []
  type: TYPE_NORMAL
- en: As we have described, the Delay by Zapier built-in app is useful for adding
    time delays to your Zaps.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: For more inspiration and access to pre-built templates, you can review the Delay
    by Zapier built-in app profile page at [https://zapier.com/apps/delay/integrations](https://zapier.com/apps/delay/integrations).
  prefs: []
  type: TYPE_NORMAL
- en: Now, let’s dive into using the Schedule by Zapier app to allow your Zaps to
    run at scheduled intervals.
  prefs: []
  type: TYPE_NORMAL
- en: Schedule by Zapier – scheduling your Zaps to run at intervals
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Schedule by Zapier app allows you to run a workflow at set times, such as
    every hour, every day at a certain time, every week on a certain day and time,
    or every month on a certain day and time. This is useful if you want to automate
    a series of repetitive tasks at specified times rather than using a traditional
    event in an app to trigger the workflow. This Zapier built-in app can only be
    used as a trigger step at the start of your workflow, replacing a traditional
    trigger step. When specifying times in the Schedule by Zapier app, you can use
    custom values in the `hh:mm aa`, `hh:mm`, or `hhmm` formats – for example, `1:30
    pm`, `13:30`, or `1330`.
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: When specifying times, your Zaps will trigger based on your account or Zap timezone
    settings. If no timezone has been specified, the default runtime will be UTC (GMT
    +00:00). Use the instructions in [*Chapter 1*](B18474_01.xhtml#_idTextAnchor014),
    *Introduction to Business Process Automation with Zapier*, to change your account
    time zone settings and [*Chapter 4*](B18474_04.xhtml#_idTextAnchor520), *Managing
    Your Zaps*, for Zap settings.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can trigger your workflows to run as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Every** **Hour** (trigger)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Every** **Day** (trigger)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Every** **Week** (trigger)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Every** **Month** (trigger)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let’s look at each.
  prefs: []
  type: TYPE_NORMAL
- en: The Every Hour trigger event
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This trigger event can be used to start a workflow every hour on weekdays and
    weekends if you choose. This event is the most basic one out of the four scheduling
    trigger events.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are a few examples of how to use the Schedule by Zapier **Every Hour**
    trigger event:'
  prefs: []
  type: TYPE_NORMAL
- en: Add new tasks to **Basecamp 3** every hour
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Send a Slack message reminder every hour when calendar events are due
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let’s explore how to set up this trigger event.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up the Every Hour trigger event
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Once you have added a trigger step to the start of your workflow by selecting
    **1\. Trigger** and chosen **Schedule by Zapier** as the app and **Every Hour**
    as the trigger event, you can edit the **Trigger On Weekends?** field in the **Trigger**
    section. This field controls whether you want your Zap to be triggered on the
    weekends or not. Use the Boolean field drop-down menu to choose between **yes**
    if you want it to trigger on Saturdays and Sundays or **no** if you only want
    it to trigger from Monday to Friday.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: "![Figure 7.12 – \uFEFFOverview of customizing the Every Hour trigger event](img/B18474_07_12.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 7.12 – Overview of customizing the Every Hour trigger event
  prefs: []
  type: TYPE_NORMAL
- en: You can then use the **Test** section to test the trigger and retrieve some
    data to use in your action steps. Proceed to add one or more action steps to your
    Zap using data from this trigger step.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: You could use Filter by Zapier to allow your scheduled Zaps to continue if you
    only wanted them to run during business hours – for example, from 9 A.M. to 5
    P.M.
  prefs: []
  type: TYPE_NORMAL
- en: You should now be able to use the **Every Hour** trigger event in a workflow.
    Next, let’s review the **Every Day** trigger event.
  prefs: []
  type: TYPE_NORMAL
- en: The Every Day trigger event
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This trigger event can be used to start a workflow every day at a certain time.
    Here are a few examples of how to use the Schedule by Zapier **Every Day** trigger
    event:'
  prefs: []
  type: TYPE_NORMAL
- en: Add daily notes to **Zoho Notebook** at 9 A.M. every weekday
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Post a random GIF from GIPHY to a **Microsoft Teams** channel every day at 11
    A.M.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let’s explore how to set up this trigger event.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up the Every Day trigger event
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Once you have added a trigger step to the start of your workflow by selecting
    **1\. Trigger** and chosen **Schedule by Zapier** as the app and **Every Day**
    as the trigger event, you can edit the fields in the **Trigger** section, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Trigger On Weekends?**: As with the **Every Hour** trigger event, this field
    controls whether your Zap will trigger on the weekend days or not. Use the Boolean
    field drop-down menu to choose between **yes** if you want it to trigger on Saturdays
    and Sundays or **no** if you only want it to trigger from Monday to Friday.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`hh:mm aa`, `hh:mm`, or `hhmm` formats, such as `11:45`. This is a required
    field and must have a value for the Zap to run.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'This is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: "![Figure 7.13 – \uFEFFOverview of cus\uFEFFtomizing the Every Day trigger event](img/B18474_07_13.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 7.13 – Overview of customizing the Every Day trigger event
  prefs: []
  type: TYPE_NORMAL
- en: You can then use the **Test** section to test the trigger and retrieve some
    data to use in your action steps. Proceed to add one or more action steps to your
    Zap using data from this trigger step.
  prefs: []
  type: TYPE_NORMAL
- en: You should now be able to use the **Every Day** trigger event in a workflow.
    Next, let’s review the **Every Week** trigger event.
  prefs: []
  type: TYPE_NORMAL
- en: The Every Week trigger event
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This trigger event can be used to start a workflow every week on a day and
    time of your choice. Here are a few examples of how to use the Schedule by Zapier
    **Every Week** trigger event:'
  prefs: []
  type: TYPE_NORMAL
- en: Add new tasks to **MeisterTask** every week on a Monday at 8 A.M.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Send an SMS reminder to yourself every week on a Wednesday at 2 P.M.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let’s explore how to set up this trigger event.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up the Every Week trigger event
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Once you have added a trigger step to the start of your workflow by selecting
    **1\. Trigger** and chosen **Schedule by Zapier** as the app and **Every Week**
    as the trigger event, you can edit the fields in the **Trigger** section, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Day of the Week**: This field controls which day of the week your Zap will
    trigger. Use the drop-down menu to choose days from **Monday** to **Sunday**.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`hh:mm aa`, `hh:mm`, or `hhmm` format, such as `13:30`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Both these fields are required and must have a value for the Zap to run.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: "![Figure 7.14 – \uFEFFOverview of customizing the Every Week trigger event](img/B18474_07_14.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 7.14 – Overview of customizing the Every Week trigger event
  prefs: []
  type: TYPE_NORMAL
- en: You can then use the **Test** section to test the trigger and retrieve some
    data to use in your action steps. Proceed to add one or more action steps to your
    Zap using data from this trigger step.
  prefs: []
  type: TYPE_NORMAL
- en: You should now be able to use the **Every Week** trigger event in a workflow.
    Next, let’s review the **Every Month** trigger event.
  prefs: []
  type: TYPE_NORMAL
- en: The Every Month trigger event
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This trigger event can be used to start a workflow every month on a date and
    time of your choice. Here are a few examples of how to use the Schedule by Zapier
    **Every Month** trigger event:'
  prefs: []
  type: TYPE_NORMAL
- en: Send a monthly recurring invoice to a customer on the 15th day of every month
    at 9 A.M.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Send a reminder email to a customer and a follow-up task in **Todoist** on the
    first day of every month at 2 P.M.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let’s explore how to set up this trigger event.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up the Every Month trigger event
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Once you have added a trigger step to the start of your workflow by selecting
    **1\. Trigger** and chosen **Schedule by Zapier** as the app and **Every Month**
    as the trigger event, you can edit the fields in the **Trigger** section, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Day of the Month**: This field controls which day of the month your Zap will
    trigger. Use the drop-down menu to choose dates from **1** to **31**.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`hh:mm aa`, `hh:mm`, or `hhmm` format, such as `9:15 p.m`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Both these fields are required and must have a value for the Zap to run.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.15 – Customizing the Every Month trigger event](img/B18474_07_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.15 – Customizing the Every Month trigger event
  prefs: []
  type: TYPE_NORMAL
- en: You can then use the **Test** section to test the trigger and retrieve some
    data to use in your action steps. Proceed to add one or more action steps to your
    Zap using data from this trigger step.
  prefs: []
  type: TYPE_NORMAL
- en: You should now have a better understanding of how and when to use the **Every
    Month** trigger event, as well as the other Schedule by Zapier built-in app trigger
    events.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: For more inspiration and access to pre-built templates, you can review the Schedule
    by Zapier built-in app profile page at [https://zapier.com/apps/schedule/integrations](https://zapier.com/apps/schedule/integrations).
  prefs: []
  type: TYPE_NORMAL
- en: Now, let’s review an example of how to create a multi-step Zap with a scheduled
    trigger, search action, filter, path, and delay.
  prefs: []
  type: TYPE_NORMAL
- en: Exercise – creating a multi-step Zap with a scheduled trigger, search action,
    filter, path, and delay
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can use one of the processes that you defined in [*Chapter 2*](B18474_02.xhtml#_idTextAnchor225),
    *Preparing to Automate Your Processes*, to work through the content in this section,
    if appropriate. Try to incorporate multiple apps in your workflow.
  prefs: []
  type: TYPE_NORMAL
- en: You can perform actions with existing data in your apps at a certain time by
    using Schedule by Zapier as a trigger, adding a search action step to find existing
    data in an app, stopping your Zap from running if it doesn’t meet certain conditions,
    delaying your workflow for a specified amount of time, and then adding branching
    logic if the scenarios you need to run differ. For example, you might use an Airtable
    base to collaborate with your **social media manager** (**SMM**) for social media
    posting. When the SMM adds a post to the base record, you approve it or reject
    it. You may want to add new posts to a Facebook group and a LinkedIn company page
    every weekday at 9 A.M., but only if the post has been approved. As Facebook and
    LinkedIn require slightly different formatting, you may also need to use different
    logic in your workflows. You also want to reshare the LinkedIn company post on
    your personal page, but only two hours later, as you know your personal page connections
    are more likely to engage with your posts at that time.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is an example of a workflow you could build to automate this process:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Trigger**: Add the Schedule by Zapier **Every Day** event trigger to run
    on weekdays at 9 P.M.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Action**: Add a **Find Record** search action to search Airtable base records
    for the date. Only allow the Zap to continue if a record is found.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Action**: Add a filter with Filter by Zapier to only allow the Zap to continue
    if the **Approved** field is marked as **Yes.**.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Action**: Add two branches in Paths by Zapier, where **Path A** will continue
    only if the **Platform** field is **Facebook** and **Path B** will continue only
    if the **Platform** field is **LinkedIn**.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Action – Path A**: Add a **Post Message** action to **Facebook Groups**.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Action – Path B**: Add a **Create Company Update** action event to **LinkedIn**.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Action – Path B**: Add a Delay by Zapier **Delay For** action step where
    you specify the delay of 2 hours. You could also use the **Delay Until** action
    event to specify the runtime as 11 A.M.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Action – Path B**: Add a **Create Share Update** action event to LinkedIn.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Unfortunately, Zapier does not allow you to share Zap templates with Paths by
    Zapier steps, so we’re unable to share a Zap template with you. Try building out
    a similar process by repeating this exercise for any appropriate processes that
    you have documented and that would benefit from automation.
  prefs: []
  type: TYPE_NORMAL
- en: You should now have a better understanding of how and when to use filters, paths,
    schedules, and delays in your Zaps.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we introduced four commonly used Zapier built-in apps to help
    you add conditional logic and run conditions to your workflows. First, we covered
    how to use conditional logic in our workflows by using the Filter by Zapier app.
    Next, we reviewed how to use branching logic with the Paths by Zapier app. Then,
    we explored how to use time delays in Zaps using the Delay by Zapier app, and
    how to schedule our workflows to run at specific times by using the Schedule by
    Zapier app. Lastly, we went through an exercise to demonstrate the use of scheduled
    triggers, search actions, filters, paths, and delays.
  prefs: []
  type: TYPE_NORMAL
- en: You now have a better understanding of how to use filters, paths, delays, and
    schedules in your workflow automations.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, you will learn about the four communication-specific built-in
    Zapier apps; we will give descriptions of their functionality and provide practical
    tips on how to use them.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Do filters and paths count toward task usage?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Is the Paths by Zapier built-in app available with the Starter plan?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the longest time that a delayed task can be held for?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What built-in app can you use as a trigger in your Zap if you want to send a
    weather report to yourself every day at 10 A.M.?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
