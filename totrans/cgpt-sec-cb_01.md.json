["```py\n    PS D:\\GPT\\ChatGPT for Cybersecurity Cookbook> python .\\my_ip.py\n    Your public IP address is: ![Blur IP Address](img/Figure_1.14_B21091.png)\n    Your local network IP address is: 192.168.1.105\n    ```", "```py\n    You are a cybersecurity expert with 20 years of experience. Explain the importance of multi-factor authentication (MFA) in securing online accounts, to an executive audience.\n    ```", "```py\n    You are a CISO with 30 years of experience. What are the top cybersecurity risks businesses should be aware of?\n    ```", "```py\n    You are an ethical hacker. Explain how a penetration test can help improve an organization's security posture.\n    ```", "```py\n    You are a network administrator. What measures do you take to secure your organization's network?\n    ```", "```py\n    You are a cybersecurity consultant. What additional recommendations do you have for the network administrator to further enhance network security?\n    ```", "```py\n    Create an analysis report of the WannaCry Ransomware Attack as it relates to the cyber kill chain, using the following format:\n    # Threat Report\n    ## Overview\n    - **Threat Name:**\n    - **Date of Occurrence:**\n    - **Industries Affected:**\n    - **Impact:**\n    ## Cyber Kill Chain Analysis\n    1\\. **Kill chain step 1:**\n    2\\. **Kill chain step 2:**\n    3\\. …\n    ## Mitigation Recommendations\n    - *Mitigation recommendation 1*\n    - *Mitigaiton recommendation 2*\n    …\n    ```", "```py\n    Create a table comparing five different security controls. The table should have the following columns: Control Name, Description, Implementation Cost, Maintenance Cost, Effectiveness, and Ease of Implementation.\n    ```", "```py\n    echo 'export OPENAI_API_KEY=\"your_api_key\"' >> ~/.bashrc\n    ```", "```py\n    import os\n    # Access the OpenAI API key from the environment variable\n    api_key = os.environ[\"OPENAI_API_KEY\"]\n    ```", "```py\n    pip install openai\n    ```", "```py\n    import openai\n    from openai import OpenAI\n    import os\n    ```", "```py\n    openai.api_key = os.getenv(\"OPENAI_API_KEY\")\n    ```", "```py\n    client = OpenAI()\n    def get_chat_gpt_response(prompt):\n      response = client.chat.completions.create(\n        model=\"gpt-3.5-turbo\",\n        messages=[{\"role\": \"user\", \"content\": prompt}],\n        max_tokens=2048,\n        temperature=0.7\n      )\n      return response.choices[0].message.content.strip()\n    ```", "```py\n    prompt = \"Explain the difference between symmetric and asymmetric encryption.\"\n    response_text = get_chat_gpt_response(prompt)\n    print(response_text)\n    ```", "```py\n    {\n      'id': 'example_id',\n      'object': 'text.completion',\n      'created': 1234567890,\n      'model': 'chat-3.5-turbo',\n      'usage': {'prompt_tokens': 12, 'completion_tokens': 89, 'total_tokens': 101},\n      'choices': [\n        {\n          'text': ' Symmetric encryption uses the same key for both encryption and decryption, while asymmetric encryption uses different keys for encryption and decryption, typically a public key for encryption and a private key for decryption. This difference in key usage leads to different security properties and use cases for each type of encryption.',\n          'index': 0,\n          'logprobs': None,\n          'finish_reason': 'stop'\n        }\n      ]\n    }\n    ```", "```py\n    Symmetric encryption uses the same key for both encryption and decryption, while asymmetric encryption uses different keys for encryption and decryption, typically a public key for encryption and a private key for decryption. This difference in key usage leads to different security properties and use cases for each type of encryption.\n    ```", "```py\n    def open_file(filepath):\n        with open(filepath, 'r', encoding='UTF-8') as infile:\n            return infile.read()\n    ```", "```py\n    prompt = open_file(\"prompt.txt\")\n    ```", "```py\n    Explain the difference between symmetric and asymmetric encryption.\n    ```", "```py\n    openai.api_key = open_file('openai-key.txt')\n    ```", "```py\n    import openai\n    from openai import OpenAI\n    def open_file(filepath):\n        with open(filepath, 'r', encoding='UTF-8') as infile:\n            return infile.read()\n    client = OpenAI()\n    def get_chat_gpt_response(prompt):\n      response = client.chat.completions.create(\n        model=\"gpt-3.5-turbo\",\n        messages=[{\"role\": \"user\", \"content\": prompt}],\n        max_tokens=2048,\n        temperature=0.7\n      )\n      return response.choices[0].message.content.strip()\n    openai.api_key = open_file('openai-key.txt')\n    prompt = open_file(\"prompt.txt\")\n    response_text = get_chat_gpt_response(prompt)\n    print(response_text)\n    ```", "```py\n    from openai import OpenAI\n    ```", "```py\n    def open_file(filepath):\n        with open(filepath, 'r', encoding='UTF-8') as infile:\n            return infile.read()\n    ```", "```py\n    openai.api_key = open_file('openai-key.txt')\n    ```", "```py\n    client = OpenAI()\n    def get_chat_gpt_response(prompt):\n      response = client.chat.completions.create(\n        model=\"gpt-3.5-turbo\",\n        messages=[{\"role\": \"user\", \"content\": prompt}],\n        max_tokens=600,\n        temperature=0.7\n      )\n      text = response.choices[0].message.content.strip()\n      return text\n    ```", "```py\n    file = input(\"ManPageGPT> $ Enter the name of a tool: \")\n    feed = open_file(file)\n    ```", "```py\n    prompt = open_file(\"prompt.txt\").replace('<<INPUT>>', feed)\n    ```", "```py\n    Provide the manual-page output for the following tool. Provide the output exactly as it would appear in an actual Linux terminal and nothing else before or after the manual-page output.\n    <<INPUT>>\n    ```", "```py\n    analysis = get_chat_gpt_response(prompt)\n    print(analysis)\n    ```", "```py\n    import openai\n    from openai import OpenAI\n    def open_file(filepath):\n        with open(filepath, 'r', encoding='UTF-8') as infile:\n            return infile.read()\n    openai.api_key = open_file('openai-key.txt')\n    client = OpenAI()\n    def get_chat_gpt_response(prompt):\n      response = client.chat.completions.create(\n        model=\"gpt-3.5-turbo\",\n        messages=[{\"role\": \"user\", \"content\": prompt}],\n        max_tokens=600,\n        temperature=0.7\n      )\n      text = response['choices'][0]['message']['content'].strip()\n      return text\n    feed = input(\"ManPageGPT> $ Enter the name of a tool: \")\n    prompt = open_file(\"prompt.txt\").replace('<<INPUT>>', feed)\n    analysis = get_chat_gpt_response(prompt)\n    print(analysis)\n    ```"]