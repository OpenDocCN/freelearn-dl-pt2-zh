["```py\nFROM ubuntu:16.04\n\nARG DEBIAN_FRONTEND=noninteractive\n\nRUN apt-get update && apt-get install -y --no-install-recommends \\\n curl \\\n git \\\n pkg-config \\\n rsync \\\n awscli \\\n wget \\\n && \\\n apt-get clean && \\\n rm -rf /var/lib/apt/lists/*\n\nRUN wget -nv https://storage.googleapis.com/golang/go1.12.1.linux-amd64.tar.gz && \\\n tar -C /usr/local -xzf go1.12.1.linux-amd64.tar.gz\n\nENV GOPATH /home/ubuntu/go\n\nENV GOROOT /usr/local/go\n\nENV PATH $PATH:$GOROOT/bin\n\nRUN /usr/local/go/bin/go version && \\\n echo $GOPATH && \\\n echo $GOROOT\n\nRUN git clone https://github.com/PacktPublishing/Hands-On-Deep-Learning-with-Go\n\nRUN go get -v gorgonia.org/gorgonia && \\\n go get -v gorgonia.org/tensor && \\\n go get -v gorgonia.org/dawson && \\\n go get -v github.com/gogo/protobuf/gogoproto && \\\n go get -v github.com/golang/protobuf/proto && \\\n go get -v github.com/google/flatbuffers/go && \\\n go get -v .\n\nWORKDIR /\n\nADD staging/ /app\n\nWORKDIR /app\n\nCMD [\"/bin/sh\", \"model_wrapper.sh\"]\n```", "```py\ncpu-image:\n mkdir -p staging/\n cp model_wrapper.sh staging/\n docker build --no-cache -t \"ACCOUNTID.dkr.ecr.ap-southeast-2.amazonaws.com/$(MODEL_CONTAINER):$(VERSION_TAG)\" .\n rm -rf staging/\n\ncpu-push: cpu-image\n docker push \"ACCOUNTID.dkr.ecr.ap-southeast-2.amazonaws.com/$(MODEL_CONTAINER):$(VERSION_TAG)\"\n\n```", "```py\napiVersion: kops/v1alpha2\nkind: Cluster\nmetadata:\n  creationTimestamp: 2018-05-01T12:11:24Z\n  name: $NAME\nspec:\n  api:\n    loadBalancer:\n      type: Public\n  authorization:\n    rbac: {}\n  channel: stable\n  cloudProvider: aws\n  configBase: $KOPS_STATE_STORE/$NAME\n  etcdClusters:\n  - etcdMembers:\n    - instanceGroup: master-$ZONE\n      name: b\n    name: main\n  - etcdMembers:\n    - instanceGroup: master-$ZONE\n      name: b\n    name: events\n  iam:\n    allowContainerRegistry: true\n    legacy: false\n  kubernetesApiAccess:\n  - 0.0.0.0/0\n  kubernetesVersion: 1.9.3\n  masterInternalName: api.internal.$NAME\n  masterPublicName: api.hodlgo.$NAME\n  networkCIDR: 172.20.0.0/16\n  networking:\n    kubenet: {}\n  nonMasqueradeCIDR: 100.64.0.0/10\n  sshAccess:\n  - 0.0.0.0/0\n  subnets:\n  - cidr: 172.20.32.0/19\n    name: $ZONE\n    type: Public\n    zone: $ZONE\n  topology:\n    dns:\n      type: Public\n    masters: public\n    nodes: public\n```", "```py\napiVersion: kops/v1alpha2\nkind: InstanceGroup\nmetadata:\n  creationTimestamp: 2018-05-01T12:11:25Z\n  labels:\n    kops.k8s.io/cluster: $NAME\n  name: master-$ZONE\nspec:\n  image: kope.io/k8s-1.8-debian-jessie-amd64-hvm-ebs-2018-02-08\n  machineType: $MASTERTYPE\n  maxSize: 1\n  minSize: 1\n  nodeLabels:\n    kops.k8s.io/instancegroup: master-$ZONE\n  role: Master\n  subnets:\n  - $ZONE\n```", "```py\napiVersion: kops/v1alpha2\nkind: InstanceGroup\nmetadata:\n  creationTimestamp: 2018-05-01T12:11:25Z\n  labels:\n    kops.k8s.io/cluster: $NAME\n  name: nodes-$ZONE\nspec:\n  image: kope.io/k8s-1.8-debian-jessie-amd64-hvm-ebs-2018-02-08\n  machineType: $SLAVETYPE\n  maxSize: $SLAVES\n  minSize: $SLAVES\n  nodeLabels:\n    kops.k8s.io/instancegroup: nodes-$ZONE\n  role: Node\n  subnets:\n  - $ZONE\n```", "```py\n#brew install kops\n==> Installing dependencies for kops: kubernetes-cli\n==> Installing kops dependency: kubernetes-cli\n==> Downloading https://homebrew.bintray.com/bottles/kubernetes-cli-1.14.2.mojave.bottle.tar.gz\n==> Downloading from https://akamai.bintray.com/85/858eadf77396e1acd13ddcd2dd0309a5eb0b51d15da275b491\n######################################################################## 100.0%\n==> Pouring kubernetes-cli-1.14.2.mojave.bottle.tar.gz\n==> Installing kops\n==> Downloading https://homebrew.bintray.com/bottles/kops-1.12.1.mojave.bottle.tar.gz\n==> Downloading from https://akamai.bintray.com/86/862c5f6648646840c75172e2f9f701cb590b04df03c38716b5\n######################################################################## 100.0%\n==> Pouring kops-1.12.1.mojave.bottle.tar.gz\n==> Caveats\nBash completion has been installed to:\n /usr/local/etc/bash_completion.d\n\nzsh completions have been installed to:\n /usr/local/share/zsh/site-functions\n==> Summary\n /usr/local/Cellar/kops/1.12.1: 5 files, 139.2MB\n==> Caveats\n==> kubernetes-cli\nBash completion has been installed to:\n /usr/local/etc/bash_completion.d\n\nzsh completions have been installed to:\n /usr/local/share/zsh/site-functions\n==> kops\nBash completion has been installed to:\n /usr/local/etc/bash_completion.d\n\nzsh completions have been installed to:\n /usr/local/share/zsh/site-functions\n\n```", "```py\n#!/bin/bash\n\n# AWS vars\nexport BUCKET_NAME=\"hodlgo-models\"\nexport MASTERTYPE=\"m3.medium\"\nexport SLAVETYPE=\"t2.medium\"\nexport SLAVES=\"2\"\nexport ZONE=\"ap-southeast-2b\"\n\n# K8s vars\nexport NAME=\"hodlgo.k8s.local\"\nexport KOPS_STATE_STORE=\"s3://hodlgo-cluster\"\nexport PROJECT=\"hodlgo\"\nexport CLUSTER_NAME=$PROJECT\n\n# Docker vars\nexport VERSION_TAG=\"0.1\"\nexport MODEL_CONTAINER=\"hodlgo-model\"\n```", "```py\n#!/bin/bash\n\n# Unset them vars\n\nunset BUCKET_NAME\nunset MASTERTYPE\nunset SLAVETYPE\nunset SLAVES\nunset ZONE\n\nunset NAME\nunset KOPS_STATE_STORE\n\nunset PROJECT\nunset CLUSTER_NAME\n\nunset VERSION_TAG\nunset MODEL_CONTAINER\n```", "```py\n#!/bin/bash\n\n## Bring up the cluster with kops\n\nset -e\n\necho \"Bringing up Kubernetes cluster\"\necho \"Using Cluster Name: ${CLUSTER_NAME}\"\necho \"Number of Nodes: ${SLAVES}\"\necho \"Using Zone: ${ZONE}\"\necho \"Bucket name: ${BUCKET_NAME}\"\n\nexport PARALLELISM=\"$((4 * ${SLAVES}))\"\n\n# Includes ugly workaround because kops is unable to take stdin as input to create -f, unlike kubectl\ncat k8s_cluster.yaml | envsubst > k8s_cluster-edit.yaml && kops create -f k8s_cluster-edit.yaml\ncat k8s_master.yaml | envsubst > k8s_master-edit.yaml && kops create -f k8s_master-edit.yaml\ncat k8s_nodes.yaml | envsubst > k8s_nodes-edit.yaml && kops create -f k8s_nodes-edit.yaml\n\nkops create secret --name $NAME sshpublickey admin -i ~/.ssh/id_rsa.pub\nkops update cluster $NAME --yes\n\necho \"\"\necho \"Cluster $NAME created!\"\necho \"\"\n\n# Cleanup from workaround\nrm k8s_cluster-edit.yaml\nrm k8s_master-edit.yaml\nrm k8s_nodes-edit.yaml\n```", "```py\n#!/bin/bash\n\n## Kill the cluster with kops\n\nset -e\n\necho \"Deleting cluster $NAME\"\nkops delete cluster $NAME --yes\n```", "```py\nexport AWS_DEFAULT_REGION=ap-southeast-2\nexport AWS_ACCESS_KEY_ID=\"<your key here>\"\nexport AWS_SECRET_ACCESS_KEY=\"<your secret here>\"\n```", "```py\naws ecr get-login --no-include-email\n```", "```py\ndocker login -u AWS -p xxxxx https://ACCOUNTID.dkr.ecr.ap-southeast-2.amazonaws.com\n```", "```py\nsource vars.sh\n./cluster-up.sh\n```", "```py\nkops validate cluster\nValidating cluster hodlgo.k8s.local\n\nINSTANCE GROUPS\nNAME ROLE MACHINETYPE MIN MAX SUBNETS\nmaster-ap-southeast-2a Master c4.large 1 1 ap-southeast-2\nnodes Node t2.medium 2 2 ap-southeast-2\n\nNODE STATUS\nNAME ROLE READY\nip-172-20-35-114.ec2.internal node True\nip-172-20-49-22.ec2.internal master True\nip-172-20-64-133.ec2.internal node True\n```", "```py\n#!/bin/bash\n\n# envsubst doesn't exist for OSX. needs to be brew-installed\n# via gettext. Should probably warn the user about that.\ncommand -v envsubst >/dev/null 2>&1 || {\n  echo >&2 \"envsubst is required and not found. Aborting\"\n  if [[ \"$OSTYPE\" == \"darwin\"* ]]; then\n    echo >&2 \"------------------------------------------------\"\n    echo >&2 \"If you're on OSX, you can install with brew via:\"\n    echo >&2 \" brew install gettext\"\n    echo >&2 \" brew link --force gettext\"\n  fi\n  exit 1;\n}\n\ncat ${SCRIPT_DIR}/model.yaml | envsubst | kubectl apply -f -\n\n```"]