["```py\nimport numpy as np\nclass Perceptron:\n    \"\"\"Perceptron classifier.\n\n    Parameters\n    ------------\n    eta : float\n      Learning rate (between 0.0 and 1.0)\n    n_iter : int\n      Passes over the training dataset.\n    random_state : int\n      Random number generator seed for random weight \n      initialization.\n\n    Attributes\n    -----------\n    w_ : 1d-array\n      Weights after fitting.\n    b_ : Scalar\n      Bias unit after fitting.\n    errors_ : list\n      Number of misclassifications (updates) in each epoch.\n\n    \"\"\"\n    def __init__(self, eta=0.01, n_iter=50, random_state=1):\n        self.eta = eta\n        self.n_iter = n_iter\n        self.random_state = random_state\n\n    def fit(self, X, y):\n        \"\"\"Fit training data.\n\n        Parameters\n        ----------\n        X : {array-like}, shape = [n_examples, n_features]\n          Training vectors, where n_examples is the number of \n          examples and n_features is the number of features.\n        y : array-like, shape = [n_examples]\n          Target values.\n\n        Returns\n        -------\n        self : object\n\n        \"\"\"\n        rgen = np.random.RandomState(self.random_state)\n        self.w_ = rgen.normal(loc=0.0, scale=0.01,\n                              size=X.shape[1])\n        self.b_ = np.float_(0.)\n        self.errors_ = []\n\n        for _ in range(self.n_iter):\n            errors = 0\n            for xi, target in zip(X, y):\n                update = self.eta * (target - self.predict(xi))\n                self.w_ += update * xi\n                self.b_ += update\n                errors += int(update != 0.0)\n            self.errors_.append(errors)\n        return self\n\n    def net_input(self, X):\n        \"\"\"Calculate net input\"\"\"\n        return np.dot(X, self.w_) + self.b_\n\n    def predict(self, X):\n        \"\"\"Return class label after unit step\"\"\"\n        return np.where(self.net_input(X) >= 0.0, 1, 0) \n```", "```py\n>>> v1 = np.array([1, 2, 3])\n>>> v2 = 0.5 * v1\n>>> np.arccos(v1.dot(v2) / (np.linalg.norm(v1) *\n...           np.linalg.norm(v2)))\n0.0 \n```", "```py\n>>> import os\n>>> import pandas as pd\n>>> s = 'https://archive.ics.uci.edu/ml/'\\\n...     'machine-learning-databases/iris/iris.data'\n>>> print('From URL:', s)\nFrom URL: https://archive.ics.uci.edu/ml/machine-learning-databases/iris/iris.data\n>>> df = pd.read_csv(s,\n...                  header=None,\n...                  encoding='utf-8')\n>>> df.tail() \n```", "```py\ndf = pd.read_csv(\n  'https://archive.ics.uci.edu/ml/'\n  'machine-learning-databases/iris/iris.data',\n  header=None, encoding='utf-8') \n```", "```py\ndf = pd.read_csv(\n  'your/local/path/to/iris.data',\n  header=None, encoding='utf-8') \n```", "```py\n>>> import matplotlib.pyplot as plt\n>>> import numpy as np\n>>> # select setosa and versicolor\n>>> y = df.iloc[0:100, 4].values\n>>> y = np.where(y == 'Iris-setosa', 0, 1)\n>>> # extract sepal length and petal length\n>>> X = df.iloc[0:100, [0, 2]].values\n>>> # plot data\n>>> plt.scatter(X[:50, 0], X[:50, 1],\n...             color='red', marker='o', label='Setosa')\n>>> plt.scatter(X[50:100, 0], X[50:100, 1],\n...             color='blue', marker='s', label='Versicolor')\n>>> plt.xlabel('Sepal length [cm]')\n>>> plt.ylabel('Petal length [cm]')\n>>> plt.legend(loc='upper left')\n>>> plt.show() \n```", "```py\n>>> ppn = Perceptron(eta=0.1, n_iter=10)\n>>> ppn.fit(X, y)\n>>> plt.plot(range(1, len(ppn.errors_) + 1),\n...          ppn.errors_, marker='o')\n>>> plt.xlabel('Epochs')\n>>> plt.ylabel('Number of updates')\n>>> plt.show() \n```", "```py\nfrom matplotlib.colors import ListedColormap\ndef plot_decision_regions(X, y, classifier, resolution=0.02):\n    # setup marker generator and color map\n    markers = ('o', 's', '^', 'v', '<')\n    colors = ('red', 'blue', 'lightgreen', 'gray', 'cyan')\n    cmap = ListedColormap(colors[:len(np.unique(y))])\n\n    # plot the decision surface\n    x1_min, x1_max = X[:, 0].min() - 1, X[:, 0].max() + 1\n    x2_min, x2_max = X[:, 1].min() - 1, X[:, 1].max() + 1\n    xx1, xx2 = np.meshgrid(np.arange(x1_min, x1_max, resolution),\n                           np.arange(x2_min, x2_max, resolution))\n    lab = classifier.predict(np.array([xx1.ravel(), xx2.ravel()]).T)\n    lab = lab.reshape(xx1.shape)\n    plt.contourf(xx1, xx2, lab, alpha=0.3, cmap=cmap)\n    plt.xlim(xx1.min(), xx1.max())\n    plt.ylim(xx2.min(), xx2.max())\n\n    # plot class examples\n    for idx, cl in enumerate(np.unique(y)):\n        plt.scatter(x=X[y == cl, 0],\n                    y=X[y == cl, 1],\n                    alpha=0.8,\n                    c=colors[idx],\n                    marker=markers[idx],\n                    label=f'Class {cl}',\n                    edgecolor='black') \n```", "```py\n>>> plot_decision_regions(X, y, classifier=ppn)\n>>> plt.xlabel('Sepal length [cm]')\n>>> plt.ylabel('Petal length [cm]')\n>>> plt.legend(loc='upper left')\n>>> plt.show() \n```", "```py\nclass AdalineGD:\n    \"\"\"ADAptive LInear NEuron classifier.\n\n    Parameters\n    ------------\n    eta : float\n        Learning rate (between 0.0 and 1.0)\n    n_iter : int\n        Passes over the training dataset.\n    random_state : int\n        Random number generator seed for random weight initialization.\n\n    Attributes\n    -----------\n    w_ : 1d-array\n        Weights after fitting.\n    b_ : Scalar\n        Bias unit after fitting.\n    losses_ : list\n      Mean squared error loss function values in each epoch.    \n    \"\"\"\n    def __init__(self, eta=0.01, n_iter=50, random_state=1):\n        self.eta = eta\n        self.n_iter = n_iter\n        self.random_state = random_state\n\n    def fit(self, X, y):\n        \"\"\" Fit training data.\n\n        Parameters\n        ----------\n        X : {array-like}, shape = [n_examples, n_features]\n            Training vectors, where n_examples\n            is the number of examples and\n            n_features is the number of features.\n        y : array-like, shape = [n_examples]\n            Target values.\n\n        Returns\n        -------\n        self : object\n\n        \"\"\"\n        rgen = np.random.RandomState(self.random_state)\n        self.w_ = rgen.normal(loc=0.0, scale=0.01,\n                              size=X.shape[1])\n        self.b_ = np.float_(0.)\n        self.losses_ = []\n\n        for i in range(self.n_iter):\n            net_input = self.net_input(X)\n            output = self.activation(net_input)\n            errors = (y - output)\n            self.w_ += self.eta * 2.0 * X.T.dot(errors) / X.shape[0]\n            self.b_ += self.eta * 2.0 * errors.mean()\n            loss = (errors**2).mean()\n            self.losses_.append(loss)\n        return self\n\n    def net_input(self, X):\n        \"\"\"Calculate net input\"\"\"\n        return np.dot(X, self.w_) + self.b_\n\n    def activation(self, X):\n        \"\"\"Compute linear activation\"\"\"\n        return X\n\n    def predict(self, X):\n        \"\"\"Return class label after unit step\"\"\"\n        return np.where(self.activation(self.net_input(X))\n                        >= 0.5, 1, 0) \n```", "```py\n for w_j in range(self.w_.shape[0]):\n                self.w_[w_j] += self.eta * \n                    (2.0 * (X[:, w_j]*errors)).mean() \n```", "```py\nself.w_ += self.eta * 2.0 * X.T.dot(errors) / X.shape[0] \n```", "```py\n>>> fig, ax = plt.subplots(nrows=1, ncols=2, figsize=(10, 4))\n>>> ada1 = AdalineGD(n_iter=15, eta=0.1).fit(X, y)\n>>> ax[0].plot(range(1, len(ada1.losses_) + 1),\n...            np.log10(ada1.losses_), marker='o')\n>>> ax[0].set_xlabel('Epochs')\n>>> ax[0].set_ylabel('log(Mean squared error)')\n>>> ax[0].set_title('Adaline - Learning rate 0.1')\n>>> ada2 = AdalineGD(n_iter=15, eta=0.0001).fit(X, y)\n>>> ax[1].plot(range(1, len(ada2.losses_) + 1),\n...            ada2.losses_, marker='o')\n>>> ax[1].set_xlabel('Epochs')\n>>> ax[1].set_ylabel('Mean squared error')\n>>> ax[1].set_title('Adaline - Learning rate 0.0001')\n>>> plt.show() \n```", "```py\n>>> X_std = np.copy(X)\n>>> X_std[:,0] = (X[:,0] - X[:,0].mean()) / X[:,0].std()\n>>> X_std[:,1] = (X[:,1] - X[:,1].mean()) / X[:,1].std() \n```", "```py\n>>> ada_gd = AdalineGD(n_iter=20, eta=0.5)\n>>> ada_gd.fit(X_std, y)\n>>> plot_decision_regions(X_std, y, classifier=ada_gd)\n>>> plt.title('Adaline - Gradient descent')\n>>> plt.xlabel('Sepal length [standardized]')\n>>> plt.ylabel('Petal length [standardized]')\n>>> plt.legend(loc='upper left')\n>>> plt.tight_layout()\n>>> plt.show()\n>>> plt.plot(range(1, len(ada_gd.losses_) + 1),\n...          ada_gd.losses_, marker='o')\n>>> plt.xlabel('Epochs')\n>>> plt.ylabel('Mean squared error')\n>>> plt.tight_layout()\n>>> plt.show() \n```", "```py\nclass AdalineSGD:\n    \"\"\"ADAptive LInear NEuron classifier.\n\n    Parameters\n    ------------\n    eta : float\n        Learning rate (between 0.0 and 1.0)\n    n_iter : int\n        Passes over the training dataset.\n    shuffle : bool (default: True)\n        Shuffles training data every epoch if True to prevent \n        cycles.\n    random_state : int\n        Random number generator seed for random weight \n        initialization.\n\n    Attributes\n    -----------\n    w_ : 1d-array\n        Weights after fitting.\n    b_ : Scalar\n        Bias unit after fitting.\n    losses_ : list\n        Mean squared error loss function value averaged over all\n        training examples in each epoch.\n\n    \"\"\"\n    def __init__(self, eta=0.01, n_iter=10,\n                 shuffle=True, random_state=None):\n        self.eta = eta\n        self.n_iter = n_iter\n        self.w_initialized = False\n        self.shuffle = shuffle\n        self.random_state = random_state\n\n    def fit(self, X, y):\n        \"\"\" Fit training data.\n\n        Parameters\n        ----------\n        X : {array-like}, shape = [n_examples, n_features]\n            Training vectors, where n_examples is the number of \n            examples and n_features is the number of features.\n        y : array-like, shape = [n_examples]\n            Target values.\n\n        Returns\n        -------\n        self : object\n\n        \"\"\"\n        self._initialize_weights(X.shape[1])\n        self.losses_ = []\n        for i in range(self.n_iter):\n            if self.shuffle:\n                X, y = self._shuffle(X, y)\n            losses = []\n            for xi, target in zip(X, y):\n                losses.append(self._update_weights(xi, target))\n            avg_loss = np.mean(losses) \n            self.losses_.append(avg_loss)\n        return self\n\n    def partial_fit(self, X, y):\n        \"\"\"Fit training data without reinitializing the weights\"\"\"\n        if not self.w_initialized:\n            self._initialize_weights(X.shape[1])\n        if y.ravel().shape[0] > 1:\n            for xi, target in zip(X, y):\n                self._update_weights(xi, target)\n        else:\n            self._update_weights(X, y)\n        return self\n\n    def _shuffle(self, X, y):\n        \"\"\"Shuffle training data\"\"\"\n        r = self.rgen.permutation(len(y))\n        return X[r], y[r]\n\n    def _initialize_weights(self, m):\n        \"\"\"Initialize weights to small random numbers\"\"\"\n        self.rgen = np.random.RandomState(self.random_state)\n        self.w_ = self.rgen.normal(loc=0.0, scale=0.01,\n                                   size=m)\n        self.b_ = np.float_(0.)\n        self.w_initialized = True\n\n    def _update_weights(self, xi, target):\n        \"\"\"Apply Adaline learning rule to update the weights\"\"\"\n        output = self.activation(self.net_input(xi))\n        error = (target - output)\n        self.w_ += self.eta * 2.0 * xi * (error)\n        self.b_ += self.eta * 2.0 * error\n        loss = error**2\n        return loss\n\n    def net_input(self, X):\n        \"\"\"Calculate net input\"\"\"\n        return np.dot(X, self.w_) + self.b_\n\n    def activation(self, X):\n        \"\"\"Compute linear activation\"\"\"\n        return X\n\n    def predict(self, X):\n        \"\"\"Return class label after unit step\"\"\"\n        return np.where(self.activation(self.net_input(X))\n                        >= 0.5, 1, 0) \n```", "```py\n>>> ada_sgd = AdalineSGD(n_iter=15, eta=0.01, random_state=1)\n>>> ada_sgd.fit(X_std, y)\n>>> plot_decision_regions(X_std, y, classifier=ada_sgd)\n>>> plt.title('Adaline - Stochastic gradient descent')\n>>> plt.xlabel('Sepal length [standardized]')\n>>> plt.ylabel('Petal length [standardized]')\n>>> plt.legend(loc='upper left')\n>>> plt.tight_layout()\n>>> plt.show()\n>>> plt.plot(range(1, len(ada_sgd.losses_) + 1), ada_sgd.losses_,\n...          marker='o')\n>>> plt.xlabel('Epochs')\n>>> plt.ylabel('Average loss')\n>>> plt.tight_layout()\n>>> plt.show() \n```"]