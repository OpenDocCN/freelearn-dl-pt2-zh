["```py\ntype Network struct {\n       origWeights *mat.Dense\n       weights *mat.Dense // n * n\n       biases []float64 // n for each neuron\n       funcs []NeuralFunction // for each neuron\n       size int\n       input int\n   }\n```", "```py\n// Initialize a matrix of zeros with 3 rows and 4 columns.\nd := mat.NewDense(3, 4, nil)\nfmt.Printf(\"%v\\n\", mat.Formatted(d))\n// Initialize a matrix with pre-allocated data. Data has row-major storage.\ndata := []float64{\n    6, 3, 5,\n   -1, 9, 7,\n    2, 3, 4,}\nd2 := mat.NewDense(3, 3, data)\nfmt.Printf(\"%v\\n\", mat.Formatted(d2))\n```", "```py\na := mat.NewDense(2, 3, []float64{\n   3, 4, 5,\n   1, 2, 3,\n})\n\nb := mat.NewDense(3, 3, []float64{   1, 1, 8,\n   1, 2, -3,\n   5, 5, 7,\n})\nfmt.Println(\"tr(b) =\", mat.Trace(b))\n\nc := mat.Dense{}\nc.Mul(a, b)\nc.Add(c, a)\nc.Mul(c, b.T())\nfmt.Printf(\"%v\\n\", mat.Formatted(c))\n```", "```py\npackage main\nimport (\n     \"fmt\"\n     \"log\"\n     . \"gorgonia.org/gorgonia\"\n )\n```", "```py\nfunc main() {\n  g := NewGraph()\n}\n```", "```py\na = NewScalar(g, Float64, WithName(\"a\"))\nb = NewScalar(g, Float64, WithName(\"b\"))\n```", "```py\nc, err = Add(a, b)\nif err != nil {\n              log.Fatal(err)\n              }\n```", "```py\nmachine := NewTapeMachine(g)\n```", "```py\nLet(a, 1.0)\nLet(b, 2.0)\nif machine.RunAll() != nil {\n                           log.Fatal(err)\n                           }\n```", "```py\npackage main\n\nimport (\n         \"fmt\"\n         \"log\"\n\n         . \"gorgonia.org/gorgonia\"\n)\n\nfunc main() {\n         g := NewGraph()\n\n         var a, b, c *Node\n         var err error\n\n         // define the expression\n         a = NewScalar(g, Float64, WithName(\"a\"))\n         b = NewScalar(g, Float64, WithName(\"b\"))\n         c, err = Add(a, b)\n         if err != nil {\n                  log.Fatal(err)\n         }\n\n         // create a VM to run the program on\n         machine := NewTapeMachine(g)\n\n         // set initial values then run\n         Let(a, 1.0)\n         Let(b, 2.0)\n         if machine.RunAll() != nil {\n                  log.Fatal(err)\n         }\n\n         fmt.Printf(\"%v\", c.Value())\n         // Output: 3.0\n}\n```", "```py\npackage main\n\nimport (\n        \"fmt\"\n        \"log\"\n\n        G \"gorgonia.org/gorgonia\"\n        \"gorgonia.org/tensor\"\n)\n\nfunc main() {\n        g := NewGraph()\n}\n```", "```py\nmatB := []float64{0.9,0.7,0.4,0.2}\nmatT := tensor.New(tensor.WithBacking(matB), tensor.WithShape(2, 2))\nmat := G.NewMatrix(g,\n        tensor.Float64,\n        G.WithName(\"W\"),\n        G.WithShape(2, 2),\n        G.WithValue(matT),\n)\n\n```", "```py\nvecB := []float64{5,7}\n\nvecT := tensor.New(tensor.WithBacking(vecB), tensor.WithShape(2))\n\nvec := G.NewVector(g,\n        tensor.Float64,\n        G.WithName(\"x\"),\n        G.WithShape(2),\n        G.WithValue(vecT),\n)\n```", "```py\nz, err := G.Mul(mat, vec)\n```", "```py\nmachine := G.NewTapeMachine(g)\nif machine.RunAll() != nil {\n        log.Fatal(err)\n}\nfmt.Println(z.Value().Data())\n// Output: [9.4 3.4]\n```", "```py\nioutil.WriteFile(\"simple_graph.dot\", []byte(g.ToDot()), 0644)\n```", "```py\ndot -Tsvg simple_graph.dot -O\n```", "```py\nb := G.NewScalar(g,\n        tensor.Float64,\n        G.WithName(\"b\"),\n        G.WithValue(3.0)\n)\n```", "```py\na, err := G.Mul(mat, vec)\nif err != nil {\n        log.Fatal(err)\n}\n\nz, err := G.Add(a, b)\nif err != nil {\n        log.Fatal(err)\n}\n```", "```py\nz, err := G.Add(G.Must(G.Mul(mat, vec)), b)\n```", "```py\n// Output: [12.4 6.4]\n```"]