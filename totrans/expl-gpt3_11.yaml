- en: '*Chapter 8*: Classifying and Categorizing Text'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the last chapter, we looked at different ways to generate text. In this chapter,
    we'll discuss text classification and the OpenAI API classifications endpoint.
    We'll start with a quick overview of text classification and the classifications
    endpoint, and then we'll work through implementing sentiment analysis, assigning
    an ESRB rating to text, categorizing text by language, and classifying text from
    keywords, which are all common text classification examples.
  prefs: []
  type: TYPE_NORMAL
- en: 'The topics we will be covering in this chapter are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Understanding text classification
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introducing the classifications endpoint
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implementing sentiment analysis
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Assigning an ESRB rating to text
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Classifying text by language
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Classifying text from keywords
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter requires that you have access to the OpenAI API. You can request
    access by visiting [https://openapi.com](https://openapi.com).
  prefs: []
  type: TYPE_NORMAL
- en: Understanding text classification
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A text classification task takes in text and returns a label. Classifying email
    as spam or determining the sentiment of a tweet are both examples of text classification
    tasks. There are multiple ways to do text classification using the OpenAI API
    and we've looked at some of them already. But one method we haven't covered yet
    is using the **completions endpoint**. However, before we dive into the completions
    endpoint, let's quickly review some of the different ways we can do text classification
    that we've already covered.
  prefs: []
  type: TYPE_NORMAL
- en: Using the completions endpoint for text classification
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For starters, you can perform classification tasks using the completions endpoint
    by describing the task in our prompt. For example, the following prompt can be
    used to classify a social media post:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The previous prompt would return positive, natural, or negative, but most likely
    positive, given the post.
  prefs: []
  type: TYPE_NORMAL
- en: Content filtering is a text classification task
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Content filtering is also a type of text classification task. Recall from [*Chapter
    6*](B16854_06_ePub_AM.xhtml#_idTextAnchor126), *Content Filtering*, when we used
    the content filter engine, that it returned **0 = safe**, **1 = sensitive**, and
    **2 = unsafe**, for text that was provided. That was text classification.
  prefs: []
  type: TYPE_NORMAL
- en: While there are multiple ways to do text classification using the OpenAI API.
    There is one endpoint that is specifically designed for classification tasks.
    That endpoint is the classifications endpoint, and we'll discuss this next.
  prefs: []
  type: TYPE_NORMAL
- en: Introducing the classifications endpoint
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The OpenAI API also provides the **classifications endpoint** for text classification
    tasks. The classifications endpoint simplifies many classification tasks. It uses
    a combination of semantic search and completions engines to classify text based
    on the samples you provide. You can provide up to 200 examples along with your
    HTTP request or you can pre-uploaded files containing example data.
  prefs: []
  type: TYPE_NORMAL
- en: The URL for the classifications endpoint is [https://api.openai.com/v1/classifications](https://api.openai.com/v1/classifications).
    It expects an HTTP `POST` with a JSON body containing input parameters. One of
    the required parameters is the query parameter. The value of the query parameter
    is the text to classify. The query value is first used to do a semantic search
    to find relevant examples from the examples provided. Then, the examples are used,
    along with the query, to create a prompt for a defined completions engine that
    will classify the text.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following code block shows a simple request body for the classifications
    endpoint. Note that the examples are provided with this request and the model
    that will be used to do the classification is the `curie` model:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: As mentioned, you can also upload example data and use a file parameter to reference
    the uploaded example data. This is useful when you have a large number of examples
    – over 200\. Let's look at uploading files.
  prefs: []
  type: TYPE_NORMAL
- en: Uploading files
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Example data for the classifications endpoint can be uploaded using the OpenAI
    API files endpoint. The file should be formatted based on the JSON lines text
    format, which is basically a valid JSON object on each line that is separated
    by a line break.
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: You can learn more about the JSON lines format at [https://jsonlines.org](https://jsonlines.org).
  prefs: []
  type: TYPE_NORMAL
- en: 'The following code block provides an example of the format required for a classifications
    sample file. The text property and label properties are required, but the metadata is
    optional. The metadata property can contain a JSON object with any information
    you''d like. This data can then optionally be returned with the query results:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: To upload a sample file, you use the OpenAI API files endpoint. For the examples
    in this chapter, we won't be using files. However, we'll take a closer look at
    the files endpoint in [*Chapter 9*](B16854_09_ePub_AM.xhtml#_idTextAnchor172),
    *Building a GPT-3 Powered Question-Answering App*.
  prefs: []
  type: TYPE_NORMAL
- en: Implementing sentiment analysis
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A common classification task is sentiment analysis. Using sentiment analysis,
    you can classify text based on its general tone – for example, happy, sad, mad,
    or neutral. This can be useful in a lot of applications; for example, if you're
    a restaurant owner and you want to respond quickly to unhappy customer reviews.
    Let's take a look at how we could do that using the OpenAI API classifications
    endpoint.
  prefs: []
  type: TYPE_NORMAL
- en: In this example, we will classify restaurant reviews. We'll label the reviews
    with the labels Good, Poor, or Neutral. We will use the classifications endpoint
    for this example, and we'll provide some example reviews with the request.
  prefs: []
  type: TYPE_NORMAL
- en: Node.js/JavaScript example
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To create the review classifier example in Node.js/JavaScript, follow these
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Log in to [replit.com](http://replit.com) and open your **exploring-gpt3-node** REPL.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new file – `chapter08/reviews-classifier.js`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following code to the beginning of the `reviews-classifier.js` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, add example reviews that will be used with the request:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, add the request parameters for the classifications endpoint:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, add the following code to log the result to the console:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Change the `.replit` file in your root folder to the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Click the `chapter08/reviews-classifier.js` file, you should see a result similar
    to the console output in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 8.1 – Example output from chapter08/reviews-classifier.js'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16854_08_001.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8.1 – Example output from chapter08/reviews-classifier.js
  prefs: []
  type: TYPE_NORMAL
- en: Next, let's look at the same example using Python.
  prefs: []
  type: TYPE_NORMAL
- en: Python example
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To create the online review classifier example in Python, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Log in to [replit.com](http://replit.com) and open your **exploring-gpt3-python** REPL.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new file – `chapter08/reviews-classifier.py`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following code to the beginning of the `reviews-classifier.py` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create an array for the review examples:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Set the request parameters for the endpoint:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Make the HTTP request and print the results to the console:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Change the `.replit` file in your root folder to the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Click the `chapter08/online-review-classifier.py` file, you should see a result
    similar to the console output in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 8.2 – Example output from chapter08/online-review-classifier.py'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16854_08_002.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8.2 – Example output from chapter08/online-review-classifier.py
  prefs: []
  type: TYPE_NORMAL
- en: Let's now take a look at another example.
  prefs: []
  type: TYPE_NORMAL
- en: Assigning an ESRB rating to text
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the last example, we provided sample data to help with our classification
    task. But GPT-3 is pre-trained with a huge dataset, meaning it can perform a surprising
    number of classification tasks without providing any example data. Let's take
    a look at another example using the completions endpoint. In this example, we'll
    look at classifying text with an **Entertainment Software Rating Board** (**ESRB**)
    rating.
  prefs: []
  type: TYPE_NORMAL
- en: In this example, we will use the completions endpoint to assign an ESRB rating
    to text without any example data.
  prefs: []
  type: TYPE_NORMAL
- en: Node.js/JavaScript example
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To create the ESRB rating classifier example in `Node.js/JavaScript`, follow
    these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Log in to [replit.com](http://replit.com) and open your **exploring-gpt3-node** REPL.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new file – `chapter08/esrb-rating-classifier.js`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following code to the beginning of the `esrb-rating-classifier.js`
    file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the endpoint parameters to the `esrb-rating-classifier.js` file with the
    following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following code to log the endpoint response to the console:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Change the `.replit` file in your root folder to the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Click the `chapter08/esrb-rating-classifier.js` file, you should see a result
    similar to the console output in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 8.3 – Example output from chapter08/esrb-rating-classifier.js'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16854_08_003.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8.3 – Example output from chapter08/esrb-rating-classifier.js
  prefs: []
  type: TYPE_NORMAL
- en: Now, let's look at the ESRB rating classifier in Python.
  prefs: []
  type: TYPE_NORMAL
- en: Python example
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To create the ESRB rating classifier example in Python, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Log in to [replit.com](http://replit.com) and open your **exploring-gpt3-python** REPL.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new file – `chapter08/esrb-rating-classifier.py`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following code to the beginning of the `esrb-rating-classifier.py`
    file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the endpoint parameters to the `esrb-rating-classifier.js` file with the
    following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following code to log the endpoint response to the console:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Change the `.replit` file in your root folder to the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Click the `chapter08/esrb-rating-classifier.js` file, you should see a result
    similar to the console output in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 8.4 – Example output from chapter08/esrb-rating-classifier.py'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16854_08_004.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8.4 – Example output from chapter08/esrb-rating-classifier.py
  prefs: []
  type: TYPE_NORMAL
- en: Let's now take a look at another example.
  prefs: []
  type: TYPE_NORMAL
- en: Classifying text by language
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now, let's consider an example. Suppose we needed to route support messages
    based on the language the message was written in – for a multinational support
    center. In this case, we could use GPT-3 to classify messages by language, such
    as English, French, Hindi, Spanish, and Russian. Let's see how we'd go about doing
    that.
  prefs: []
  type: TYPE_NORMAL
- en: In this example, we will classify support messages by language using the classifications
    endpoint and examples for each language.
  prefs: []
  type: TYPE_NORMAL
- en: Node.js/JavaScript example
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To create the email classifier example in Node.js/JavaScript, follow these
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Log in to [replit.com](http://replit.com) and open your **exploring-gpt3-node** REPL.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new file – `chapter08/language-classifier.js`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following code to the beginning of the `language-classifier.js` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create an array for the language examples:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: If necessary, you can use [https://translate.google.com](https://translate.google.com)
    to create the example data.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Add the endpoint parameters with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following code to log the endpoint response to the console:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Change the `.replit` file in your root folder to the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Click the `chapter08/email-classifier.js` file, you should see a result similar
    to the console output in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 8.5 – Example output from chapter08/language-classifier.js'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16854_08_005.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8.5 – Example output from chapter08/language-classifier.js
  prefs: []
  type: TYPE_NORMAL
- en: Let's look at the Python version next.
  prefs: []
  type: TYPE_NORMAL
- en: Python example
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To create the language classifier example in Python, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Log in to [replit.com](http://replit.com) and open your **exploring-gpt3-python** REPL.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new file – `chapter08/language-classifier.py`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following code to the beginning of the `language-classifier.py` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create an array for the language examples:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: If necessary, you can use [https://translate.google.com](https://translate.google.com)
    to create the example data.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Add the endpoint parameters with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following code to log the endpoint response to the console:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Change the `.replit` file in your root folder to the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Click the `chapter08/language-classifier.py` file, you should see a result
    similar to the console output in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 8.6 – Example output from chapter08/language-classifier.py'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16854_08_006.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8.6 – Example output from chapter08/language-classifier.py
  prefs: []
  type: TYPE_NORMAL
- en: Let's now take a look at another example.
  prefs: []
  type: TYPE_NORMAL
- en: Classifying text from keywords
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Another common text classification task is to classify documents based on keywords.
    To do this, we can use GPT3 to create a list of keywords that will be related
    to the content of the document. However, GPT3 doesn't just extract keywords from
    the document. It determines keywords that are relevant based on the document content.
    Let's try an example.
  prefs: []
  type: TYPE_NORMAL
- en: In this example, we will use the completions endpoint to classify a document
    based on relevant keywords.
  prefs: []
  type: TYPE_NORMAL
- en: Node.js/JavaScript example
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To create the keywords classifier example in `Node.js/JavaScript`, follow these
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Log in to [replit.com](http://replit.com) and open your **exploring-gpt3-node** REPL.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new file – `chapter08/keywords-classifier.js`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following code to the beginning of the `keywords-classifier.js` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the endpoint parameters to `keywords-classifier.js` with the help of the
    following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following code to log the endpoint response to the console:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Change the `.replit` file in your root folder to the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Click the `chapter08/keywords-classifier.js` file, you should see a result
    similar to the console output in the following screenshot. Notice in the results
    that some of the keywords identified may not exist in the original text:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 8.7 – Example output from chapter08/keywords-classifier.js'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16854_08_007.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8.7 – Example output from chapter08/keywords-classifier.js
  prefs: []
  type: TYPE_NORMAL
- en: Alright, next, let's look at the Python version.
  prefs: []
  type: TYPE_NORMAL
- en: Python example
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To create the keywords classifier example in Python, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Log in to [replit.com](http://replit.com) and open your **exploring-gpt3-python** REPL.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new file – `chapter08/keywords-classifier.py`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following code to the beginning of the `keywords-classifier.py` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add a `params` variable to `chapter08/keywords-classifier.py` with the following
    code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following code to log the endpoint response to the console:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Change the .`replit` file in your root folder to the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Click the `chapter08/keywords-classifier.py` file, you should see a result
    similar to the console output in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 8.8 – Example output from chapter08/keywords-classifier.py'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16854_08_008.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8.8 – Example output from chapter08/keywords-classifier.py
  prefs: []
  type: TYPE_NORMAL
- en: Again, notice that some of the keywords returned don't appear in the text provided,
    but they are still relevant. This is possible because GPT3 is using its language
    model to consider keywords that are the best fit, even if they aren't contained
    in the text.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we covered understanding text classification and the classifications
    API endpoint. Then, we worked through examples of implementing sentiment analysis,
    assigning an ESRB rating to text, classifying text by language, and classifying
    text with keywords.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will look at working with the semantic search API endpoint.
  prefs: []
  type: TYPE_NORMAL
