["```py\nw0 := gorgonia.NewMatrix(g, dt, gorgonia.WithShape(784, 256), gorgonia.WithName(\"w0\"), gorgonia.WithInit(gorgonia.GlorotU(1.0)))\n\nw1 := gorgonia.NewMatrix(g, dt, gorgonia.WithShape(256, 128), gorgonia.WithName(\"w1\"), gorgonia.WithInit(gorgonia.GlorotU(1.0)))\n```", "```py\n// Set first layer to be copy of input\nl0 = x\nlog.Printf(\"l0 shape %v\", l0.Shape())\n\n// Encoding - Part 1\nif c1, err = gorgonia.Mul(l0, m.w0); err != nil {\n   return errors.Wrap(err, \"Layer 1 Convolution failed\")\n}\nif l1, err = gorgonia.Rectify(c1); err != nil {\n    return errors.Wrap(err, \"Layer 1 activation failed\")\n}\nlog.Printf(\"l1 shape %v\", l1.Shape())\n\nif c2, err = gorgonia.Mul(l1, m.w1); err != nil {\n    return errors.Wrap(err, \"Layer 1 Convolution failed\")\n}\nif l2, err = gorgonia.Rectify(c2); err != nil {\n    return errors.Wrap(err, \"Layer 1 activation failed\")\n}\nlog.Printf(\"l2 shape %v\", l2.Shape())\n```", "```py\nestMean := gorgonia.NewMatrix(g, dt, gorgonia.WithShape(128, 8), gorgonia.WithName(\"estMean\"), gorgonia.WithInit(gorgonia.GlorotU(1.0)))\n\nestSd := gorgonia.NewMatrix(g, dt, gorgonia.WithShape(128, 8), gorgonia.WithName(\"estSd\"), gorgonia.WithInit(gorgonia.GlorotU(1.0)))\n```", "```py\nif l3, err = gorgonia.Mul(l2, m.estMean); err != nil {\n    return errors.Wrap(err, \"Layer 3 Multiplication failed\")\n}\nlog.Printf(\"l3 shape %v\", l3.Shape())\n\nif l4, err = gorgonia.HadamardProd(m.floatHalf, gorgonia.Must(gorgonia.Mul(l2, m.estSd))); err != nil {\n    return errors.Wrap(err, \"Layer 4 Multiplication failed\")\n}\nlog.Printf(\"l4 shape %v\", l4.Shape())\n```", "```py\nepsilon := gorgonia.GaussianRandomNode(g, dt, 0, 1, 100, 8)\n```", "```py\nif sz, err = gorgonia.Add(l3, gorgonia.Must(gorgonia.HadamardProd(gorgonia.Must(gorgonia.Exp(l4)), m.epsilon))); err != nil {\n    return errors.Wrap(err, \"Layer Sampling failed\")\n}\nlog.Printf(\"sz shape %v\", sz.Shape())\n```", "```py\nsampled = mean + exp(sd) * epsilon\n```", "```py\n// Decoding - Part 3\nif c5, err = gorgonia.Mul(sz, m.w5); err != nil {\n    return errors.Wrap(err, \"Layer 5 Convolution failed\")\n}\nif l5, err = gorgonia.Rectify(c5); err != nil {\n    return errors.Wrap(err, \"Layer 5 activation failed\")\n}\nlog.Printf(\"l6 shape %v\", l1.Shape())\n\nif c6, err = gorgonia.Mul(l5, m.w6); err != nil {\n    return errors.Wrap(err, \"Layer 6 Convolution failed\")\n}\nif l6, err = gorgonia.Rectify(c6); err != nil {\n    return errors.Wrap(err, \"Layer 6 activation failed\")\n}\nlog.Printf(\"l6 shape %v\", l6.Shape())\n\nif c7, err = gorgonia.Mul(l6, m.w7); err != nil {\n    return errors.Wrap(err, \"Layer 7 Convolution failed\")\n}\nif l7, err = gorgonia.Sigmoid(c7); err != nil {\n    return errors.Wrap(err, \"Layer 7 activation failed\")\n}\nlog.Printf(\"l7 shape %v\", l7.Shape())\n```", "```py\nvalueLoss = sum(squared(input - output))\n```", "```py\nm.out = l7\nvalueLoss, err := gorgonia.Sum(gorgonia.Must(gorgonia.Square(gorgonia.Must(gorgonia.Sub(y, m.out)))))\nif err != nil {\n    log.Fatal(err)\n}\n```", "```py\nklLoss = sum(mean^2 + exp(sd) - (sd + 1)) / 2\n```", "```py\nvalueOne := gorgonia.NewScalar(g, dt, gorgonia.WithName(\"valueOne\"))\nvalueTwo := gorgonia.NewScalar(g, dt, gorgonia.WithName(\"valueTwo\"))\ngorgonia.Let(valueOne, 1.0)\ngorgonia.Let(valueTwo, 2.0)\n\nioutil.WriteFile(\"simple_graph_2.dot\", []byte(g.ToDot()), 0644)\nklLoss, err := gorgonia.Div(\n    gorgonia.Must(gorgonia.Sum(\n        gorgonia.Must(gorgonia.Sub(\n            gorgonia.Must(gorgonia.Add(\n                gorgonia.Must(gorgonia.Square(m.outMean)),\n                gorgonia.Must(gorgonia.Exp(m.outVar)))),\n            gorgonia.Must(gorgonia.Add(m.outVar, valueOne)))))),\n    valueTwo)\nif err != nil {\n    log.Fatal(err)\n}\n\n```", "```py\nfunc (m *nn) learnables() gorgonia.Nodes {\n    return gorgonia.Nodes{m.w0, m.w1, m.w5, m.w6, m.w7, m.estMean, m.estSd}\n}\n\nvm := gorgonia.NewTapeMachine(g, gorgonia.BindDualValues(m.learnables()...))\nsolver := gorgonia.NewAdamSolver(gorgonia.WithBatchSize(float64(bs)), gorgonia.WithLearnRate(0.01))\n```", "```py\nw0 := gorgonia.NewMatrix(g, dt, gorgonia.WithShape(784, 256), gorgonia.WithName(\"w0\"), gorgonia.WithInit(gorgonia.GlorotU(1.0)))\nw1 := gorgonia.NewMatrix(g, dt, gorgonia.WithShape(256, 128), gorgonia.WithName(\"w1\"), gorgonia.WithInit(gorgonia.GlorotU(1.0)))\n\nw5 := gorgonia.NewMatrix(g, dt, gorgonia.WithShape(8, 128), gorgonia.WithName(\"w5\"), gorgonia.WithInit(gorgonia.GlorotU(1.0)))\nw6 := gorgonia.NewMatrix(g, dt, gorgonia.WithShape(128, 256), gorgonia.WithName(\"w6\"), gorgonia.WithInit(gorgonia.GlorotU(1.0)))\nw7 := gorgonia.NewMatrix(g, dt, gorgonia.WithShape(256, 784), gorgonia.WithName(\"w7\"), gorgonia.WithInit(gorgonia.GlorotU(1.0)))\n\nestMean := gorgonia.NewMatrix(g, dt, gorgonia.WithShape(128, 8), gorgonia.WithName(\"estMean\"), gorgonia.WithInit(gorgonia.GlorotU(1.0)))\nestSd := gorgonia.NewMatrix(g, dt, gorgonia.WithShape(128, 8), gorgonia.WithName(\"estSd\"), gorgonia.WithInit(gorgonia.GlorotU(1.0)))\n\nfloatHalf := gorgonia.NewScalar(g, dt, gorgonia.WithName(\"floatHalf\"))\ngorgonia.Let(floatHalf, 0.5)\n\nepsilon := gorgonia.GaussianRandomNode(g, dt, 0, 1, 100, 8)\n```", "```py\nw0 := gorgonia.NewMatrix(g, dt, gorgonia.WithShape(784, 256), gorgonia.WithName(\"w0\"), gorgonia.WithInit(gorgonia.GlorotU(1.0)))\nw1 := gorgonia.NewMatrix(g, dt, gorgonia.WithShape(256, 128), gorgonia.WithName(\"w1\"), gorgonia.WithInit(gorgonia.GlorotU(1.0)))\n\nw5 := gorgonia.NewMatrix(g, dt, gorgonia.WithShape(2, 128), gorgonia.WithName(\"w5\"), gorgonia.WithInit(gorgonia.GlorotU(1.0)))\nw6 := gorgonia.NewMatrix(g, dt, gorgonia.WithShape(128, 256), gorgonia.WithName(\"w6\"), gorgonia.WithInit(gorgonia.GlorotU(1.0)))\nw7 := gorgonia.NewMatrix(g, dt, gorgonia.WithShape(256, 784), gorgonia.WithName(\"w7\"), gorgonia.WithInit(gorgonia.GlorotU(1.0)))\n\nestMean := gorgonia.NewMatrix(g, dt, gorgonia.WithShape(128, 2), gorgonia.WithName(\"estMean\"), gorgonia.WithInit(gorgonia.GlorotU(1.0)))\nestSd := gorgonia.NewMatrix(g, dt, gorgonia.WithShape(128, 2), gorgonia.WithName(\"estSd\"), gorgonia.WithInit(gorgonia.GlorotU(1.0)))\n\nfloatHalf := gorgonia.NewScalar(g, dt, gorgonia.WithName(\"floatHalf\"))\ngorgonia.Let(floatHalf, 0.5)\n\nepsilon := gorgonia.GaussianRandomNode(g, dt, 0, 1, 100, 2)\n```"]