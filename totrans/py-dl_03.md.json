["```py\n[global]\ndevice = gpu  \nfloatX = float32\n```", "```py\nprint(theano.config.device)\n```", "```py\nwith tensorflow.device(\"/gpu:1\"):\n```", "```py\npip install Keras\n\n```", "```py\ngit clone https://github.com/fchollet/keras.git\ncd keras\npython setup.py install\n\n```", "```py\nfrom keras.datasets import mnist\n```", "```py\nfrom keras.models import Sequential \nfrom keras.layers.core import Dense, Activation\nfrom keras.utils import np_utils\n```", "```py\n(X_train, Y_train), (X_test, Y_test) = mnist.load_data()\n```", "```py\nX_train = X_train.reshape(60000, 784)     \nX_test = X_test.reshape(10000, 784)\n```", "```py\nclasses = 10\nY_train = np_utils.to_categorical(Y_train, classes)     \nY_test = np_utils.to_categorical(Y_test, classes)\n```", "```py\ninput_size = 784\nbatch_size = 100     \nhidden_neurons = 100     \nepochs = 15\nmain(X_train, X_test, Y_train, Y_test)\n```", "```py\nmodel = Sequential()     \nmodel.add(Dense(hidden_neurons, input_dim=input_size)) \nmodel.add(Activation('sigmoid'))     \nmodel.add(Dense(classes, input_dim=hidden_neurons)) \nmodel.add(Activation('softmax'))\n```", "```py\nmodel.compile(loss='categorical_crossentropy', metrics=['accuracy'], optimizer='sgd')\n```", "```py\nmodel.fit(X_train, Y_train, batch_size=batch_size, nb_epoch=epochs, verbose=1)\n```", "```py\nscore = model.evaluate(X_test, Y_test, verbose=1)\nprint('Test accuracy:', score[1]) \n```", "```py\nweights = model.layers[0].get_weights()\n```", "```py\nimport matplotlib.pyplot as plt     \nimport matplotlib.cm as cm     \nw = weights[0].T          \nfor neuron in range(hidden_neurons):         \n    plt.imshow(numpy.reshape(w[neuron], (28, 28)), cmap = cm.Greys_r) \n    plt.show()  \n```", "```py\nimport matplotlib.cm as cm \n```", "```py\nfrom keras.datasets import cifar10\n```", "```py\nfrom keras.datasets import mnist\n```", "```py\n(X_train, Y_train), (X_test, Y_test) = cifar10.load_data()\nX_train = X_train.reshape(50000, 3072)     \nX_test = X_test.reshape(10000, 3072)\ninput_size = 3072\n```", "```py\n    model = Sequential()     \n    model.add(Dense(3000, input_dim=input_size)) \n    model.add(Activation('sigmoid'))\n    model.add(Dense(2000, input_dim=3000)) \n    model.add(Activation('sigmoid'))     \n    model.add(Dense(classes, input_dim=2000)) \n    model.add(Activation('softmax'))\n```", "```py\nmodel.fit(X_train, Y_train, batch_size=batch_size, nb_epoch=epochs, validation_split=0.1, verbose=1)\n```"]