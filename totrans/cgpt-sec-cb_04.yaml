- en: '4'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Governance, Risk, and Compliance (GRC)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With the digital landscape becoming more intertwined and complex, managing cybersecurity
    risks and maintaining compliance has become increasingly challenging. This chapter
    offers insightful solutions by demonstrating how ChatGPT, harnessed with the power
    of the OpenAI API, can significantly enhance the efficiency and effectiveness
    of your cybersecurity infrastructure.
  prefs: []
  type: TYPE_NORMAL
- en: Throughout the chapter, you will discover how to leverage the capabilities of
    ChatGPT to **generate comprehensive cybersecurity policies**, simplifying the
    intricate task of policy creation. We will walk you through an innovative approach
    that allows granular control over each section of the policy document, delivering
    a robust cybersecurity framework that’s tailored to your specific business needs.
  prefs: []
  type: TYPE_NORMAL
- en: Building upon this groundwork, we will then delve into the nuances of **deciphering
    complex cybersecurity standards**. ChatGPT acts as a guide, breaking down convoluted
    compliance requirements into manageable, clear steps, thus providing a streamlined
    path to ensuring standards compliance.
  prefs: []
  type: TYPE_NORMAL
- en: Furthermore, we will explore the critical domain of **cyber risk assessment**,
    unveiling how automation can revolutionize this vital process. You will gain insights
    into identifying potential threats, assessing vulnerabilities, and recommending
    suitable controls, leading to a substantial enhancement in your organization’s
    ability to manage cybersecurity risks.
  prefs: []
  type: TYPE_NORMAL
- en: Following risk assessment, the focus shifts toward **prioritizing these risks
    effectively**. You will learn how ChatGPT can assist in creating an **objective
    scoring algorithm** based on various risk-related factors, enabling you to strategically
    allocate resources to manage the highest-priority risks.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we will address the essential task of **risk report generation**. Detailed
    risk assessment reports not only serve as a valuable record of identified risks
    and mitigation strategies but also ensure clear communication between stakeholders.
    We will demonstrate how ChatGPT can automate the creation of such reports, saving
    time and maintaining consistency across all documentation.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Security Policy and Procedure Generation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ChatGPT-Assisted Cybersecurity Standards Compliance
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a Risk Assessment Process
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ChatGPT-Assisted Risk Ranking and Prioritization
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building Risk Assessment Reports
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For this chapter, you will need a **web browser** and a stable **internet connection**
    to access the ChatGPT platform and set up your account. You will also need to
    have your OpenAI account set up and have obtained your API key. If not, revisit
    [*Chapter 1*](B21091_01.xhtml#_idTextAnchor022) for details. Basic familiarity
    with the Python programming language and working with the command line is necessary,
    as you’ll be using **Python 3.x**, which needs to be installed on your system,
    for working with the OpenAI GPT API and creating Python scripts. A **code editor**
    will also be essential for writing and editing Python code and prompt files as
    you work through the recipes in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'The code files for this chapter can be found here: [https://github.com/PacktPublishing/ChatGPT-for-Cybersecurity-Cookbook](https://github.com/PacktPublishing/ChatGPT-for-Cybersecurity-Cookbook).'
  prefs: []
  type: TYPE_NORMAL
- en: Security Policy and Procedure Generation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, you will leverage the capabilitiese3 of ChatGPT and the OpenAI
    API to generate a **comprehensive cybersecurity policy** for your organization.
    This process is invaluable for IT managers, **chief information security officers**
    (**CISOs**), and cybersecurity professionals looking to create a robust cybersecurity
    framework that is tailored to their specific business requirements.
  prefs: []
  type: TYPE_NORMAL
- en: Building upon the knowledge acquired in previous chapters, you will establish
    the role of ChatGPT as a seasoned cybersecurity professional, specializing in
    **governance, risk, and compliance** (**GRC**). You’ll learn how to generate an
    organized policy outline using ChatGPT and then iteratively fill in the context
    for each section using subsequent prompts. This approach enables you to generate
    comprehensive documents with granular control over each section, despite ChatGPT’s
    token limit and context window.
  prefs: []
  type: TYPE_NORMAL
- en: Additionally, this recipe will provide a walk-through on how to use the OpenAI
    API and Python to automate the policy generation process, and subsequently, generate
    a cybersecurity policy as a Microsoft Word document. This step-by-step guide will
    provide a practical framework for producing detailed and tailored cybersecurity
    policies using ChatGPT and the OpenAI API.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Before diving into this recipe, ensure you have your OpenAI account set up
    and your API key on hand. If not, you should refer back to [*Chapter 1*](B21091_01.xhtml#_idTextAnchor022)
    for the necessary setup details. You will also need to confirm you have the following
    Python libraries installed:'
  prefs: []
  type: TYPE_NORMAL
- en: '`openai`: This library enables you to interact with the OpenAI API. Install
    it using the `pip install` `openai` command.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`os`: This is a built-in Python library, which allows you to interact with
    the operating system, especially for accessing environment variables.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`docx`: This library is used to generate Microsoft Word documents. Install
    it with `pip` `install python-docx`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`markdown`: This library is used to convert Markdown to HTML, which is useful
    for generating formatted documents. Install it with `pip` `install markdown`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`tqdm`: This library is utilized for showing progress bars during the policy
    generation process. Install it with `pip` `install tqdm`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once you have verified that all these requirements are met, you are ready to
    get started on generating a cybersecurity policy with ChatGPT and the OpenAI API.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this section, we will guide you through the process of using ChatGPT to
    generate a detailed cybersecurity policy that aligns with your organization’s
    needs. By providing the necessary details and using the given system role and
    prompts, you will be able to generate a well-structured cybersecurity policy document:'
  prefs: []
  type: TYPE_NORMAL
- en: Start by logging in to your OpenAI account and navigating to the ChatGPT web
    UI.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Initiate a new conversation with ChatGPT by clicking the **New** **chat** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Enter the following system role to set the context for ChatGPT:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, enter the following message text, replacing the placeholders in the `{
    }` brackets with relevant information based on your organization’s needs. You
    can either combine this prompt with the system role or enter it separately as
    follows (replacing the company name and type with your own):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Review the output from ChatGPT. If it is satisfactory and aligns with your requirements,
    you can proceed to the next step. If not, you have the option to refine your prompt
    or run the conversation again to generate a different output.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Generate the policy from the outline. For each section of the outline, prompt
    ChatGPT with the following, replacing `{section}` with the appropriate section
    title from the outline:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Once you have the desired output, you can copy and paste the generated responses
    directly into a Word document, or editor of your choice, to create a comprehensive
    cybersecurity policy document.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This GPT-assisted cybersecurity policy creation recipe taps into the power
    of **natural language processing** (**NLP**) and machine learning algorithms to
    produce a tailored and comprehensive cybersecurity policy that caters to the needs
    of your organization. By assuming a specific system role and utilizing a detailed
    user request as a prompt, ChatGPT is capable of tailoring its output to meet the
    demands of a cybersecurity professional, tasked with generating a detailed policy.
    Here’s a deeper look into how this process functions:'
  prefs: []
  type: TYPE_NORMAL
- en: '**System role and detailed prompt**: The system role casts ChatGPT as a seasoned
    cybersecurity professional, specializing in GRC. The prompt, which acts as the
    user request, is detailed and describes the specifics of the policy outline, from
    the nature of the company to the requirements of the cybersecurity policy. These
    inputs provide context and steer ChatGPT’s response, ensuring it caters to the
    complexities and requirements of the policy creation task.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Natural language processing and machine learning**: NLP and machine learning
    are the foundation of ChatGPT’s capabilities. It uses these technologies to comprehend
    the complexities of the users requests, to learn from the patterns, and to generate
    a well-structured cybersecurity policy that is detailed, specific, and comprehensive.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Knowledge and language understanding capabilities**: ChatGPT leverages its
    vast knowledge base and language understanding capabilities to adhere to industry-standard
    methodologies and best practices. This is crucial in the swiftly evolving realm
    of cybersecurity, ensuring that the generated cybersecurity policy is current
    and complies with recognized standards.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Iterative policy generation**: The process of creating the detailed policy
    from the generated outline involves prompting ChatGPT iteratively for each section
    of the policy. This allows for more granular control over the content of each
    section and helps ensure that the policy is well structured and organized.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Streamlining the policy creation process**: The overall benefit of utilizing
    this GPT-assisted cybersecurity policy creation recipe is that it streamlines
    the process of creating a comprehensive cybersecurity policy. It reduces the time
    spent on policy creation and allows for the generation of a professional-grade
    policy that aligns with industry standards and the specific needs of your organization.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: By employing these detailed inputs, you transform ChatGPT into a potentially
    invaluable tool that can assist in creating an exhaustive, tailored cybersecurity
    policy. This not only strengthens your cybersecurity posture but also ensures
    that your resources are effectively employed in safeguarding your organization.
  prefs: []
  type: TYPE_NORMAL
- en: There’s more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Building on the ChatGPT recipe, you can enhance the functionality by using OpenAI’s
    API to not only generate a cybersecurity policy outline but also to fill in the
    details of each section. This approach is helpful when you want to create detailed
    documents on-the-fly or generate policies for multiple companies with different
    requirements.
  prefs: []
  type: TYPE_NORMAL
- en: 'This Python script incorporates the same idea as our ChatGPT version, but with
    additional functionality provided by the OpenAI API grants more control and flexibility
    over the content generation process. We will now discuss the different steps involved
    in the OpenAI API version of the cybersecurity policy generation recipe:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Import the necessary libraries and set up the OpenAI API:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In this step, we import the required libraries, such as `openai`, `os`, `docx`,
    `markdown`, and `tqdm`. We set up the OpenAI API by providing the API key.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Prepare the initial prompt for the cybersecurity policy outline:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The initial prompt is constructed using a conversation with two roles: `system`
    and `user`. The `system` message sets the context, informing the AI model about
    its role as a seasoned cybersecurity professional. The `user` message instructs
    the AI model to create a cybersecurity policy outline for a credit union, specifying
    the need for Markdown formatting.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Generate the cybersecurity policy outline using the OpenAI API:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This section sends the request to the OpenAI API, and upon successful completion,
    retrieves the generated policy outline.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Split the outline into sections and prepare a Word document:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Here we split the outline into different sections, each containing a Markdown-formatted
    heading or subheading. We then initialize a new Word document using the `docx.Document()`
    function.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Loop over each section in the outline, generating detailed information:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Here we loop over each section of the outline. The `tqdm` function is used to
    display a progress bar.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Prepare the prompt for the AI model to generate the detailed information for
    the current section:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The prompt for the AI model is prepared, instructing it to generate detailed
    information for the current section.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Generate detailed information for the current section and add it to the Word
    document:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Here we generate detailed information for the current section using the OpenAI
    API. The Markdown-formatted text is converted to Word formatting and added to
    the Word document. It is also converted to HTML and added to the `html_text` string.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Save the current state of the Word and HTML documents:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The current state of the Word document and the HTML document is saved after
    each section is processed. This ensures that you do not lose any progress if the
    script is interrupted.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Print a completion message after all sections have been processed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Here’s how the completed script should look:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: This Python script automates the process of generating a detailed cybersecurity
    policy outline for a specific company, XYZ Corp., a credit union. The script initiates
    by importing the necessary libraries, setting the OpenAI API key, and preparing
    the initial prompt for the AI model, instructing it to generate the policy outline.
  prefs: []
  type: TYPE_NORMAL
- en: On receiving a successful response from the OpenAI API, the script prints out
    the policy outline and breaks it down into separate sections for further detailing.
    A Word document is then initiated to record these details. The script then iterates
    over each section of the policy outline, generating and appending detailed information
    from the OpenAI API to the Word document and to an HTML string, effectively creating
    a detailed policy document in both Word and HTML formats.
  prefs: []
  type: TYPE_NORMAL
- en: After each iteration, the script ensures the documents are saved, providing
    a safety net against potential data loss due to interruptions. Once all sections
    are covered and the documents are saved, the script signifies its successful completion.
    Thus, a high-level policy outline is expanded into a detailed, comprehensive cybersecurity
    policy, in a process fully automated using the OpenAI API and Python.
  prefs: []
  type: TYPE_NORMAL
- en: ChatGPT-Assisted Cybersecurity Standards Compliance
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will guide you on how to use ChatGPT to assist with **cybersecurity
    standards compliance**. This recipe builds on the skills gained from previous
    chapters. Understanding the requirements of cybersecurity standards can be complex,
    due to the manner in which they are typically written. With ChatGPT, you can simplify
    this task. By prompting ChatGPT with excerpts from a cybersecurity standard, the
    model can assist in breaking down these requirements into simpler terms, helping
    you determine whether you comply, and what steps need to be taken to become compliant
    if you are not.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Ensure you have access to the ChatGPT interface by logging in to your OpenAI
    account. Have a cybersecurity standard document on hand from which you can quote
    excerpts.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To utilize ChatGPT for understanding and checking compliance with cybersecurity
    standards, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Log in to the ChatGPT interface.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Assign a role to ChatGPT with the following prompt:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You should replace `industrial` with whichever industry you’re in.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Then provide ChatGPT with your prompt:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Remember to replace `'NIST SP 800-82 revision 2 standard'` with whichever cybersecurity
    standard you are working with.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Provide ChatGPT with the first requirement ID, specifications, and any supplemental
    information:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 4.1 – Example of a ChatGPT response to a standards requirement query](img/Figure_4.1_B21091.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.1 – Example of a ChatGPT response to a standards requirement query
  prefs: []
  type: TYPE_NORMAL
- en: 'Engage with ChatGPT in a conversation based on the responses it provides, either
    delving deeper into a particular requirement or moving on to the next:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 4.2 – Example of a ChatGPT response to a standards requirement conversation](img/Figure_4.2_B21091.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.2 – Example of a ChatGPT response to a standards requirement conversation
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When you assign a role to ChatGPT, you provide a specific context or persona
    for the model to work with. This helps the model generate responses that are tailored
    to the given role, resulting in more accurate, relevant, and detailed content.
  prefs: []
  type: TYPE_NORMAL
- en: In the context of understanding and checking compliance with cybersecurity standards,
    ChatGPT uses its training data to interpret the excerpts from the standard, breaking
    them down into simpler, easier-to-understand terms. It then forms a question to
    assist you in determining whether or not you comply with the standard.
  prefs: []
  type: TYPE_NORMAL
- en: Throughout the process, you maintain a conversation with the model, either diving
    deeper into a specific requirement or moving on to the next one, based on your
    requirements.
  prefs: []
  type: TYPE_NORMAL
- en: There’s more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Once you’re comfortable with this process, you can extend it to cover different
    standards across various industries.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are some additional points to consider:'
  prefs: []
  type: TYPE_NORMAL
- en: '**ChatGPT as a training aid**: You can also use it as a teaching tool, utilizing
    the simplified explanations provided by ChatGPT to educate others in your organization
    about the requirements of different cybersecurity standards. Using the model to
    generate easily understandable interpretations of complex standards can be a useful
    supplement to more traditional forms of training.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Importance of regular check-ins**: Using ChatGPT to understand and check
    compliance with cybersecurity standards can be most effective when done regularly.
    Cybersecurity landscapes change quickly, and requirements with which an organization
    was once compliant could change. Regular check-ins can help keep your organization
    up to date.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Potential limitations**: It’s worth noting that while ChatGPT is a powerful
    tool, it does have limitations. Its responses are based on its training data up
    until September 2021\. Therefore, for very recent standards or those that have
    been significantly updated since then, its responses might not be completely accurate.
    It’s always important to verify information with the most current version of the
    standard.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: We will discuss more advanced methods of providing updated documents as a knowledge
    base later on in this book.
  prefs: []
  type: TYPE_NORMAL
- en: '**Importance of professional guidance**: While this approach can help a great
    deal in understanding the requirements of cybersecurity standards, it’s not a
    substitute for professional legal or cybersecurity guidance. Compliance with these
    standards often has legal implications, so professional advice is essential. Always
    consult with a professional when determining your organization’s compliance with
    any cybersecurity standard.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Feedback and iteration**: As with any AI tool, the more you use ChatGPT and
    the more feedback you provide, the better it can assist you. The feedback loop
    allows the model to adjust and provide responses better tailored to your needs
    over time.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a Risk Assessment Process
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Cyber risk assessment is an essential part of an organization’s **risk management
    strategy**. This process involves identifying potential threats, assessing vulnerabilities
    that could be exploited by these threats, evaluating the impact that such an exploitation
    could have on the organization, and recommending suitable controls to mitigate
    the risk. Understanding the steps involved in conducting a risk assessment can
    significantly enhance an organization’s ability to manage cybersecurity risks.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will guide you through creating a cyber risk assessment process
    using Python and the OpenAI API. By automating the risk assessment process, you
    can streamline your workflow and make your security operations more efficient.
    This approach can also provide a standardized format for conducting risk assessments,
    which can improve consistency across your organization.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Before proceeding with this recipe, you will need the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Python**. This recipe is compatible with **Python 3.6** or later.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An **OpenAI API key**. If you don’t have one, you can obtain it from the OpenAI
    website after signing up.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `pip` `install openai`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The Python `docx` library for creating Word documents. You can install it using
    pip: `pip` `install python-docx`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The Python `tqdm` library for displaying progress. You can install it using
    pip: `pip` `install tqdm`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Python `threading` and `os` libraries, which are generally available with
    Python.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Familiarity with Python programming and basic cybersecurity concepts.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let’s start creating our risk assessment process by building a script that
    uses the OpenAI API to generate the content of each section in our risk assessment
    plan. The script will ask ChatGPT to play the role of a cybersecurity professional
    specializing in GRC to provide us with a detailed narrative, context, and details
    for each section of the risk assessment process:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Import the necessary libraries:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This code block imports all the required libraries for our script: `openai`
    for interacting with the OpenAI API, `os` for environment variables, `Document`
    from `docx` for creating Word documents, threading and time for managing the time
    display during API calls, `datetime` for timestamping our report, and `tqdm` for
    progress visualization.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Set up the OpenAI API key:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This code sets the OpenAI API key, which is stored as an environment variable.
    This key is required to authenticate our program’s requests to the OpenAI API.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Determine a unique identifier for the assessment report:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We use the current date and time to create a unique name for each assessment
    report, ensuring that we don’t overwrite any previous reports. The name is formatted
    as `Risk_Assessment_Plan_{current_datetime}`, where `current_datetime` is the
    exact date and time when the script is run.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Define the outline for the risk assessment:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Here we define the outline for the risk assessment. The outline contains a list
    of all the sections to be included in the risk assessment process.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: You can modify the process steps to include whichever sections you feel appropriate,
    and the model will fill in the context for whichever sections you provide.
  prefs: []
  type: TYPE_NORMAL
- en: 'Implement a function to generate section content using the OpenAI API:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This function takes as input the title of a section from our risk assessment
    outline and uses the OpenAI API to generate detailed content for that section.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Implement a function to convert Markdown text to a Word document:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This function takes the generated Markdown text for each section and the desired
    output filename as inputs and creates a Word document with the same content.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Implement a function to display the elapsed time while waiting for the API
    call:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This function is responsible for displaying the elapsed time while waiting for
    the API call to complete. This is useful for tracking how long the process is
    taking.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Start the process for generating the report:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Here we start a separate thread to display the elapsed time. This runs concurrently
    with the main process that makes the API calls.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Iterate through each section in the risk assessment outline, generate the section
    content, and append it to the report:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This block of code loops through each section in our risk assessment outline,
    generates the content for that section using the OpenAI API, and appends the generated
    content to our report.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Finalize the progress and elapsed time display once all sections have been
    generated:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `api_call_completed` variable is set to `True` to indicate that all API
    calls have been completed. We then stop the elapsed time display thread and close
    the progress bar to signify that the process has ended.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Finally, save the generated report as a Word document:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In this final step, the `markdown_to_docx` function is called with the generated
    report (in Markdown format) and the desired output filename as arguments to create
    a Word document. The filename includes a timestamp to ensure it’s unique. This
    process is wrapped in a try-except block to handle any exceptions that might occur
    during this conversion. If successful, we print out a success message; if an error
    occurs, we print the exception to help with troubleshooting.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The final script should appear as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: Now, let’s take a look at how it works.
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Python script works by interacting with the OpenAI API to generate detailed
    content for each section of the risk assessment process. The content is generated
    by simulating a conversation between a user and a system (ChatGPT) where the system
    roleplays as a cybersecurity professional. The conversation messages provided
    to the API describe the context, and ChatGPT generates a comprehensive response
    based on that context.
  prefs: []
  type: TYPE_NORMAL
- en: In the OpenAI chat models, a list of messages is provided, and each message
    has a role and content. The role can be `system`, `user`, or `assistant`. The
    `system` role is typically used to set the behavior of `assistant`, and the `user`
    role is used to instruct `assistant`.
  prefs: []
  type: TYPE_NORMAL
- en: In this script, we first set the system role with the message `'You are a cybersecurity
    professional specializing in governance, risk, and compliance (GRC) with more
    than 25 years of experience.'`. This is to inform the model of the context, setting
    it up to respond as an experienced professional in the field of cybersecurity.
    The model uses this contextual information to generate responses that are appropriate
    and specific to the scenario.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `user` role’s message, `''You are currently writing a cyber risk assessment
    policy. Write the narrative, context, and details for the following section (and
    only this section): {section}. Use as much detail and explanation as possible.
    Do not write anything that should go in another section of the policy.''`, serves
    as the specific prompt for the model. This prompt guides the model to generate
    a detailed narrative for a specific section of a risk assessment policy. It instructs
    the model to remain focused on the current section and to not deviate into details
    that belong in other sections. By doing this, we ensure that the content generated
    is relevant and precise, adhering to the structure of a risk assessment process.'
  prefs: []
  type: TYPE_NORMAL
- en: So, in short, the `system` role sets up the context and expertise of `assistant`,
    while the `user` role provides a directive task for the assistant to perform.
    This method helps in obtaining structured and relevant content from the AI.
  prefs: []
  type: TYPE_NORMAL
- en: The script is structured to handle each section of the risk assessment process
    individually, making a separate API call for each section. It takes advantage
    of multi-threading to display the elapsed time while the API calls are being processed,
    giving a sense of progress.
  prefs: []
  type: TYPE_NORMAL
- en: The generated content for each section is appended to a report in Markdown format,
    which is then converted to a Word document using the Python `docx` library. This
    creates a well-structured, detailed risk assessment plan that can be used as a
    starting point for conducting risk assessments in an organization.
  prefs: []
  type: TYPE_NORMAL
- en: There’s more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The risk assessment process created by this recipe is flexible. You can experiment
    with generating your own risk assessment process by using ChatGPT to write the
    content for different sections and then plug those outline sections into the script.
    This allows you to create a risk assessment process that is tailored to your organization’s
    specific needs and risk profile. Remember, the best risk assessment process is
    one that is continually updated and improved based on feedback and new insights.
  prefs: []
  type: TYPE_NORMAL
- en: ChatGPT-Assisted Risk Ranking and Prioritization
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we’ll leverage the capabilities of ChatGPT to **prioritize and
    rank cybersecurity risks** based on the given data. Prioritizing risks in cybersecurity
    is a crucial task that helps organizations focus their resources where they matter
    most. With the use of ChatGPT, you can make this task more manageable and objective.
  prefs: []
  type: TYPE_NORMAL
- en: In the given scenario, we have a dataset that includes a range of risk-related
    factors for different assets or systems. These factors include the type of asset,
    its criticality rating, the business function it serves, the size and rating of
    its attack surface, the attack vector rating, and the mitigations and remediations
    in place.
  prefs: []
  type: TYPE_NORMAL
- en: ChatGPT will assist us in creating a scoring algorithm based on this data to
    prioritize the risks. The highest-priority risks, as calculated by the scoring
    algorithm, will be listed at the top of a new table. We’ll guide you through the
    process using sample data, but you can apply the same process to your own data
    in the future.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Ensure you have access to the ChatGPT interface by logging in to your OpenAI
    account. You will also need a dataset containing a list of systems and their associated
    vulnerability and risk-related data. More instructions on what this should entail
    are included in this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: If you do not have a dataset available, you can use the dataset provided in
    this recipe, which can be downloaded from [https://github.com/PacktPublishing/ChatGPT-for-Cybersecurity-Cookbook](https://github.com/PacktPublishing/ChatGPT-for-Cybersecurity-Cookbook).
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To start with risk ranking and prioritization, let’s send a detailed prompt
    to ChatGPT. The prompt should clearly state the task and provide the necessary
    context and data:'
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: You can provide any system data you want as long as it is separated or delineated
    and has header names and discernable values that represent the level of risk,
    severity, value, and so on of the systems and vulnerabilities, which ChatGPT can
    use to create the appropriate algorithm.
  prefs: []
  type: TYPE_NORMAL
- en: 'Establish the system role by entering the following prompt:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Instruct ChatGPT to create a scoring algorithm based on your data using the
    following prompt:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The following figure illustrates the scoring algorithm output created by ChatGPT:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.3 – Example of a scoring algorithm output](img/Figure_4.3_B21091.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.3 – Example of a scoring algorithm output
  prefs: []
  type: TYPE_NORMAL
- en: 'The following code is the example scoring algorithm code output generated by
    ChatGPT:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'The following figure illustrates an example of a formatted output from ChatGPT,
    which lists the assets, prioritized by the risk score created by the algorithm:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.4 – Example of a prioritization output](img/Figure_4.4_B21091.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.4 – Example of a prioritization output
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: The data provided in the prompt is tab-delineated. You can provide any system
    data you want as long as it is separated or delineated and has header names and
    discernable values that represent the level of risk, severity, value, and so on
    of the systems and vulnerabilities, which ChatGPT can use to create the appropriate
    algorithm.
  prefs: []
  type: TYPE_NORMAL
- en: Hint
  prefs: []
  type: TYPE_NORMAL
- en: 'The sample data used for this recipe was generated with the following prompt:'
  prefs: []
  type: TYPE_NORMAL
- en: '`"Generate a table of sample data I will be using for a hypothetical risk assessment
    example. The table should be at least 20 rows and contain the` `following columns:`'
  prefs: []
  type: TYPE_NORMAL
- en: '`Asset/System Type, Criticality Rating, Business Function, Attack Surface Size
    (a value that is derived from number of vulnerabilities found on the system),
    Attack Surface Rating (a value that is derived by calculating the number of high
    and critical severity ratings compared to the total attack surface), Attack Vector
    Rating (a value that is derived by the number of other systems that have access
    to this system, with internet facing being the automatic highest number), list
    of mitigations and remediations needed for this system (this would normally be
    derived by the vulnerability scan recommendations based on the findings but for
    this test/sample data, just make some hypothetical` `data up.)"`'
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: ChatGPT is based on a type of machine learning model known as a **transformer**,
    specifically a variant called **Generative Pretrained Transformer** (**GPT**).
    This model has been trained on a diverse range of internet text, has learned linguistic
    patterns and factual information, and has certain reasoning abilities from this
    vast corpus.
  prefs: []
  type: TYPE_NORMAL
- en: When presented with the task of creating a risk-scoring algorithm, ChatGPT doesn’t
    draw on an inherent understanding of cybersecurity or risk management. Rather,
    it leverages the patterns it has learned during its training phase. During training,
    it is likely that it has encountered text related to **risk-scoring algorithms**,
    **risk prioritization**, and cybersecurity. By recognizing the structure and context
    of such information in the training data, it can generate relevant and coherent
    responses when prompted.
  prefs: []
  type: TYPE_NORMAL
- en: When creating a risk scoring algorithm, ChatGPT first understands the various
    factors presented in the data, such as `Criticality Rating`, `Business Function`,
    `Attack Surface Size`, `Attack Surface Rating`, `Attack Vector Rating`, and `Mitigations
    and Remediations`. It understands that these factors are important in determining
    the overall risk associated with each asset. ChatGPT then formulates an algorithm
    that takes these factors into account, assigning different weights and scores
    to each, based on their perceived importance in the overall risk assessment.
  prefs: []
  type: TYPE_NORMAL
- en: The generated algorithm is then applied to the data to score each risk, creating
    a new table sorted by these scores. This sorting process helps in risk prioritization
    – risks with higher scores are considered more critical and are listed at the
    top of the table.
  prefs: []
  type: TYPE_NORMAL
- en: The impressive aspect of ChatGPT is that while it doesn’t truly *understand*
    cybersecurity or risk assessment in the human sense, it can mimic such understanding
    quite convincingly based on patterns it has learned. Its ability to generate creative
    and coherent text based on these patterns makes it a versatile tool for a wide
    range of tasks, including the generation of a risk-scoring algorithm in this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: There’s more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This method is limited by ChatGPT’s **token limit**. Due to this limit, only
    so much data can be pasted. However, later on in this book, we will provide recipes
    using more advanced techniques on how to get around this limitation.
  prefs: []
  type: TYPE_NORMAL
- en: Hint
  prefs: []
  type: TYPE_NORMAL
- en: Different models have different token limits. If you’re an OpenAI Plus subscriber,
    you can choose between the GPT-3.5 and GPT-4 models. GPT-4 has twice the token
    limit size as GPT-3.5\. Additionally, if you use the OpenAI Playground instead
    of the ChatGPT UI, you can use the new gpt-3.5-turbo-16k model, which has four
    times the token limit of GPT-3.5.
  prefs: []
  type: TYPE_NORMAL
- en: Building Risk Assessment Reports
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Cybersecurity involves managing and mitigating risks, and an essential part
    of this process is creating detailed risk assessment reports. These reports not
    only document the identified risks, vulnerabilities, and threats but also articulate
    the steps taken to address them, facilitating clear communication with various
    stakeholders. Automating the creation of risk assessment reports can save significant
    time and ensure consistency across reports.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we’ll create a Python script that uses OpenAI’s ChatGPT to automatically
    generate a cyber risk assessment report. We’ll be working with the data provided
    by the user, with a focus on the data we worked with in the *ChatGPT-assisted
    risk ranking and prioritization* recipe. However, the script and prompts have
    been designed to work with any relevant user-provided data. By the end of this
    recipe, you’ll be able to generate detailed and coherent risk assessment reports
    using Python, ChatGPT, and your own data.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Before you start, ensure that you have the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Python.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `openai` Python library installed. You can install it using pip: `pip`
    `install openai`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `python-docx` library installed. You can install it using pip: `pip` `install
    python-docx`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `tqdm` library installed. You can install it using pip: `pip` `install
    tqdm`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An API key from OpenAI.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Before we start, remember that you need to provide system data in the `systemdata.txt`
    file. This data can be anything as long as they are separated or delineated and
    contain discernable values that represent the level of risk, severity, value,
    and so on of the systems and vulnerabilities. This information will be used by
    ChatGPT to create the appropriate algorithm and to generate contextually accurate
    report sections:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Import the required libraries:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: These are the necessary libraries for the script to function correctly. `openai`
    is used to interact with the OpenAI API, `os` is used to access the environment
    variables, `Document` from `docx` is used to create a Word document, `threading`
    and `time` are used for multithreading and to keep track of elapsed time, `datetime`
    is used to generate a unique filename for each run, and `tqdm` is used to display
    a progress bar in the console.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Set up the OpenAI API key and generate the assessment name:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The OpenAI API key is read from an environment variable, and the current date
    and time are used to create a unique filename for the risk assessment report.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Create the risk assessment report outline:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This is the structure of the risk assessment report, which is used to guide
    the AI model in generating content for each section.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Define the function to generate section content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This function constructs a conversation prompt, sends it to the OpenAI API,
    and retrieves the model’s response. It accepts the name of a section and system
    data as arguments and returns the generated content for the specified section.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Define the function to convert Markdown text to a Word document:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This function accepts Markdown text and a file path, creates a Word document
    based on the Markdown content, and saves the document to the specified file path.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Define the function to display elapsed time:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This function is used to display elapsed time in the console while waiting for
    the API call to complete. It’s implemented as a separate thread to allow the main
    thread to continue executing the rest of the script.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Read the system data and start the elapsed time thread:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The script reads system data from a text file and starts a new thread to display
    the elapsed time in the console.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Generate the report using the OpenAI API:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The script creates a progress bar, iterates over the sections in the risk assessment
    report outline, generates content for each section using the OpenAI API, and appends
    the content to the report. It then stops the elapsed time thread and closes the
    progress bar.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Save the report as a Word document:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Finally, the script converts the generated report from Markdown to a Word document
    and saves the document. If an exception is thrown during this process, it’s caught
    and a message is printed to the console.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The completed script should appear as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: Now, let’s take a look at how it works.
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The key function of this script is to automate the generation of a detailed
    risk assessment report based on system data and the assessment process. The script
    works by dividing the process into a series of defined sections, and in each section,
    uses the OpenAI API to generate specific, detailed content.
  prefs: []
  type: TYPE_NORMAL
- en: The system data loaded from the file provides context for the gpt-3.5-turbo
    model to generate the content of each section. We define an outline that breaks
    down the risk assessment report into various sections that each represent a stage
    in the risk assessment process. These sections match the steps outlined in the
    *Creating a Risk Assessment* *Process* recipe.
  prefs: []
  type: TYPE_NORMAL
- en: 'We used the following prompt to build a report template prompt in our script:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: This approach guides the model to generate content that matches each section
    of the report.
  prefs: []
  type: TYPE_NORMAL
- en: In each section, the script calls the `generate_section_content()` function.
    This function sends a chat message to the OpenAI API that includes the role of
    the model as a seasoned cybersecurity professional, the task at hand (writing
    the specified section), and the provided system data. The model’s response, which
    is the content for the specified section, is returned by this function and added
    to the `report` list.
  prefs: []
  type: TYPE_NORMAL
- en: The `markdown_to_docx()` function converts the Markdown text in the `report`
    list into a Word document. It does this by iterating over each line in the Markdown
    text, checking whether it starts with a Markdown heading tag (such as `#`, `##`,
    etc.), and adding it to the document as a heading or paragraph accordingly.
  prefs: []
  type: TYPE_NORMAL
- en: Once all sections are generated and appended to the `report` list, the list
    is joined into a single string and converted into a Word document using the `markdown_to_docx()`
    function.
  prefs: []
  type: TYPE_NORMAL
- en: There’s more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The context for each section that describes certain aspects of the process is
    placeholder text that can and probably should be modified by the user. We’ve used
    this approach for simplicity, but in later recipes, we will demonstrate more advanced
    techniques on how to provide the actual risk assessment process as real context
    for the report.
  prefs: []
  type: TYPE_NORMAL
- en: We encourage you to experiment with different assessment process outlines and
    datasets. Understanding how to tweak the prompts and data to get the most effective
    results that suit your needs is a crucial part of leveraging AI models such as
    gpt-3.5-turbo and gpt-4.
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: Do remember that, similar to the previous recipe, this method is limited by
    the chosen model’s token limit. The gpt-3.5-turbo model has a token limit of 4,096,
    which constrains how much data can be passed in from the system data file. However,
    we will be exploring advanced techniques later in this book to get around this
    limitation. With these techniques, you’ll be able to handle larger datasets and
    generate more comprehensive reports.
  prefs: []
  type: TYPE_NORMAL
- en: Hint
  prefs: []
  type: TYPE_NORMAL
- en: As with most recipes in this book, the gpt-3.5-turbo model was used for the
    recipes in this chapter, so that the baseline is set with the most cost-effective
    model. The GPT-3.5 ChatGPT model was also used so the baseline is set with the
    most efficient model without limitations. However, you are encouraged to experiment
    with the use of different models such as gpt-3.5-turbo, gpt-4, and the newly released
    gpt-3.5-turbo-16k to find the results that best suit your needs.
  prefs: []
  type: TYPE_NORMAL
