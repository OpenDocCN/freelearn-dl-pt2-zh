- en: '*Chapter 7*: Generating and Transforming Text'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: While we've looked at some text generation and transformation examples in earlier
    chapters, in this chapter, we're going to look at a whole lot more. There are
    tons of possible uses for text generation and transformation, including article
    writing, correcting grammar, generating lists, translating text from one language
    to another, extracting keywords, and summarizing text – to name a few. While we
    won't even come close to covering all of the different ways you can use GPT-3
    to generate and transform text, we'll take a look at 15 fun examples to get your
    wheels turning.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: 'The topics we''ll cover are the following:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: Using the examples
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Generating content and lists
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Translating and transforming text
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Extracting text
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating chatbots
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s look at the requirements we need in this chapter:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
- en: Access to the **OpenAI API**
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An account on [replit.com](http://replit.com)
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the examples
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we'll be looking at a lot of examples – 15 to be exact. We'll
    be using the completions endpoint for all of the examples in this chapter – so
    most of the code for the examples is similar. The main difference will be the
    prompt text and the values for the endpoint parameters. So, to save space, we'll
    look at the complete JavaScript and Python code for the first example. After that,
    we'll just duplicate the first example and edit the endpoint and parameters.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
- en: To get things started, we'll look at generating original content and lists.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
- en: Generating content and lists
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's start with a few examples for creating original content and generating
    lists. Of all the things GPT-3 can do, the possibilities with content and list
    generation are probably the most impressive – and the most fun. GPT-3 can write
    original stories, create product descriptions, produce study notes, help you brainstorm
    ideas, or create recipes – and that's only the beginning.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
- en: Dumb joke generator
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We''ll start with an example to lighten the mood – a dumb joke generator. Spoiler
    alert: not all of the jokes might be that funny, but whose are? Alright, here
    is the prompt we''ll use:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: We'll start with an example using Node.js/JavaScript. Remember, for this first
    example, we'll walk through creating all of the code. For the following examples,
    we'll just be modifying a copy of this first example.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
- en: Node.js/JavaScript example
  id: totrans-21
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To create this example in your **exploring-gpt3-node** repl on [replit.com](http://replit.com),
    complete the following steps:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
- en: Log in to [https://replit.com](https://replit.com) and open your **exploring-gpt3-node**
    repl.
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new folder named `chapter07` in the project root.
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new file named `dumb-joke-generator.js`.
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following code to the `dumb-joke-generator.js` file:'
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-27
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Update the `.replit` file in the root folder with the following code:'
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-29
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Click the `chapter07/dumb-joke-generator.js`, you should see a result that is
    similar to the following screenshot. How funny is that? Right?
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 7.1 – Example output from chapter07/dumb-joke-generator.js'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16854_07_001.jpg)'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.1 – Example output from chapter07/dumb-joke-generator.js
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
- en: Now let's look at the same example using Python.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
- en: Python example
  id: totrans-35
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To create the dumb joke generator in Python, complete the following steps:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
- en: Log in to [replit.com](http://replit.com) and open your **exploring-gpt3-python**
    repl.
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new folder named `chapter07` in the project root.
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new file named `dumb-joke-generator.py`.
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following code to the `dumb-joke-generator.py` file:'
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-41
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Change the `.replit` file in your root folder to the following:'
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-43
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Click the `chapter07/dumb-joke-generator.py`, you should see a result similar
    to the console output in the following screenshot. Did you laugh?
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 7.2 – Example output from chapter07/dumb-joke-generator.py'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16854_07_002.jpg)'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.2 – Example output from chapter07/dumb-joke-generator.py
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
- en: Let's stop joking around and move on to a more serious example.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
- en: Mars facts (in most cases)
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For our next example, we''ll look at using GPT-3 to learn some things about
    the planet Mars. In most cases, we''ll get back facts, but recall from previous
    chapters that you can''t depend on them being true all of the time. We''ll use
    the following prompt to generate a list of 10 facts about Mars:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Starting with this example, we won't walk through all the code. We'll just copy
    the code from our dumb joke generator and modify it.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
- en: Node.js/JavaScript example
  id: totrans-53
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To create the Mars facts example in Node.js/JavaScript, follow these steps:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
- en: Log in to [replit.com](http://replit.com) and open your **exploring-gpt3-node**
    repl.
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new file named `mars-facts-list.js` in the `chapter07` folder.
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy the code from the `dumb-joke-generator.js` file into `mars-facts-list.js`.
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Replace the `params` variable in `mars-facts-list.js` with the following code:'
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-59
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Change the `.replit` file in your root folder to the following:'
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-61
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Click the `chapter07/mars-facts-list.js`, you should see a result similar to
    the console output in the following screenshot. Did you know all of those things
    about Mars?
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 7.3 – Example output from chapter07/mars-facts-list.js'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16854_07_003.jpg)'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.3 – Example output from chapter07/mars-facts-list.js
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
- en: Let's take a look at the Mars facts list example in Python.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
- en: Python example
  id: totrans-67
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To create the Mars facts example in Python, follow these steps:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
- en: Log in to [replit.com](http://replit.com) and open your **exploring-gpt3-python**
    repl.
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new file named `mars-facts-list.py` in the `chapter07` folder.
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy the code from the `dumb-joke-generator.py` file into `mars-facts-list.py`.
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Replace the `params` variable in `mars-facts-list.py` with the following code:'
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-73
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Change the `.replit` file in your root folder to the following:'
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-75
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Click the `chapter07/mars-facts-list.py`, you should see a result similar to
    the console output in the following screenshot. Some interesting facts, aren't
    they?
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 7.4\. – Example output from chapter07/mars-facts-list.py'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16854_07_004.jpg)'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.4\. – Example output from chapter07/mars-facts-list.py
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
- en: We've looked at entertainment and education examples, now let's get some work
    done with a business example – a webinar description generator.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
- en: Webinar description generator
  id: totrans-81
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this example, we''ll use GPT-3 to help write a description for an event.
    We''ll be using the following prompt to write a description for a mindfulness
    webinar:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Node.js/JavaScript example
  id: totrans-84
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To create the webinar description generator in Node.js/JavaScript, follow these
    steps:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
- en: Log in to [replit.com](http://replit.com) and open your **exploring-gpt3-node**
    repl.
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new file named `webinar-description-generator.js` in the `chapter07`
    folder.
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy the code from the `dumb-joke-generator.js` file into `webinar-description-generator.js`.
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Replace the `params` variable in `webinar-description-generator.js` with the
    following code:'
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-90
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Change the `.replit` file in your root folder to the following:'
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-92
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Click the `chapter07/webinar-description-generator.js`, you should see a result
    similar to the console output in the following screenshot:'
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 7.5 – Example output from chapter07/webinar-description-generator.js'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16854_07_005.jpg)'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.5 – Example output from chapter07/webinar-description-generator.js
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
- en: Now let's create the webinar description generator example in Python.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
- en: Python example
  id: totrans-98
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To create the webinar description generator example in Python, follow these
    steps:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
- en: Log in to [replit.com](http://replit.com) and open your **exploring-gpt3-python**
    repl.
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new file named `webinar-description-generator.py` in the `chapter07`
    folder.
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy the code from the `dumb-joke-generator.py` file into `webinar-description-generator.py`.
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Replace the `params` variable in `webinar-description-generator.py` with the
    following code:'
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-104
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Change the `.replit` file in your root folder to the following:'
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-106
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Click the `chapter07/webinar-description-generator.py`, you should see a result
    similar to the console output in the following screenshot:'
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 7.6 – Example output from chapter07/webinar-description-generator.py'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16854_07_006.jpg)'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.6 – Example output from chapter07/webinar-description-generator.py
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
- en: Let's move on and get some suggestions from GPT-3 on books we might consider
    reading.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
- en: Book suggestions
  id: totrans-112
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'How about a list of books that you should read? Let''s give that a try. We''ll
    use the following prompt. This prompt will be completed with a numbered list of
    book suggestions:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Now let's implement the book suggestions prompt in code.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
- en: Node.js/JavaScript example
  id: totrans-116
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To create the book suggestions list example in Node.js/JavaScript, follow these
    steps:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
- en: Log in to [replit.com](http://replit.com) and open your **exploring-gpt3-node**
    repl.
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a new file: `chapter07/book-suggestions-list.js`.'
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy the code from the `dumb-joke-generator.py` file into `chapter07/book-suggestions-list.js`.
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Replace the `params` variable in `chapter07/book-suggestions-list.js` with
    the following code:'
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-122
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Change the `.replit` file in your root folder to the following:'
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  id: totrans-124
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Click the `chapter07/book-suggestions-list.js`, you should see a result similar
    to the console output in the following screenshot:'
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 7.7 – Example output from chapter07/book-suggestions-list.js'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16854_07_007.jpg)'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.7 – Example output from chapter07/book-suggestions-list.js
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
- en: As you can see in *Figure 7.7*, the completion is a list of book suggestions.
    Now let's move on and look at the same example using Python.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
- en: Python example
  id: totrans-130
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To create the book suggestions list example in Python, follow these steps:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
- en: Log in to [replit.com](http://replit.com) and open your **exploring-gpt3-python**
    repl.
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a new file: `chapter07/book-suggestions-list.py`.'
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy the code from the `dumb-joke-generator.py` file into `chapter07/book-suggestions-list.py`.
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Replace the `params` variable in `chapter07/book-suggestions-list.js` with
    the following code:'
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  id: totrans-136
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Change the `.replit` file in your root folder to the following:'
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  id: totrans-138
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Click the `chapter07/book-suggestions-list.py`, you should see a result similar
    to the console output in the following screenshot:'
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 7.8 – Example output from chapter07/book-suggestions-list.py'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16854_07_008.jpg)'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.8 – Example output from chapter07/book-suggestions-list.py
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
- en: Now let's take a look at another example.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
- en: Children's book generator
  id: totrans-144
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now let''s do something creative for the kids. How about a custom bedtime storybook?
    Here is the prompt we''ll use:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: In our code example that follows, we'll just be implementing the prompt to generate
    the book. However, in a real-world version, you'd want to also include content
    filtering as we discussed in [*Chapter 6*](B16854_06_ePub_AM.xhtml#_idTextAnchor126),
    *Content Filtering*.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
- en: Node.js/JavaScript example
  id: totrans-148
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To create the children''s book generator example in Node.js/JavaScript, follow
    these steps:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
- en: Log in to [replit.com](http://replit.com) and open your **exploring-gpt3-node**
    repl.
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a new file: `chapter07/childrens-book-generator.js`.'
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy the code from the `dumb-joke-generator.py` file into `chapter07/childrens-book-generator.js`.
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Replace the `params` variable in `chapter07/childrens-book-generator.js` with
    the following code:'
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  id: totrans-154
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Change the `.replit` file in your root folder to the following:'
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  id: totrans-156
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Click the `chapter07/childrens-book-generator.js`, you should see a result
    similar to the console output in the following screenshot:'
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 7.9 – Example output from chapter07/childrens-book-generator.js'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16854_07_009.jpg)'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.9 – Example output from chapter07/childrens-book-generator.js
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
- en: Let's take a look at the Python version.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
- en: Python example
  id: totrans-162
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To create the children''s book generator example in Python, follow these steps:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
- en: Log in to [replit.com](http://replit.com) and open your **exploring-gpt3-python**
    repl.
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a new file: `chapter07/childrens-book-generator.py`.'
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy the code from the `dumb-joke-generator.py` file into `chapter07/childrens-book-generator.py`.
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Replace the `params` variable in `chapter07/childrens-book-generator.py` with
    the following code:'
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用以下代码替换`chapter07/childrens-book-generator.py`中的`params`变量：
- en: '[PRE23]'
  id: totrans-168
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Change the `.replit` file in your root folder to the following:'
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将根文件夹中的`.replit`文件更改为以下内容：
- en: '[PRE24]'
  id: totrans-170
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Click the `chapter07/childrens-book-generator.py`, you should see a result
    similar to the console output in the following screenshot:'
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击`chapter07/childrens-book-generator.py`，你应该看到类似于以下屏幕截图中的控制台输出结果：
- en: '![Figure 7.10 – Example output from chapter07/childrens-book-generator.py'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: '![图7.10 – 来自`chapter07/childrens-book-generator.py`的示例输出'
- en: '](img/B16854_07_010.jpg)'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16854_07_010.jpg)'
- en: Figure 7.10 – Example output from chapter07/childrens-book-generator.py
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.10 – 来自`chapter07/childrens-book-generator.py`的示例输出
- en: Now let's move on and look at some examples that translate and transform text.
    We'll look at some examples you'd expect such as translating spoken language.
    We'll also look at some translations with a twist.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们继续看一些将文本进行翻译和转换的示例。我们将看到一些你期望的示例，比如将口语翻译成为其他语言。我们还将看到一些带有变化的翻译。
- en: Translating and transforming text
  id: totrans-176
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 文本的翻译和转换
- en: When you think about translating text, systems such as Google Translate might
    come to mind. But with GPT-3, you can also translate – and not just between spoken
    languages. You can translate between just about anything. Let's take a look.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 当你考虑将文本进行翻译时，可能会想到如 Google 翻译这样的系统。但使用 GPT-3，你不仅可以进行口语翻译，还可以进行几乎任何内容的翻译。让我们来看看。
- en: Acronym translator
  id: totrans-178
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 缩写译者
- en: 'For our first translation example, we''ll convert acronyms to their meanings.
    The following is the prompt text we''ll be using:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的第一个翻译示例，我们将把缩写词转换为它们的含义。以下是我们将使用的提示文本：
- en: '[PRE25]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: The prompt provides a few examples of acronyms and their meanings. Try it out
    with the following Node.js/JavaScript code.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 提示中提供了一些缩写词及其含义的示例。尝试使用以下 Node.js/JavaScript 代码。
- en: Node.js/JavaScript example
  id: totrans-182
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Node.js/JavaScript 示例
- en: 'To create the acronym translator example in Node.js/JavaScript, follow these
    steps:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建 Node.js/JavaScript 的缩写译者示例，请按照以下步骤进行：
- en: Log in to [replit.com](http://replit.com) and open your **exploring-gpt3-node**
    repl.
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 登录[replit.com](http://replit.com)并打开你的**exploring-gpt3-node** repl。
- en: 'Create a new file: `chapter07/acronym-translator.js`.'
  id: totrans-185
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新文件：`chapter07/acronym-translator.js`。
- en: Copy the code from the `dumb-joke-generator.py` file into `chapter07/acronym-translator.js`.
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`dumb-joke-generator.py`文件中的代码复制到`chapter07/acronym-translator.js`中。
- en: 'Replace the `params` variable in `chapter07/acronym-translator.js` with the
    following code:'
  id: totrans-187
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用以下代码替换`chapter07/acronym-translator.js`中的`params`变量：
- en: '[PRE26]'
  id: totrans-188
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Change the `.replit` file in your root folder to the following:'
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将根文件夹中的`.replit`文件更改为以下内容：
- en: '[PRE27]'
  id: totrans-190
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Click the `chapter07/acronym-translator.js`, you should see a result similar
    to the console output in the following screenshot:'
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击`chapter07/acronym-translator.js`，你应该看到类似于以下屏幕截图中的控制台输出结果：
- en: '![Figure 7.11 – Example output from chapter07/acronym-translator.js'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: '![图7.11 – 来自`chapter07/acronym-translator.js`的示例输出'
- en: '](img/B16854_07_011.jpg)'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16854_07_011.jpg)'
- en: Figure 7.11 – Example output from chapter07/acronym-translator.js
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.11 – 来自`chapter07/acronym-translator.js`的示例输出
- en: Let's take a look at the Python example.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看 Python 示例。
- en: Python example
  id: totrans-196
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Python 示例
- en: 'To create the acronym translator example in Python, follow these steps:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建 Python 的缩写译者示例，请按照以下步骤进行：
- en: Log in to `replit.com` and open your **exploring-gpt3-python** repl.
  id: totrans-198
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 登录`replit.com`并打开你的**exploring-gpt3-python** repl。
- en: 'Create a new file: `chapter07/acronym-translator.py`.'
  id: totrans-199
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新文件：`chapter07/acronym-translator.py`。
- en: Copy the code from the `dumb-joke-generator.py` file into `chapter07/acronym-translator.py`.
  id: totrans-200
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`dumb-joke-generator.py`文件中的代码复制到`chapter07/acronym-translator.py`中。
- en: 'Replace the `params` variable in `chapter07/acronym-translator.py` with the
    following code:'
  id: totrans-201
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用以下代码替换`chapter07/acronym-translator.py`中的`params`变量：
- en: '[PRE28]'
  id: totrans-202
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Change the `.replit` file in your root folder to the following:'
  id: totrans-203
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将根文件夹中的`.replit`文件更改为以下内容：
- en: '[PRE29]'
  id: totrans-204
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Click the `chapter07/acronym-translator.py`, you should see a result similar
    to the console output in the following screenshot:'
  id: totrans-205
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击`chapter07/acronym-translator.py`，你应该看到类似于以下屏幕截图中的控制台输出结果：
- en: '![Figure 7.12 – Example output from chapter07/acronym-translator.py'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: '![图7.12 – 来自`chapter07/acronym-translator.py`的示例输出'
- en: '](img/B16854_07_012.jpg)'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16854_07_012.jpg)'
- en: Figure 7.12 – Example output from chapter07/acronym-translator.py
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.12 – 来自`chapter07/acronym-translator.py`的示例输出
- en: Let's take a look at another example.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看另一个示例。
- en: English to Spanish
  id: totrans-210
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 英语到西班牙语
- en: 'Now let''s look at translating between spoken languages. In this example, we''ll
    create a simple translator that converts text from English to Spanish:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们来看看口语翻译。在这个示例中，我们将创建一个简单的翻译器，将英语文本转换为西班牙语：
- en: '[PRE30]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: GPT-3 is quite good at translating between languages. This is especially true
    when translating between popular languages such as English and Spanish. So, even
    a simple prompt like this one is usually enough to get an accurate completion.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
- en: Node.js/JavaScript example
  id: totrans-214
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To create the English to Spanish translator example in Node.js/JavaScript,
    follow these steps:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
- en: Log in to [replit.com](http://replit.com) and open your **exploring-gpt3-node**
    repl.
  id: totrans-216
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a new file: `chapter07/english-spanish-translator.js`.'
  id: totrans-217
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy the code from the `dumb-joke-generator.py` file into `chapter07/english-spanish-translator.js`.
  id: totrans-218
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Replace the `params` variable in `chapter07/english-spanish-translator.js`
    with the following code:'
  id: totrans-219
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  id: totrans-220
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Change the `.replit` file in your root folder to the following:'
  id: totrans-221
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  id: totrans-222
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Click the `chapter07/english-spanish-translator.js`, you should see a result
    similar to the console output in the following screenshot:'
  id: totrans-223
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 7.13 – Example output from chapter07/english-spanish-translator.js'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16854_07_013.jpg)'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.13 – Example output from chapter07/english-spanish-translator.js
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
- en: Let's take a look at the same example using Python to translate from English
    to Spanish.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
- en: Python example
  id: totrans-228
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To create the English to Spanish translator example in Python, follow these
    steps:'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
- en: Log in to [replit.com](http://replit.com) and open your **exploring-gpt3-python**
    repl.
  id: totrans-230
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a new file: `chapter07/english-spanish-translator.py`.'
  id: totrans-231
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy the code from the `dumb-joke-generator.py` file into `chapter07/english-spanish-translator.py`.
  id: totrans-232
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Replace the `params` variable in `chapter07/english-spanish-translator.py`
    with the following code:'
  id: totrans-233
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  id: totrans-234
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Change the `.replit` file in your root folder to the following:'
  id: totrans-235
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  id: totrans-236
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Click the `chapter07/english-spanish-translator.py`, you should see a result
    similar to the console output in the following screenshot:'
  id: totrans-237
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 7.14 – Example output from chapter07/english-spanish-translator.py'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16854_07_014.jpg)'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.14 – Example output from chapter07/english-spanish-translator.py
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
- en: As you can see in *Figure 7.14*, GPT-3 translated the English text to Spanish.
    But what's even more impressive is that GPT-3 can also translate between computer
    programming languages. We'll look at that next with a prompt that translates code
    from JavaScript to Python.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
- en: JavaScript to Python
  id: totrans-242
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Translating doesn''t just need to be between human languages. Since GPT-3 was
    trained using data from the internet, it can also translate between programming
    languages. The following prompt provides an example that shows how to translate
    JavaScript code to Python:'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  id: totrans-244
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: This is a fairly simple code translation example, but it does a good job of
    showing the potential. More complex code translations might require a few-shot
    prompt with more samples but let's give this one a try using Node.js/JavaScript.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
- en: Node.js/JavaScript example
  id: totrans-246
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To create the JavaScript to Python translator example in Node.js/JavaScript,
    follow these steps:'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
- en: Log in to [replit.com](http://replit.com) and open your **exploring-gpt3-node**
    repl.
  id: totrans-248
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a new file: `chapter07/javascript-python-translator.js`.'
  id: totrans-249
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy the code from the `dumb-joke-generator.py` file into `chapter07/javascript-python-translator.js`.
  id: totrans-250
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Replace the `params` variable in `chapter07/javascript-python-translator.js`
    with the following code:'
  id: totrans-251
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  id: totrans-252
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Change the `.replit` file in your root folder to the following:'
  id: totrans-253
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  id: totrans-254
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Click the `chapter07/javascript-python-translator.js`, you should see a result
    similar to the console output in the following screenshot:'
  id: totrans-255
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 7.15 – Example output from chapter07/javascript-python-translator.js'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16854_07_015.jpg)'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.15 – Example output from chapter07/javascript-python-translator.js
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
- en: Let's take a look at the Python version.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
- en: Python example
  id: totrans-260
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To create the JavaScript to Python translator example in Python, follow these
    steps:'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
- en: Log in to [replit.com](http://replit.com) and open your **exploring-gpt3-python**
    repl.
  id: totrans-262
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a new file: `chapter07/javascript-python-translator.py`.'
  id: totrans-263
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy the code from the `dumb-joke-generator.py` file into `chapter07/javascript-python-translator.py`.
  id: totrans-264
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Replace the `params` variable in `chapter07/javascript-python-translator.py`
    with the following code:'
  id: totrans-265
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  id: totrans-266
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Change the `.replit` file in your root folder to the following:'
  id: totrans-267
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  id: totrans-268
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Click the `chapter07/javascript-python-translator.py`, you should see a result
    similar to the console output in the following screenshot:'
  id: totrans-269
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 7.16 – Example output from chapter07/javascript-python-translator.py'
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16854_07_016.jpg)'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.16 – Example output from chapter07/javascript-python-translator.py
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
- en: In the next example, we'll look at summarizing text. We looked at summarizing
    text in [*Chapter 7*](B16854_07_ePub_AM.xhtml#_idTextAnchor136), *Generating and
    Transforming Text*, using TLDR, but that's not the only way to summarize text.
    You can also provide text summaries for a provided reading level/grade.
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
- en: Fifth-grade summary
  id: totrans-274
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'GPT-3 can summarize text for a given grade or reading level. Although the *grade*
    levels are not exactly precise and can be subjective, you''ll notice the text
    gets simpler as the grade level gets lower. The following prompt provides an example
    of how you can approach doing that:'
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  id: totrans-276
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: Let's try this example in Node.js/JavaScript and review the results.
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
- en: Node.js/JavaScript example
  id: totrans-278
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To create the fifth-grade summary example in Node.js/JavaScript, follow these
    steps:'
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
- en: Log in to [replit.com](http://replit.com) and open your **exploring-gpt3-node**
    repl.
  id: totrans-280
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a new file: `chapter07/fith-grade-summary.js`.'
  id: totrans-281
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy the code from the `dumb-joke-generator.py` file into `chapter07/fith-grade-summary.js`.
  id: totrans-282
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Replace the `params` variable in `chapter07/fith-grade-summary.js` with the
    following code:'
  id: totrans-283
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  id: totrans-284
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Change the `.replit` file in your root folder to the following:'
  id: totrans-285
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  id: totrans-286
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'Click the `chapter07/fith-grade-summary.js`, you should see a result similar
    to the console output in the following screenshot:'
  id: totrans-287
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 7.17 – Example output from chapter07/fith-grade-summary.js'
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16854_07_017.jpg)'
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.17 – Example output from chapter07/fith-grade-summary.js
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
- en: Let's take a look at the Python code.
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
- en: Python example
  id: totrans-292
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To create the fifth-grade summary example in Python, follow these steps:'
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
- en: Log in to [replit.com](http://replit.com) and open your **exploring-gpt3-python**
    repl.
  id: totrans-294
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a new file: `chapter07/fith-grade-summary.py`.'
  id: totrans-295
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy the code from the `dumb-joke-generator.py` file into `chapter07/fith-grade-summary.py`.
  id: totrans-296
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Replace the `params` variable in `chapter07/fith-grade-summary.py` with the
    following code:'
  id: totrans-297
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  id: totrans-298
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'Change the `.replit` file in your root folder to the following:'
  id: totrans-299
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  id: totrans-300
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'Click the `chapter07/fith-grade-summary.py`, you should see a result similar
    to the console output in the following screenshot:'
  id: totrans-301
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 7.18 – Example output from chapter07/fith-grade-summary.py'
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16854_07_018.jpg)'
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.18 – Example output from chapter07/fith-grade-summary.py
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
- en: Let's take a look at another example. This time we'll see how GPT-3 does with
    grammar correction.
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
- en: Grammar correction
  id: totrans-306
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'English grammar correction can be accomplished with a very simple prompt such
    as the following:'
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  id: totrans-308
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: Let's test out this grammar correction prompt using Node.js/JavaScript.
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
- en: Node.js/JavaScript example
  id: totrans-310
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To create the grammar correction converter example in Node.js/JavaScript, follow
    these steps:'
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
- en: Log in to [replit.com](http://replit.com) and open your **exploring-gpt3-node**
    repl.
  id: totrans-312
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a new file: `chapter07/grammar-correction-converter.js`.'
  id: totrans-313
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy the code from the `dumb-joke-generator.py` file into `chapter07/grammar-correction-converter.js`.
  id: totrans-314
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Replace the `params` variable in `chapter07/grammar-correction-converter.js`
    with the following code:'
  id: totrans-315
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  id: totrans-316
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'Change the `.replit` file in your root folder to the following:'
  id: totrans-317
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  id: totrans-318
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'Click the `chapter07/grammar-correction-converter.js`, you should see a result
    similar to the console output in the following screenshot:'
  id: totrans-319
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 7.19 – Example output from chapter07/grammar-correction-converter.js'
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16854_07_019.jpg)'
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.19 – Example output from chapter07/grammar-correction-converter.js
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
- en: Let's take a look at the Python code.
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
- en: Python example
  id: totrans-324
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To create the grammar correction converter example in Python, follow these
    steps:'
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
- en: Log in to [replit.com](http://replit.com) and open your **exploring-gpt3-python**
    repl.
  id: totrans-326
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a new file: `chapter07/grammar-correction-converter.py`.'
  id: totrans-327
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy the code from the `dumb-joke-generator.py` file into `chapter07/grammar-correction-converter.py`.
  id: totrans-328
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Replace the `params` variable in `chapter07/grammar-correction-converter.py`
    with the following code:'
  id: totrans-329
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  id: totrans-330
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'Change the `.replit` file in your root folder to the following:'
  id: totrans-331
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  id: totrans-332
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'Click the `chapter07/gramar-correction-converter.py`, you should see a result
    similar to the console output in the following screenshot:'
  id: totrans-333
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 7.20 – Example output from chapter07/grammar-correction-converter.py'
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16854_07_020.jpg)'
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.20 – Example output from chapter07/grammar-correction-converter.py
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
- en: Alright, we've covered a lot of examples in this chapter, but we're not done
    yet. Let's keep moving and look at extracting information from text next.
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
- en: Extracting text
  id: totrans-338
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can also use GPT-3 to extract text values from a larger text. This is commonly
    referred to as entity extraction where the entity is the item or pattern that
    you want to extract. Or you might want to extract keywords. For that, you could
    use the following prompt.
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
- en: Extracting keywords
  id: totrans-340
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following prompt provides an example of how to extract keywords from text.
    In this case, the text is from [https://en.wikipedia.org/wiki/Quantum_mechanics](https://en.wikipedia.org/wiki/Quantum_mechanics),
    but of course, this could be done with any text:'
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  id: totrans-342
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: Now try extracting keywords using Node.js/JavaScript.
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
- en: Node.js/JavaScript example
  id: totrans-344
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To create the keyword extractor example in Node.js/JavaScript, follow these
    steps:'
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
- en: Log in to [replit.com](http://replit.com) and open your **exploring-gpt3-node**
    repl.
  id: totrans-346
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a new file: `chapter07/keyword-extractor.js`.'
  id: totrans-347
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy the code from the `dumb-joke-generator.py` file into `chapter07/keyword-extractor.js`.
  id: totrans-348
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Replace the `params` variable in `chapter07/keyword-extractor.js` with the
    following code:'
  id: totrans-349
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE51]'
  id: totrans-350
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'Change the `.replit` file in your root folder to the following:'
  id: totrans-351
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE52]'
  id: totrans-352
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'Click the `chapter07/keyword-extractor.js`, you should see a result similar
    to the console output in the following screenshot:'
  id: totrans-353
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 7.21 – Example output from chapter07/keyword-extractor.js'
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16854_07_021.jpg)'
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.21 – Example output from chapter07/keyword-extractor.js
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
- en: Now the Python example.
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
- en: Python example
  id: totrans-358
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To create the keyword extractor example in Python, follow these steps:'
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
- en: Log in to [replit.com](http://replit.com) and open your **exploring-gpt3-python**
    repl.
  id: totrans-360
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a new file: `chapter07/keyword-extractor.py`.'
  id: totrans-361
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy the code from the `dumb-joke-generator.py` file into `chapter07/keyword-extractor.py`.
  id: totrans-362
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Replace the `params` variable in `chapter07/keyword-extractor.py` with the
    following code:'
  id: totrans-363
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE53]'
  id: totrans-364
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'Change the `.replit` file in your root folder to the following:'
  id: totrans-365
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE54]'
  id: totrans-366
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'Click the `chapter07/keyword-extractor.py`, you should see a result similar
    to the console output in the following screenshot:'
  id: totrans-367
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 7.22 – Example output from chapter07/keyword-extractor.py'
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16854_07_022.jpg)'
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.22 – Example output from chapter07/keyword-extractor.py
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
- en: Let's take a look at another example.
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
- en: HTML parsing
  id: totrans-372
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this example, we will extract text from HTML. Specifically, the following
    prompt extracts the value of the title tag (the text between `<title>` and `</title>`).
    As you can see, the prompt is pretty simple. It just provides some simple directions,
    the HTML to extract from, and a label for the title:'
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  id: totrans-374
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: Now, let's try HTML parsing using Node.js/JavaScript.
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
- en: Node.js/JavaScript example
  id: totrans-376
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To create the text from HTML example in Node.js/JavaScript, follow these steps:'
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
- en: Log in to [replit.com](http://replit.com) and open your **exploring-gpt3-node**
    repl.
  id: totrans-378
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a new file: `chapter07/text-from-html.js`.'
  id: totrans-379
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy the code from the `dumb-joke-generator.py` file into `chapter07/text-from-html.js`.
  id: totrans-380
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Replace the `params` variable in `chapter07/text-from-html.js` with the following
    code:'
  id: totrans-381
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE56]'
  id: totrans-382
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'Change the `.replit` file in your root folder to the following:'
  id: totrans-383
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE57]'
  id: totrans-384
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'Click the `chapter07/text-from-html.js`, you should see a result similar to
    the console output in the following screenshot:'
  id: totrans-385
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 7.23 – Example output from chapter07/text-from-html.js'
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16854_07_023.jpg)'
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.23 – Example output from chapter07/text-from-html.js
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
- en: Let's take a look at the Python code.
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
- en: Python example
  id: totrans-390
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To create the text from HTML example in Python, follow these steps:'
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
- en: Log in to [replit.com](http://replit.com) and open your **exploring-gpt3-python**
    repl.
  id: totrans-392
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a new file: `chapter07/text-from-html.py`.'
  id: totrans-393
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy the code from the `dumb-joke-generator.py` file into `chapter07/text-from-html.py`.
  id: totrans-394
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Replace the `params` variable in `chapter07/text-from-html.py` with the following
    code:'
  id: totrans-395
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE58]'
  id: totrans-396
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'Change the `.replit` file in your root folder to the following:'
  id: totrans-397
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE59]'
  id: totrans-398
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE59]'
- en: 'Click the `chapter07/text-from-html.py`, you should see a result similar to
    the console output in the following screenshot:'
  id: totrans-399
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 7.24 – Example output from chapter07/text-from-html.py'
  id: totrans-400
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16854_07_024.jpg)'
  id: totrans-401
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.24 – Example output from chapter07/text-from-html.py
  id: totrans-402
  prefs: []
  type: TYPE_NORMAL
- en: Let's take a look at another example.
  id: totrans-403
  prefs: []
  type: TYPE_NORMAL
- en: Extracting a postal address
  id: totrans-404
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let's look at an example that extracts the postal address from an email. The
    following prompt shows how you could accomplish this.
  id: totrans-405
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  id: totrans-406
  prefs: []
  type: TYPE_NORMAL
- en: This example uses the **davinci-instruct-beta** engine, which is in beta at
    the time of publishing.
  id: totrans-407
  prefs: []
  type: TYPE_NORMAL
- en: 'You can see the prompt provides basic instructions and the postal address in
    the email is provided in a standard way so GPT-3 will likely be able to identify
    the address:'
  id: totrans-408
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  id: totrans-409
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: Now try this prompt out with Node.js/JavaScript.
  id: totrans-410
  prefs: []
  type: TYPE_NORMAL
- en: Node.js/JavaScript example
  id: totrans-411
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To create the extracting a postal address example in Node.js/JavaScript, follow
    these steps:'
  id: totrans-412
  prefs: []
  type: TYPE_NORMAL
- en: Log in to [replit.com](http://replit.com) and open your **exploring-gpt3-node**
    repl.
  id: totrans-413
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a new file: `chapter07/extract-postal-address.js`.'
  id: totrans-414
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy the code from the `dumb-joke-generator.py` file into `chapter07/extract-postal-address.js`.
  id: totrans-415
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Replace the `params` variable in `chapter07/extract-postal-address.js` with
    the following code:'
  id: totrans-416
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE61]'
  id: totrans-417
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE61]'
- en: 'Change the `.replit` file in your root folder to the following:'
  id: totrans-418
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE62]'
  id: totrans-419
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE62]'
- en: 'Click the `chapter07/extract-postal-address.js`, you should see a result similar
    to the console output in the following screenshot:'
  id: totrans-420
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 7.25 – Example output from chapter07/extract-postal-address.js'
  id: totrans-421
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16854_07_025.jpg)'
  id: totrans-422
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.25 – Example output from chapter07/extract-postal-address.js
  id: totrans-423
  prefs: []
  type: TYPE_NORMAL
- en: Now let's try the same example using Python.
  id: totrans-424
  prefs: []
  type: TYPE_NORMAL
- en: Python example
  id: totrans-425
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To create the extracting a postal address example in Python, follow these steps:'
  id: totrans-426
  prefs: []
  type: TYPE_NORMAL
- en: Log in to [replit.com](http://replit.com) and open your **exploring-gpt3-python**
    repl.
  id: totrans-427
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a new file: `chapter07/extract-postal-address.py`.'
  id: totrans-428
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy the code from the `dumb-joke-generator.py` file into `chapter07/extract-postal-address.py`.
  id: totrans-429
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Replace the `params` variable in `chapter07/extract-postal-address.py` with
    the following code:'
  id: totrans-430
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE63]'
  id: totrans-431
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE63]'
- en: 'Change the `.replit` file in your root folder to the following:'
  id: totrans-432
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE64]'
  id: totrans-433
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE64]'
- en: 'Click the `chapter07/extract-postal-address.py`, you should see a result similar
    to the console output in the following screenshot:'
  id: totrans-434
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 7.26 – Example output from chapter07/extract-postal-address.py'
  id: totrans-435
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16854_07_026.jpg)'
  id: totrans-436
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.26 – Example output from chapter07/extract-postal-address.py
  id: totrans-437
  prefs: []
  type: TYPE_NORMAL
- en: Let's take a look at a similar example – extracting an email address.
  id: totrans-438
  prefs: []
  type: TYPE_NORMAL
- en: Extracting an email address
  id: totrans-439
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This prompt is similar to the postal address example but this time we''re instructing
    GPT-3 to extract an email address:'
  id: totrans-440
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  id: totrans-441
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: Now, let's try this prompt out with Node.js/JavaScript.
  id: totrans-442
  prefs: []
  type: TYPE_NORMAL
- en: Node.js/JavaScript example
  id: totrans-443
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To create the extracting an email address example in Node.js/JavaScript, follow
    these steps:'
  id: totrans-444
  prefs: []
  type: TYPE_NORMAL
- en: Log in to [replit.com](http://replit.com) and open your **exploring-gpt3-node**
    repl.
  id: totrans-445
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a new file: `chapter07/extract-email-address.js`.'
  id: totrans-446
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy the code from the `dumb-joke-generator.py` file into `chapter07/extract-email-address.js`.
  id: totrans-447
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Replace the `params` variable in `chapter07/extract-email-address.js` with
    the following code:'
  id: totrans-448
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE66]'
  id: totrans-449
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE66]'
- en: 'Change the `.replit` file in your root folder to the following:'
  id: totrans-450
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE67]'
  id: totrans-451
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE67]'
- en: 'Click the `chapter07/extract-email-address.js`, you should see a result similar
    to the console output in the following screenshot:'
  id: totrans-452
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 7.27 – Example output from chapter07/extract-email-address.js'
  id: totrans-453
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16854_07_027.jpg)'
  id: totrans-454
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.27 – Example output from chapter07/extract-email-address.js
  id: totrans-455
  prefs: []
  type: TYPE_NORMAL
- en: Let's take a look at the Python code.
  id: totrans-456
  prefs: []
  type: TYPE_NORMAL
- en: Python example
  id: totrans-457
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To create the extracting an email address example in Python, follow these steps:'
  id: totrans-458
  prefs: []
  type: TYPE_NORMAL
- en: Log in to [replit.com](http://replit.com) and open your **exploring-gpt3-python**
    repl.
  id: totrans-459
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a new file: `chapter07/extract-email-address.py`.'
  id: totrans-460
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy the code from the `dumb-joke-generator.py` file into `chapter07/extract-email-address.py`.
  id: totrans-461
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Replace the `params` variable in `chapter07/extract-email-address.py` with
    the following code:'
  id: totrans-462
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE68]'
  id: totrans-463
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE68]'
- en: 'Change the `.replit` file in your root folder to the following:'
  id: totrans-464
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE69]'
  id: totrans-465
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE69]'
- en: 'Click the `chapter07/extract-email-address.py`, you should see a result similar
    to the console output in the following screenshot:'
  id: totrans-466
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 7.28 – Example output from chapter07/extract-email-address.py'
  id: totrans-467
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16854_07_028.jpg)'
  id: totrans-468
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.28 – Example output from chapter07/extract-email-address.py
  id: totrans-469
  prefs: []
  type: TYPE_NORMAL
- en: For our last example, we're going to close out with a chatbot.
  id: totrans-470
  prefs: []
  type: TYPE_NORMAL
- en: Creating chatbots
  id: totrans-471
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For the last set of examples, we'll look at creating chatbots. Technically,
    this would be classified as generating text so it could have been covered in *Generating
    content and lists*. But creating chatbots with GPT-3 is so much fun it deserves
    a section of its own. We'll start with a simple conversational chatbot.
  id: totrans-472
  prefs: []
  type: TYPE_NORMAL
- en: A simple chatbot
  id: totrans-473
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For our simple chatbot, we'll be using the following prompt. We'll look at code
    for both Node.js/JavaScript and Python but the prompt for both is the same.
  id: totrans-474
  prefs: []
  type: TYPE_NORMAL
- en: The first part of the prompt provides instructions for how the bot should respond
    and the general conversational style. You can change a lot about how the bot responds
    by changing the instructions and the example dialog. For instance, you could change
    the conversational tone by changing the words *friendly and polite* to *rude and
    sarcastic*.
  id: totrans-475
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is the prompt text for our simple bot:'
  id: totrans-476
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE70]'
  id: totrans-477
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: Now, let's take a look at using to implement a simple bot in Node.js/JavaScript.
  id: totrans-478
  prefs: []
  type: TYPE_NORMAL
- en: Node.js/JavaScript example
  id: totrans-479
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To create the simple chatbot example in Node.js/JavaScript, follow these steps:'
  id: totrans-480
  prefs: []
  type: TYPE_NORMAL
- en: Log in to [replit.com](http://replit.com) and open your **exploring-gpt3-node**
    repl.
  id: totrans-481
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a new file: `chapter07/simple-chatbot.js`.'
  id: totrans-482
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy the code from the `dumb-joke-generator.py` file into `chapter07/simple-chatbot.js`.
  id: totrans-483
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Replace the `params` variable in `chapter07/simple-chatbot.js` with the following
    code:'
  id: totrans-484
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE71]'
  id: totrans-485
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE71]'
- en: 'Change the `.replit` file in your root folder to the following:'
  id: totrans-486
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE72]'
  id: totrans-487
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE72]'
- en: 'Click the `chapter07/simple-chatbot.js`, you should see a result similar to
    the console output in the following screenshot:'
  id: totrans-488
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 7.29 – Example output from chapter07/simple-chatbot.js'
  id: totrans-489
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16854_07_029.jpg)'
  id: totrans-490
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.29 – Example output from chapter07/simple-chatbot.js
  id: totrans-491
  prefs: []
  type: TYPE_NORMAL
- en: Now the Python version.
  id: totrans-492
  prefs: []
  type: TYPE_NORMAL
- en: Python example
  id: totrans-493
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To create the simple chatbot example in Python, follow these steps:'
  id: totrans-494
  prefs: []
  type: TYPE_NORMAL
- en: Log in to [replit.com](http://replit.com) and open your **exploring-gpt3-python**
    repl.
  id: totrans-495
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a new file: `chapter07/simple-chatbot.py`.'
  id: totrans-496
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy the code from the `dumb-joke-generator.py` file into `chapter07/simple-chatbot.py`.
  id: totrans-497
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Replace the `params` variable in `chapter07/simple-chatbot.py` with the following
    code:'
  id: totrans-498
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE73]'
  id: totrans-499
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE73]'
- en: 'Change the `.replit` file in your root folder to the following:'
  id: totrans-500
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE74]'
  id: totrans-501
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE74]'
- en: 'Click the `chapter07/simple-chatbot.py`, you should see a result similar to
    the console output in the following screenshot:'
  id: totrans-502
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 7.30 – Example output from chapter07/simple-chatbot.py'
  id: totrans-503
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16854_07_030.jpg)'
  id: totrans-504
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.30 – Example output from chapter07/simple-chatbot.py
  id: totrans-505
  prefs: []
  type: TYPE_NORMAL
- en: That's our last example. Let's wrap up with a quick summary.
  id: totrans-506
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  id: totrans-507
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we covered generating and transforming text. We walked through
    15 examples in both Node.js/JavaScript and Python. The examples included generating
    content and lists, translating and transforming text, extracting text, and creating
    simple chatbots.
  id: totrans-508
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we'll walk through examples of classifying and categorizing
    text.
  id: totrans-509
  prefs: []
  type: TYPE_NORMAL
