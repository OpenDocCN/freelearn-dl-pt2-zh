["```py\nfiles = glob(os.path.join(path,'*/*.jpg'))\nno_of_images = len(files)\nshuffle = np.random.permutation(no_of_images)\ntrain = files[shuffle[:int(no_of_images*0.8)]]\nvalid = files[shuffle[int(no_of_images*0.8):]]\n```", "```py\nclass Architecture1(nn.Module):\n    def __init__(self, input_size, hidden_size, num_classes):\n        super(Architecture1, self).__init__()\n        self.fc1 = nn.Linear(input_size, hidden_size) \n        self.relu = nn.ReLU()\n        self.fc2 = nn.Linear(hidden_size, num_classes)\n        self.relu = nn.ReLU()\n        self.fc3 = nn.Linear(hidden_size, num_classes)      \n\n    def forward(self, x):\n        out = self.fc1(x)\n        out = self.relu(out)\n        out = self.fc2(out)\n        out = self.relu(out)\n        out = self.fc3(out)\n        return out\n```", "```py\nclass Architecture2(nn.Module):\n    def __init__(self, input_size, hidden_size, num_classes):\n        super(Architecture2, self).__init__()\n        self.fc1 = nn.Linear(input_size, hidden_size) \n        self.relu = nn.ReLU()\n        self.fc2 = nn.Linear(hidden_size, num_classes)  \n\n    def forward(self, x):\n        out = self.fc1(x)\n        out = self.relu(out)\n        out = self.fc2(out)\n        return out\n```", "```py\nmodel = Architecture1(10,20,2)\n\noptimizer = torch.optim.Adam(model.parameters(), lr=1e-4, weight_decay=1e-5)\n```", "```py\nnn.dropout(x, training=True)\n```", "```py\n scheduler = StepLR(optimizer, step_size=30, gamma=0.1)\n for epoch in range(100):\n     scheduler.step()\n     train(...)\n     validate(...)\n```", "```py\n scheduler = MultiStepLR(optimizer, milestones=[30,80], gamma=0.1)\n for epoch in range(100):\n     scheduler.step()\n     train(...)\n     validate(...)\n```", "```py\n optimizer = torch.optim.SGD(model.parameters(), lr=0.1,    \n   momentum=0.9)\n scheduler = ReduceLROnPlateau(optimizer, 'min')\n for epoch in range(10):\n     train(...)\n     val_loss = validate(...)\n     # Note that step should be called after validate()\n     scheduler.step(val_loss)\n```"]