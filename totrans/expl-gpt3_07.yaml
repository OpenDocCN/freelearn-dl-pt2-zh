- en: '*Chapter 5*: Calling the OpenAI API in Code'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第五章*：在代码中调用OpenAI API'
- en: In the previous chapter, we looked at calling the OpenAI API using Postman.
    In this chapter, you'll learn how to start using the API in code. Since the OpenAI
    API can be used with virtually any programming language, we'll take a look at
    two popular languages, JavaScript and Python. If you're not a programmer, no problem.
    We'll be using an online environment that makes getting started with code super
    simple. Plus, easy-to-follow code examples are provided in both JavaScript and
    Python so you can choose the language that is most comfortable for you. Also,
    for clarity, the examples are purposely written with as little code as possible.
    So, the examples may not always follow coding best practices, but the goal is
    to make following along easy!
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们看了一下如何使用Postman调用OpenAI API。在这一章中，你将学习如何在代码中开始使用API。因为OpenAI API几乎可以与任何编程语言一起使用，我们将看一下两种流行的语言，JavaScript和Python。如果你不是程序员，没问题。我们将使用一个在线环境，让入门编程变得非常简单。而且，JavaScript和Python都提供了易于跟随的代码示例，因此你可以选择最适合你的语言。此外，为了清晰起见，示例故意尽可能少地写代码。因此，示例可能并不总是遵循编码最佳实践，但目标是使跟随变得更容易！
- en: 'The topics we''ll cover in this chapter are as follows:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Choosing your programming language
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 选择编程语言
- en: Introducing replit.com
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 介绍replit.com
- en: Using the OpenAI API with Node.js/JavaScript
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Node.js/JavaScript使用OpenAI API
- en: Using the OpenAI API with Python
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Python使用OpenAI API
- en: Using other programming languages
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用其他编程语言
- en: Technical requirements
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'This chapter requires that you have access to the **OpenAI API**. You can request
    access by visiting the following URL: [https://openai.com](https://openai.com).'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 本章需要你可以访问**OpenAI API**。你可以通过访问以下网址请求访问权限：[https://openai.com](https://openai.com)。
- en: Choosing your programming language
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 选择编程语言
- en: The OpenAI API is a standards-based API that can be used with virtually any
    modern programming language. In this chapter, we'll walk through examples in JavaScript
    and Python. But these are just two of the many languages that could be used. JavaScript
    and Python were selected because they are both extremely popular and easy to get
    started with. If you're proficient with another modern programming language, that's
    probably the best option for you. However, if you're new to programming, your
    coding skills are rusty, or you're interested in dabbling in a new language, then
    JavaScript and Python are both great languages. But the examples for each language
    will all be the same – just the programming language is different. So, you can
    skip to the section that covers the language you prefer. Or, if you're feeling
    adventurous, of course, you're free to try them both!
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: OpenAI API是一个基于标准的API，可用于几乎任何现代编程语言。在本章中，我们将介绍JavaScript和Python的例子。但这只是众多可用语言中的两种。选择JavaScript和Python是因为它们都非常受欢迎且易于上手。如果你精通其他现代编程语言，那可能是最好的选择。但如果你是新手，或者你的编程技能有些生疏，或者想尝试一种新语言，那么JavaScript和Python都是很好的选择。但是每种语言的例子都是相同的，只是编程语言不同。因此，你可以跳到你偏好的语言部分。或者，如果你感到有冒险精神，当然你可以尝试两种语言！
- en: Introducing replit
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍replit
- en: In this chapter and the following chapters, we're going to be writing code.
    So, we'll need a code editor of some sort. As with programming languages, when
    it comes to code editors, there are many to choose from. The right one is a matter
    of personal preference and opinion. For our examples, we'll be using an online
    code editor from [replit.com](http://replit.com).
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章以及接下来的章节中，我们将会编写代码。因此，我们需要某种代码编辑器。就像编程语言一样，当涉及到代码编辑器时，有很多选择。选择正确的代码编辑器是一个个人偏好和观点问题。对于我们的例子，我们将使用来自[replit.com](http://replit.com)的在线代码编辑器。
- en: While all of the examples we'll be working through could be done in any code
    editor, replit lets us skip the installation and software setup process because
    we can do everything in our web browser.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然我们将要讨论的所有示例都可以在任何代码编辑器中完成，但replit可以让我们跳过安装和软件设置过程，因为我们可以在网页浏览器中完成所有操作。
- en: Plus, with a code editor, some setup on your local computer would be required.
    For example, for both JavaScript and Python a runtime environment needs to be
    installed. We're going to skip all that so we can focus more time on learning
    GPT-3 and the OpenAI API.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，使用代码编辑器时，需要在本地计算机上进行一些设置。例如，JavaScript和Python都需要安装运行环境。我们会跳过这些，这样就能更多时间专注于学习GPT-3和OpenAI
    API。
- en: So, what is `replit.com`? It's an in-browser code editor and **Integrated Development
    Environment** (**IDE**) that lets you start coding in over 50 programming languages
    without spending any time setting up a local development environment. So, for
    our examples, you can jump right into the code even if you don't have your local
    computer set up to run Node.js or Python.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，`replit.com` 是什么？它是一个基于浏览器的代码编辑器和**集成开发环境（IDE）**，让你可以在50多种编程语言中开始编码，而无需花费时间设置本地开发环境。所以，对于我们的示例，即使你的本地计算机没有设置好运行
    Node.js 或 Python 的环境，你也可以立即开始编码。
- en: 'The following screenshot shows the replit home page, which is where you''ll
    go to set up a free replit account if you don''t have one:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的截图展示了 replit 的主页，如果你还没有，则可以在这里免费注册一个 replit 账户：
- en: '![Figure 5.1 – The replit home page'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '![图5.1 – replit 主页'
- en: '](img/B16854_05_001.jpg)'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16854_05_001.jpg)'
- en: Figure 5.1 – The replit home page
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: ��5.1 – replit 主页
- en: Creating an account is just a matter of clicking the signup button and completing
    the signup process. For the examples in this book, a free account is all you need.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个账户只需要点击注册按钮并完成注册过程。在本书的示例中，你只需要一个免费账户。
- en: 'After you''ve signed up, you''ll be logged in to the default home screen as
    *Figure 5.2* shows:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在你注册完后，你将登录到默认的主页，如*图5.2*所示：
- en: '![Figure 5.2 – Replit default home screen'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '![图5.2 – Replit 默认主页'
- en: '](img/B16854_05_002.jpg)'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16854_05_002.jpg)'
- en: Figure 5.2 – Replit default home screen
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.2 – Replit 默认主页
- en: From here, we'll create two code projects, which are referred to as **repls**
    in replit.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 从这里，我们将创建两个代码项目，它们在 replit 中被称为**repl**。
- en: Creating a repl
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建一个 repl
- en: We'll be looking at code examples in JavaScript and Python. So, we'll need to
    set up a repl for each. For JavaScript, we'll be using **Node.js** (or just Node),
    which is a runtime environment for JavaScript. We'll talk more about Node in the
    *Using the OpenAI API with Node.js/JavaScript* section. We will start by creating
    a repl for Python. Then, we'll create a repl for Node.js/JavaScript.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将会查看 JavaScript 和 Python 的代码示例。所以，我们需要分别为两种语言设置 repl。对于 JavaScript，我们将会使用**Node.js**（或者简称为
    Node），它是 JavaScript 的运行环境。我们会在*使用 Node.js/JavaScript 调用 OpenAI API*部分详细讨论 Node.js。首先，我们会创建一个
    Python 的 repl。然后，再创建一个 Node.js/JavaScript 的 repl。
- en: Creating a repl for Python
  id: totrans-29
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 为 Python 创建一个 repl
- en: Lets' start by creating a new repl for Python. If you'd prefer to just follow
    along using just Node.js/JavaScript, you can skip to *Creating a repl for Node.js*.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从为 Python 创建一个新的 repl 开始。如果你更喜欢只使用 Node.js/JavaScript 进行示例，你可以直接跳到*为 Node.js
    创建一个 repl*。
- en: 'From the home screen, click on the **+ New Repl** button:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 从主页，点击**+ New Repl**按钮：
- en: Choose Python from the repl type dropdown.
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 repl 类型下拉菜单中选择 Python。
- en: Name the repl `exploring-gpt3-python`.
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 repl 命名为 `exploring-gpt3-python`。
- en: Click the **Create repl** button.
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**创建 repl**按钮。
- en: Next, we'll create a repl for Node.js. If you'll only be using Python, you can
    skip the next section.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将为 Node.js 创建一个 repl。如果你只会使用 Python，你可以跳过下一部分。
- en: Creating a repl for Node.js
  id: totrans-36
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 为 Node.js 创建一个 repl
- en: 'If you''re following along with Node.js, you''ll need a Node repl. To create
    a Node repl, use the following steps. From the home screen, click on the **+ New
    Repl** button:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你跟着做 Node.js 实例，你将需要一个 Node repl。要创建一个 Node repl，按照以下步骤。从主页，点击**+ New Repl**按钮：
- en: Choose Node.js from the repl type dropdown.
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 repl 类型下拉菜单中选择 Node.js。
- en: Name the repl `exploring-gpt3-node`.
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 repl 命名为 `exploring-gpt3-node`。
- en: Click the **Create repl** button.
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**创建 repl**按钮。
- en: 'The following screenshot shows a new repl being created for Python. Again,
    for JavaScript, you''d select Node.js rather than Python and then name the repl
    `exploring-gpt3-node`:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的截图展示了为 Python 创建一个新的 repl。同样的，对于 JavaScript，你会选择 Node.js 而不是 Python，然后将 repl
    命名为 `exploring-gpt3-node`：
- en: '![Figure 5.3 – Setting up a repl for Python'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '![图5.3 – 设置 Python 的 repl'
- en: '](img/B16854_05_003.jpg)'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16854_05_003.jpg)'
- en: Figure 5.3 – Setting up a repl for Python
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.3 – 设置 Python 的 repl
- en: 'After a repl is created, you''re automatically redirected to the replit editor
    with your new repl loaded. The editor is broken down into three panes: the **Navigation**
    pane, the **Code editor** pane, and the **Output** pane. New repls include a default
    file that is opened in the code editor (the middle pane) when you first access
    the repl.'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 创建完 repl 后，你会自动被重定向到 replit 编辑器，里面已经加载了你的新 repl。编辑器分为三个窗格：**导航**窗格、**代码编辑**窗格和**输出**窗格。新的
    repl 包括一个默认文件，当你第一次访问 repl 时会在代码编辑器（中间窗格）打开。
- en: 'In the case of a Python project, the default file is named `main.py`; for a
    Node.js project, the default file is named `index.js`. The following screenshot
    shows the replit editor with the `main.py` open in the editor pane. A Node.js
    repl would look the same but the default file would be named `index.js` rather
    than `main.py`:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.4 – The Replit editor with a default Python repl'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16854_05_004.jpg)'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.4 – The Replit editor with a default Python repl
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
- en: The default file is the code file that gets run by default when the **Run**
    button is clicked. The run button is located in the middle of the top navigation
    bar located just above the three editor panes. The results or output from the
    code is then shown in the replit console – the output pane on the right.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
- en: The default files are empty when a repl is first created, so clicking the **Run**
    button won't do anything until you write some code.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
- en: Above the three editor panes, on the left side of the top navigation bar is
    a hamburger menu (the icon that looks like stacked lines). If you click that icon,
    the main navigation options will be displayed. You can use this menu to navigate
    between repls by selecting the **My repls** menu and choosing the repl you want
    to open.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows the main menu with the **My repls** option selected:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.5 – Accessing the main navigation menu'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16854_05_005.jpg)'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.5 – Accessing the main navigation menu
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
- en: After creating a repl for the language you want to work with (or both languages),
    y, you'll want to store your OpenAI API key as an environment variable.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
- en: Setting your OpenAI API key as an environment variable
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Environment variables are named values that can be accessed in code but don't
    get shared with others. You typically use environment variables to set parameter
    values that are private or specific to a user, for example, your OpenAI API key.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
- en: 'In replit, you can save environment variables by clicking on the padlock icon
    (**Secrets**) in the navigation pane and adding a name and value pair. You''ll
    need to do this for each repl you''re working with – so, one in your **exploring-gpt3-node**
    repl and/or in your **exploring-gpt3-python** repl. To add your OpenAI API Key
    as an environment variable, do the following:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
- en: Open your repl.
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the padlock icon (**Secrets**) in the middle of the navigation pane like
    the following screenshot shows:![Figure 5.6 – Adding a new secret/environment
    variable in Replit
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B16854_05_006.jpg)'
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 5.6 – Adding a new secret/environment variable in Replit
  id: totrans-65
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: In the `OPENAI_API_KEY`.
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Value** input text area, paste in your OpenAI API.
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Add new secret** button.
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Again, you'll need to add the **OPENAI_API_KEY** secret/environment variable
    to each repl. So, you'll complete the preceding steps twice if you're following
    along with both Node.js and Python.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
- en: If you're using a free version of replit.com your code will be public by default.
    However, `secrets/environment` `variables` don't get shared publicly but can be
    seen by collaborators who you explicitly invite to the repl. This is important
    because you don't want to share or accidentally expose your OpenAI API key. To
    read more about using secrets and environment variables in replit, visit [https://docs.replit.com/repls/secret-keys](https://docs.replit.com/repls/secret-keys).
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您使用的是 replit.com 的免费版本，默认情况下，您的代码将是公开的。但是，`secrets/environment` `variables`
    不会被公开共享，但可以被明确邀请到 repl 的合作人员看到。这很重要，因为您不希望共享或意外暴露您的 OpenAI API 密钥。要了解更多关于在 replit
    中使用秘密和环境变量的信息，访问[https://docs.replit.com/repls/secret-keys](https://docs.replit.com/repls/secret-keys)。
- en: Before we start coding, there is one more special file we need to create, the
    `.replit` file.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始编码之前，我们需要创建一个特殊的文件，即`.replit`文件。
- en: Understanding and creating the .replit file
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解并创建`.replit`文件。
- en: 'In replit, by default, when you click the `main.py` file will be run for Python
    repls and the `index.js` file will be run for Node.js repls. However, you can
    create a file named `.replit` and change the code file that will be executed by
    the `.replit` file. To create a `.replit` file, do the following:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在 replit 中，默认情况下，当您单击时，`main.py` 文件将为 Python repl 运行，`index.js` 文件将为 Node.js
    repl 运行。但是，您可以创建一个名为`.replit`的文件，并更改由`.replit`文件执行的代码文件。要创建`.replit`文件，请执行以下操作：
- en: Open your repl.
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开您的 repl。
- en: Click the add file icon on the top-right side of the navigation pane.
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击导航窗格右上角的添加文件图标。
- en: Name the file `.replit`.
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将文件命名为`.replit`。
- en: 'Add the following text to the first line of the `.replit` file:'
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下文本添加到`.replit`文件的第一行中：
- en: '**For Python repls**:'
  id: totrans-79
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**对于 Python repl**：'
- en: '[PRE0]'
  id: totrans-80
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '**For Node.js repls**:'
  id: totrans-81
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**对于 Node.js repl**：'
- en: '[PRE1]'
  id: totrans-82
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: You might have noticed that we've just added instructions to run the file that
    would be run by default. That's okay for now, we'll come back and edit the `run`
    statement in our `.replit` file later.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能已经注意到，我们刚刚添加了要按默认方式运行的文件的说明。现在没问题，稍后我们将回来编辑我们`.replit`文件中的`run`语句。
- en: After you've created a repl for Node.js and/or a repl for Python with your OpenAI
    API key added as an environment variable, and a `.replit` file, you're ready to
    start coding. So, in the next section, we'll look at examples using Node.js/JavaScript.
    But, if you're just following along with Python, you can skip ahead to *Using
    the OpenAI API in Python*.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 当您为 Node.js 或 Python 创建 repl，并将您的 OpenAI API 密钥添加为环境变量，并添加一个`.replit`文件后，您就可以开始编码了。因此，在下一节中，我们将看一下使用
    Node.js/JavaScript 的示例。但是，如果您只是在 Python 方面跟着做，您可以直接跳到*在 Python 中使用 OpenAI API*。
- en: Using the OpenAI API with Node.js/JavaScript
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Node.js/JavaScript 调用 OpenAI API
- en: JavaScript is the first programming language we're going to look at. JavaScript
    was originally created for scripting functionality on web pages. However, today,
    JavaScript can be used for just about any type of application development, from
    building websites and mobile apps to creating command-line tools, chatbots, and
    voice assistants – all thanks to Node. As mentioned previously, Node is a runtime
    environment for JavaScript. It lets us use JavaScript outside the web browser.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript 是我们要看的第一种编程语言。JavaScript 最初是为在网页上编写脚本功能而创建的。然而，如今，JavaScript 可以用于几乎任何类型的应用程序开发，从构建网站和移动应用程序到创建命令行工具、聊天机器人和语音助手
    - 这一切都归功于 Node。如前所述，Node 是 JavaScript 的运行时环境。它使我们能够在网页浏览器之外使用 JavaScript。
- en: JavaScript and Node.js are both free to use and can be run on Linux, macOS,
    and Windows operating systems. But we won't be installing Node.js or running anything
    locally because all of our code will be run on replit. However, none of the code
    we'll be writing is in any way dependent on replit. So, everything we'll be doing
    could be done in any environment that was properly configured for Node development.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript 和 Node.js 都是免费使用的，并且可以在 Linux、macOS 和 Windows 操作系统上运行。但我们不会安装 Node.js，也不会在本地运行任何东西，因为我们所有的代码都将在
    replit 上运行。但是，我们将编写的代码中没有任何与 replit 有关的依赖。因此，我们将要做的所有事情都可以在任何为 Node 开发正确配置的环境中完成。
- en: Alright, let's get to coding. To use the OpenAI API in Node, we essentially
    just need to do what we did in [*Chapter 4*](B16854_04_ePub_AM.xhtml#_idTextAnchor074),
    *Working with the OpenAI API* – make authenticated HTTP requests to the OpenAI
    API endpoints. But rather than using Postman, we'll be making HTTP requests with
    JavaScript. We'll start with the simplest example – calling the engines endpoint.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 好了，让我们开始编码。为了在 Node 中使用 OpenAI API，我们基本上只需做和[*第4章*](B16854_04_ePub_AM.xhtml#_idTextAnchor074)，*与
    OpenAI API 一起工作*一样的步骤 – 对 OpenAI API 端点进行身份验证的 HTTP 请求。但是我们不会使用 Postman，而是会使用
    JavaScript 进行 HTTP 请求。我们将从最简单的例子开始 – 调用 engines 端点。
- en: Calling the engines endpoint
  id: totrans-89
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 调用 engines 端点
- en: 'We''ll start by setting up a new folder for the code we''ll be working on in
    this chapter. Then we''ll add a file for our first example and update the `.replit`
    file so the replit **Run** button executes our new file. Here are the steps to
    follow:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将首先设置一个新的文件夹来进行本章的工作。然后，我们将添加一个文件作为我们第一个示例，并更新 `.replit` 文件，以便 replit **Run**
    按钮执行我们的新文件。以下是要遵循的步骤：
- en: Open your **exploring-gpt3-node** repl.
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开您的**exploring-gpt3-node** repl。
- en: Click the **Add folder** icon in the top right of the navigation pane.
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击导航窗格右上角的**添加文件夹**图标。
- en: Name the folder `chapter05`.
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 命名文件夹为 `chapter05`。
- en: Select the `chapter05` folder and then click the `engines.js`.
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择 `chapter05` 文件夹，然后单击 `engines.js`。
- en: 'Edit the `.replit` file so the `chapter05/engines.js` using the following text:'
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑 `.replit` 文件，使 `chapter05/engines.js` 使用以下文本：
- en: '[PRE2]'
  id: totrans-96
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Now, open the `chapter05/engines.js` file in your replit editor by clicking
    on the filename in the navigation pane. Your replit editor should look something
    like the following screenshot:![Figure 5.7 – Editing engines.js in the Replit
    editor
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，通过单击导航窗格中的文件名来打开您的 replit 编辑器中的 `chapter05/engines.js` 文件。您的 replit 编辑器应该看起来类似以下屏幕截图：![图5.7
    – 在 Replit 编辑器中编辑 engines.js
- en: '](img/B16854_05_007.jpg)'
  id: totrans-98
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B16854_05_007.jpg)'
- en: Figure 5.7 – Editing engines.js in the Replit editor
  id: totrans-99
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图5.7 – 在 Replit 编辑器中编辑 engines.js
- en: So, now we're going to write some code to call `https://api.openai.com/v1/engines`.
    There are a number of ways to make an HTTP request with Node and JavaScript. We
    won't get into all of the different options or the pros and cons of one approach
    over another. We're just going to use a popular code library (referred to as a
    `axios`.
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们要编写一些代码调用 `https://api.openai.com/v1/engines`。有许多种方式可以使用 Node 和 JavaScript
    进行 HTTP 请求。我们不会详细介绍所有不同选项或一个方法优于另一个方法的优点和缺点。我们只会使用一个流行的代码库（称为 `axios`）。
- en: Important note
  id: totrans-101
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 重要提示
- en: Packaged and shared code libraries are common across most modern programming
    languages. In Node.js, packages (or modules) are most commonly shared using a
    package manager called npm. To learn more about Npm, you can visit [https://npmjs.com](https://npmjs.com).
    replit automatically manages package dependencies for Node.js projects. However,
    in a local development environment, the Npm command-line tool would most commonly
    be used to manage packages used in code.
  id: totrans-102
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Node.js中打包和共享的代码库在大多数现代编程语言中都很常见。在 Node.js 中，包（或模块）最常使用一个名为 npm 的包管理器共享。要了解更多关于
    npm 的信息，您可以访问 [https://npmjs.com](https://npmjs.com)。replit 自动管理 Node.js 项目的包依赖关系。但是，在本地开发环境中，通常使用
    Npm 命令行工具来管理代码中使用的包。
- en: 'In short, the `axios` module minimizes the code we need to write to make HTTP
    requests using JavaScript. So, we''ll include a reference to the `axios` module
    on the first line of our `engines.js` file with the following code:'
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 简而言之，`axios` 模块最大程度地减少了我们使用 JavaScript 进行 HTTP 请求时需要编写的代码。因此，我们将在我们的 `engines.js`
    文件的第一行包含对 `axios` 模块的引用，代码如下：
- en: '[PRE3]'
  id: totrans-104
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'You''ll recall from [*Chapter 4*](B16854_04_ePub_AM.xhtml#_idTextAnchor074),
    *Working with the OpenAI API*, that all of the OpenAI API endpoints require authorization.
    So, on the next line, we''ll add a variable to hold our OpenAI API key. But rather
    than hardcoding the value, we will pull it from the environment variable we set
    up:'
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你会记得[*第4章*](B16854_04_ePub_AM.xhtml#_idTextAnchor074), *与 OpenAI API 一起工作*，所有
    OpenAI API 端点都需要授权。因此，在下一行，我们将添加一个变量来保存我们的 OpenAI API 密钥。但是，我们不会硬编码数值，而是从我们设置的环境变量中获取：
- en: '[PRE4]'
  id: totrans-106
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Next, we''ll create an in-code HTTP client to make the requests. The `axios`
    module makes this super simple. To create the HTTP client instance, we''ll add
    the following code:'
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将创建一个内部 HTTP 客户端来进行请求。`axios` 模块使这变得非常简单。为了创建 HTTP 客户端实例，我们将添加以下代码：
- en: '[PRE5]'
  id: totrans-108
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Note in the preceding code that we''ve added an HTTP `Authorization` header
    that uses our OpenAI API key as the bearer token. This lets the `axios` client
    make authenticated requests to the API endpoints. All that remains is code to
    actually make the request. Here is what that code looks like:'
  id: totrans-109
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-110
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: In the preceding code, we're using the `axios` client instance to make a GET
    request to the `https://api.openai.com/v1/engines` endpoint. Then, we're logging
    the results returned from the endpoint to the console. Or, in the case of an error,
    we're logging the error message to the console.
  id: totrans-111
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'At this point, you should be able to click the **Run** button in replit and
    see the results in the replit console, where there''ll be an output like what''s
    shown in the following screenshot:'
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 5.8 – Results from running the engines.js code'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16854_05_008.jpg)'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.8 – Results from running the engines.js code
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
- en: So, with 12 lines of code (really 11 since one line is blank), we've made our
    first API request using JavaScript and Node.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
- en: Now let's take a look at calling the Completions endpoint. This one is a bit
    more involved because we need to send data to the endpoint. But still, the code
    is pretty simple.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
- en: Calling the Completions endpoint
  id: totrans-118
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now we''ll look at calling the Completions endpoint. We''ll start by creating
    a new file named `completions.js` in the `chapter05` folder and we''ll edit our
    `.replit` file so the **Run** button will execute our new file. To do that, follow
    these steps:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
- en: Open your **exploring-gpt3-node** repl.
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the `chapter05` folder in the navigation pane.
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the `completions.js`.
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Edit the `.replit` file so the `chapter05/completions.js` using the following
    text:'
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-124
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Next, copy the first five lines of code from `chapter05/engines.js` into `chapter05/completions.js`
    so your `completions.js` file starts with the following code:'
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-126
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'For the Completions endpoint, we''ll be sending parameters. So, the next thing
    we''ll do is add what will become the JSON object that is sent in the HTTP body.
    Recall from [*Chapter 4*](B16854_04_ePub_AM.xhtml#_idTextAnchor074), *Working
    with the OpenAI API*, that there are a number of parameters the Completions endpoint
    accepts. But for this example, we''re just going to be sending the `prompt` parameter
    and the `max_tokens` parameter. Here is what the code for that looks like:'
  id: totrans-127
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-128
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'All that''s left is to actually make the request. This time we''ll be making
    an HTTP POST and passing our parameters. So, the code is slightly different from
    the last example but here is what it looks like:'
  id: totrans-129
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-130
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'That''s it. Now when you click the **Run** button in replit, you should get
    a result back from the Completions endpoint that looks something like the following
    screenshot:'
  id: totrans-131
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 5.9 – Output from Completions.js'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16854_05_009.jpg)'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.9 – Output from Completions.js
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
- en: 'As we discussed in [*Chapter 4*](B16854_04_ePub_AM.xhtml#_idTextAnchor074),
    *Working with the OpenAI API*, the responses returned from the endpoints are in
    JSON format. But if you wanted to format the output, you could extract just what
    you wanted to display from the JSON. For example, you could update `console.log(result.data)`
    with the following code to display the original prompt text `Once upon a time`
    and the completion text returned by the API:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在[*第4章*](B16854_04_ePub_AM.xhtml#_idTextAnchor074)中所讨论的，*使用OpenAI API*，从端点返回的响应是以JSON格式返回的。但是，如果您想要格式化输出，您可以从JSON中提取您想要显示的内容。例如，您可以使用以下代码更新`console.log(result.data)`以显示API返回的原始提示文本`从前，有一只...`和完成文本：
- en: '[PRE11]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'If you make that change and run the code again, the output will look something
    like the output in the following screenshot:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您进行了更改并再次运行代码，则输出将类似于以下截图中的输出：
- en: '![Figure 5.10 – Formatted results from completions.js'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: '![图5.10 – 来自completions.js的格式化结果'
- en: '](img/B16854_05_010.jpg)'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16854_05_010.jpg)'
- en: Figure 5.10 – Formatted results from completions.js
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.10 – 来自completions.js的格式化结果
- en: With just two examples, we've covered the basic code you need to work with all
    of the OpenAI endpoints. But before we move on, let's look at one more example
    using the search endpoint.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 仅仅通过两个示例，我们就介绍了您需要使用所有OpenAI端点的基本代码。但在我们继续之前，让我们看一看使用搜索端点的另一个示例。
- en: Calling the search endpoint
  id: totrans-142
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 调用搜索端点
- en: 'For our search example, we''ll create a new file named `search.js` in the `chapter05`
    folder and we''ll edit our `.replit` file so the `chapter05/search.js`. To do
    that, follow these steps:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的搜索示例，我们将在`chapter05`文件夹中创建一个名为`search.js`的新文件，并编辑我们的`.replit`文件，以便`chapter05/search.js`。要实现这一点，请按照以下步骤进行：
- en: Open your **exploring-gpt3-node** repl.
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开您的**exploring-gpt3-node** repl。
- en: Select the `chapter05` folder in the navigation pane.
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在导航窗格中选择`chapter05`文件夹。
- en: Click the `search.js`.
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击`search.js`。
- en: 'Edit the `.replit` file so the `chapter05/search.js` using the following `run`
    command:'
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑`.replit`文件，使`chapter05/search.js`使用以下`run`命令：
- en: '[PRE12]'
  id: totrans-148
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Next, copy the first five lines of code from `chapter05/engines.js` into `chapter05/search.js`
    so your `search.js` file starts with the following code:'
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，将`chapter05/engines.js`中的前五行代码复制到`chapter05/search.js`中，使您的`search.js`文件以以下代码开始：
- en: '[PRE13]'
  id: totrans-150
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'For the search endpoint, we''ll be sending parameters. So, the next thing we''ll
    do is add what will become the JSON object that is sent in the HTTP body. In [*Chapter
    4*](B16854_04_ePub_AM.xhtml#_idTextAnchor074), *Working with the OpenAI API*,
    we covered the parameters for the search endpoint, but here is the code we''ll
    use for this example:'
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于搜索端点，我们将发送参数。因此，接下来我们将添加即将发送到HTTP主体中的JSON对象。在[*第4章*](B16854_04_ePub_AM.xhtml#_idTextAnchor074)中，我们讨论了搜索端点的参数，但以下是我们将在此示例中使用的代码：
- en: '[PRE14]'
  id: totrans-152
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'All that''s left is to actually make the request. Like with the completions
    example, we''ll be making an HTTP POST and passing our parameters:'
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 剩下的就是实际发出请求。就像完成示例一样，我们将进行HTTP POST并传递我们的参数：
- en: '[PRE15]'
  id: totrans-154
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'That''s it. Now when you click the **Run** button in replit, you should get
    a result back from the search endpoint that looks something like the following
    screenshot:'
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 就这样。现在，当您在replit中点击**运行**按钮时，您应该会从搜索端点获得类似以下截图的结果：
- en: '![Figure 5.11 – Results from search.js'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: '![图5.11 – 来自search.js的结果'
- en: '](img/B16854_05_011.jpg)'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16854_05_011.jpg)'
- en: Figure 5.11 – Results from search.js
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.11 – 来自search.js的结果
- en: All of the JavaScript examples we covered in this section were pretty simple.
    However, they should give you a general idea of how to get started calling the
    OpenAI API with JavaScript and Node.js, which was the goal. In the following chapters,
    we'll dive deeper, but for now we're going to move on to our next language – Python.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在本节中讨论的所有JavaScript示例都相当简单。但是，它们应该给您一个使用JavaScript和Node.js开始调用OpenAI API的一般思路，这正是我们的目标。在接下来的章节中，我们将更深入地讨论，但现在我们将转向我们的下一个语言–Python。
- en: Using the OpenAI API in Python
  id: totrans-160
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Python中的OpenAI API
- en: Python is another popular programming language, and it is especially popular
    among the machine learning community. It's a robust language but it's also very
    beginner-friendly. If you are coding for the first time, Python will probably
    be one of the easier languages to get started with. Like with JavaScript/Node,
    Python is open source and can be used on Linux, macOS, or Windows. It is also
    included with many operating systems, including macOS and most Linux distributions.
    But since we'll be working in replit, we don't need to worry about Python being
    installed on our local machine. That said, nothing in the code we'll be writing
    depends on anything that is specific to replit. So, everything we'll be doing
    could be done on any computer that is properly configured for doing Python development.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: Python 是另一种流行的编程语言，在机器学习社区中尤其受欢迎。 这是一种强大的语言，但也非常适合初学者。 如果你是第一次编程，那么 Python 可能是最容易入门的语言之一。
    与 JavaScript/Node 一样，Python 是开源的，可以在 Linux、macOS 或 Windows 上使用。 它还包含在许多操作系统中，包括
    macOS 和大多数 Linux 发行版。 但由于我们将在 replit 中工作，所以不需要担心 Python 是否安装在我们的本地机器上。 也就是说，我们将要编写的代码中没有任何依赖于
    replit 特定内容的地方。 因此，我们将在任何正确配置用于 Python 开发的计算机上完成所有工作。
- en: For our first example, we'll look at using Python to call the OpenAI Engines
    endpoint.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的第一个示例，我们将看一下如何使用 Python 调用 OpenAI Engines 端点。
- en: Calling the engines endpoint
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 调用 engines 端点
- en: 'We''ll start by setting up a new folder for the Python code we''ll be working
    on in this chapter. Then, we''ll add a file for our first example and update the
    `.replit` file so the replit **Run** button executes our new file. Here are the
    steps to follow:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将通过为本章中即将开发的 Python 代码设置一个新文件夹开始。 然后，我们将添加一个文件作为我们的第一个示例，并更新`.replit`文件，以便
    replit **Run** 按钮可执行我们的新文件。 应按照以下步骤操作：
- en: Open your **exploring-gpt3-python** repl.
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开你的**exploring-gpt3-python** replit。
- en: Click the **Add folder** icon in the top right of the navigation pane.
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击导航窗格右上角的**添加文件夹**图标。
- en: Name the folder `chapter05`.
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将文件夹命名为`chapter05`。
- en: Select the `chapter05` folder, then click the `engines.py`.
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择`chapter05`文件夹，然后点击`engines.py`。
- en: 'Edit the `.replit` file so the `chapter05/engines.py` using the following text:'
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑`.replit`文件，使得`chapter05/engines.py`使用以下文本：
- en: '[PRE16]'
  id: totrans-170
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Now, open the `chapter05/engines.py` file in your replit editor by clicking
    on the filename in the navigation pane. Your replit editor should look something
    like the following screenshot:![Figure 5.12 – Editing engines.py in the Replit
    editor
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，通过导航窗格中点击文件名，在 replit 编辑器中打开`chapter05/engines.py`文件。 您的 replit 编辑器应该看起来类似于以下截图：![图5.12
    – 在 Replit 编辑器中编辑 engines.py
- en: '](img/B16854_05_012.jpg)'
  id: totrans-172
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B16854_05_012.jpg)'
- en: Figure 5.12 – Editing engines.py in the Replit editor
  id: totrans-173
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图5.12 – 在 Replit 编辑器中编辑 engines.py
- en: So, now we're going to write some Python code to make an HTTP request to the
    `https://api.openai.com/v1/engines` endpoint. There are a number of ways to make
    an HTTP request with Python. We won't get into all of the different options or
    the pros and cons of one approach over another. We're just going to use the popular
    `requests` library.
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们将编写一些 Python 代码，以向`https://api.openai.com/v1/engines`端点发出 HTTP 请求。 有许多方法可以使用
    Python 发出 HTTP 请求。 我们不会深入探讨所有不同的选项，或者一种方法胜过另一种方法的利弊。 我们只是将使用流行的`requests`库。
- en: Important note
  id: totrans-175
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 重要提示
- en: Packaged and shared code libraries are common across most modern programming
    languages. In Python, packages (or libraries) are most commonly shared using a
    package manager called PIP. To learn more about PIP, you can visit [https://pypi.org/project/pip/](https://pypi.org/project/pip/).
    replit automatically manages package dependencies for Python projects. However,
    in a local development environment, the PIP command-line tool would most commonly
    be used to manage Python packages.
  id: totrans-176
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 包装和共享的代码库在大多数现代编程语言中很常见。 在 Python 中，包（或库）通常使用一个名为 PIP 的软件包管理器进行共享。 要了解有关 PIP
    的更多信息，您可以访问[https://pypi.org/project/pip/](https://pypi.org/project/pip/)。 replit
    自动管理 Python 项目的软件包依赖关系。 但是，在本地开发环境中，常用的是使用 PIP 命令行工具来管理 Python 包。
- en: 'In short, the `requests` library minimizes the code we need to write to make
    HTTP requests using Python. So, we''ll include a reference to the `requests` library
    on the first line of our `engines.py` file with the following code:'
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 简而言之，`requests`库最大程度地减少了我们需要编写的代码，以使用 Python 进行 HTTP 请求。 因此，我们将在我们的`engines.py`文件的第一行包含对`requests`库的引用，代码如下所示：
- en: '[PRE17]'
  id: totrans-178
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'You''ll recall from [*Chapter 4*](B16854_04_ePub_AM.xhtml#_idTextAnchor074),
    *Working with the OpenAI API*, that all of the OpenAI API endpoints require authorization.
    So, next we''ll add some code to get the API key that we set up in the `.env`
    file and save it to a variable. We''ll do that with the following lines:'
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  id: totrans-180
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Next, we''ll create a variable named `headers` to hold our authorization information,
    which will be required to make the HTTP request:'
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  id: totrans-182
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'All we need to do now is make the request. We''ll do that with the following
    code that saves the response to a variable named `result`:'
  id: totrans-183
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  id: totrans-184
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'To display the JSON results in the console, we''ll add the last line as follows:'
  id: totrans-185
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  id: totrans-186
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'At this point, you should be able to click the **Run** button in replit, see
    the results in the replit console, and see an output like what''s shown in the
    following screenshot:'
  id: totrans-187
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 5.13 – Results from running the engines.py code'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16854_05_013.jpg)'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.13 – Results from running the engines.py code
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
- en: So, with 12 lines of code (really 9 since three lines are blank), we've made
    our first API request using Python. Now let's take a look at calling the Completions
    endpoint. This one requires a bit more code because we need to send data to the
    endpoint. But as you'll see, it's still pretty simple.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
- en: Calling the completions endpoint
  id: totrans-192
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We''ll start by creating a new file named `completions.py` in the `chapter05`
    folder. Then we''ll edit our `.replit` file so the `chapter05/completions.py`.
    To do that, follow these steps:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
- en: Open your **exploring-gpt3-python** repl.
  id: totrans-194
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the `chapter05` folder in the navigation pane.
  id: totrans-195
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the `completions.py`.
  id: totrans-196
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Edit the `.replit` file so the `chapter05/completions.py` using the following
    text:'
  id: totrans-197
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  id: totrans-198
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Next, we''ll add the following code. It very similar to the starting code in
    `chapter05/engines.py` but we need to add the `json` library and the `Content-Type`
    header. So, your `completions.py` file should start with the following code:'
  id: totrans-199
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  id: totrans-200
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'For the completions endpoint, we''ll be sending parameters. So, the next thing
    we''ll do is add what will become the JSON object that is sent in the HTTP body.
    Recall from [*Chapter 4*](B16854_04_ePub_AM.xhtml#_idTextAnchor074), *Working
    with the OpenAI API*, that there are a number of parameters the completions endpoint
    accepts. But for this example, we''re just going to be sending the `prompt` parameter
    and the `max_tokens` parameter. Here is what the code for that looks like:'
  id: totrans-201
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  id: totrans-202
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'To make the code a bit more readable, we''ll also create a variable for the
    endpoint URL with the following code:'
  id: totrans-203
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE25]'
  id: totrans-204
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'All that''s left is to actually make the request and print out the results.
    This time, we''ll be making an HTTP POST and passing our parameters. So, the code
    is slightly different from the last example but here is what it looks like:'
  id: totrans-205
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  id: totrans-206
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: That's it. Now when you click the **Run** button in replit, you should get a
    result back from the completions endpoint that looks something like the following
    screenshot:![Figure 5.14 – Output from the completions.js
  id: totrans-207
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B16854_05_014.jpg)'
  id: totrans-208
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 5.14 – Output from the completions.js
  id: totrans-209
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'As we discussed in [*Chapter 4*](B16854_04_ePub_AM.xhtml#_idTextAnchor074),
    *Working with the OpenAI API*, the responses returned from the endpoints are in
    JSON format. But if you wanted to format the output, you could extract just what
    you wanted to display from the JSON. For example, you could update `console.log(result.data)`
    with the following code to display the original prompt text `Once upon a time`
    and the completion text returned by the API:'
  id: totrans-210
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  id: totrans-211
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'If you make that change and run the code again, the console output should look
    something like the output in the following screenshot:'
  id: totrans-212
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 5.15 – Formatted results from completions.py'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16854_05_015.jpg)'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.15 – Formatted results from completions.py
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
- en: Alright, let's look at one more example. This time we'll use Python to call
    the search endpoint.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
- en: Calling the search endpoint
  id: totrans-217
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For our search example, we''ll create a new file named `search.py` in the `chapter05`
    folder and we''ll edit our `.replit` file so the `chapter05/search.py`. To do
    that, follow these steps:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
- en: Open your **exploring-gpt3-python** repl.
  id: totrans-219
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the `chapter05` folder in the navigation pane.
  id: totrans-220
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the `search.py`.
  id: totrans-221
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Edit the `.replit` file so the run button executes `chapter05/search.py` using
    the following `run` command:'
  id: totrans-222
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  id: totrans-223
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Next, copy the first nine lines of code from `chapter05/completions.py` into
    `chapter05/search.py` so your `search.py` file starts with the following code:'
  id: totrans-224
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  id: totrans-225
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'For the search endpoint, we''ll be sending parameters as we did in `chapter05/completions.py`.
    So, the next thing we''ll do is add what will become the JSON object that is sent
    in the HTTP body. In [*Chapter 4*](B16854_04_ePub_AM.xhtml#_idTextAnchor074),
    *Working with the OpenAI API*, we covered the parameters for the search endpoint,
    and we''ll use the same example – here is the code we''ll use:'
  id: totrans-226
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  id: totrans-227
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'We''ll add a variable for the endpoint URL just to keep the code a bit easier
    to read:'
  id: totrans-228
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  id: totrans-229
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Finally, we''ll add code to make the request and print out the results:'
  id: totrans-230
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  id: totrans-231
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'That''s it. Now when you click the **Run** button in replit, you should get
    a result back from the completions endpoint that looks something like the following
    screenshot:'
  id: totrans-232
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 5.16 – Results from search.py'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16854_05_016.jpg)'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.16 – Results from search.py
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
- en: The goal of this section was to provide a few simple Python examples that call
    the OpenAI API. At this point, we've covered the basics, but we'll look at more
    in-depth examples in the following chapters.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
- en: Using other programming languages
  id: totrans-237
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we just looked at code examples using JavaScript and Python.
    But again, virtually any modern programming language could have been used. The
    OpenAI API is a standards-based HTTP API, so all you need is a language that can
    make HTTP requests and work with JSON, which, again, is virtually all modern programming
    languages.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
- en: Also, for the examples in this chapter, we called the API directly using general
    HTTP libraries. We could have also used a library specifically built for the OpenAI
    API. Multiple libraries exist for both JavaScript, Python, and a number of other
    languages, including C#/.NET, Go, Java, and Unity, to name a few. You can find
    a list of community-maintained libraries at [https://beta.openai.com/docs/developer-quickstart/community-libraries](https://beta.openai.com/docs/developer-quickstart/community-libraries).
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，在本章的示例中，我们直接使用通用的 HTTP 库调用 API。我们也可以使用专为 OpenAI API 构建的库。JavaScript、Python
    和其他语言包括 C#/.NET、Go、Java 和 Unity 都存在多个库。您可以在[https://beta.openai.com/docs/developer-quickstart/community-libraries](https://beta.openai.com/docs/developer-quickstart/community-libraries)找到社区维护的库列表。
- en: Libraries can simplify working with the OpenAI API. However, it's helpful to
    understand how to call the endpoints directly, and the API is quite simple to
    use. For those reasons, we'll be working directly with the API for all of the
    examples we'll be doing in this book.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 库可以简化与 OpenAI API 的使用。然而，了解如何直接调用端点以及 API 的使用相当简单是很有帮助的。出于这些原因，我们将在本书的所有示例中直接使用
    API。
- en: Summary
  id: totrans-241
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we looked at using the OpenAI API in code. We got started with
    an introduction to the in-browser IDE replit. Then, we looked at code examples
    for calling the engines endpoint, the completions endpoint, and the search endpoint
    using both Node.js/JavaScript and Python. Finally, we discussed other languages
    that could be used and libraries that can simplify working with the OpenAI API.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们在代码中使用了 OpenAI API。我们首先介绍了在浏览器中使用的集成开发环境 replit。然后，我们看了一下调用引擎端点、完成端点和搜索端点的代码示例，使用了
    Node.js/JavaScript 和 Python。最后，我们讨论了其他可以使用的语言和可以简化与 OpenAI API 集成工作的库。
- en: In the next chapter, we will discuss content filtering and look at code examples
    for implementing content filtering using both JavaScript and Python.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将讨论内容过滤，并查看使用 JavaScript 和 Python 实现内容过滤的代码示例。
