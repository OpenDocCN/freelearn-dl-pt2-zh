- en: '*Chapter 5*: Calling the OpenAI API in Code'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, we looked at calling the OpenAI API using Postman.
    In this chapter, you'll learn how to start using the API in code. Since the OpenAI
    API can be used with virtually any programming language, we'll take a look at
    two popular languages, JavaScript and Python. If you're not a programmer, no problem.
    We'll be using an online environment that makes getting started with code super
    simple. Plus, easy-to-follow code examples are provided in both JavaScript and
    Python so you can choose the language that is most comfortable for you. Also,
    for clarity, the examples are purposely written with as little code as possible.
    So, the examples may not always follow coding best practices, but the goal is
    to make following along easy!
  prefs: []
  type: TYPE_NORMAL
- en: 'The topics we''ll cover in this chapter are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Choosing your programming language
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introducing replit.com
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the OpenAI API with Node.js/JavaScript
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the OpenAI API with Python
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using other programming languages
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This chapter requires that you have access to the **OpenAI API**. You can request
    access by visiting the following URL: [https://openai.com](https://openai.com).'
  prefs: []
  type: TYPE_NORMAL
- en: Choosing your programming language
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The OpenAI API is a standards-based API that can be used with virtually any
    modern programming language. In this chapter, we'll walk through examples in JavaScript
    and Python. But these are just two of the many languages that could be used. JavaScript
    and Python were selected because they are both extremely popular and easy to get
    started with. If you're proficient with another modern programming language, that's
    probably the best option for you. However, if you're new to programming, your
    coding skills are rusty, or you're interested in dabbling in a new language, then
    JavaScript and Python are both great languages. But the examples for each language
    will all be the same – just the programming language is different. So, you can
    skip to the section that covers the language you prefer. Or, if you're feeling
    adventurous, of course, you're free to try them both!
  prefs: []
  type: TYPE_NORMAL
- en: Introducing replit
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter and the following chapters, we're going to be writing code.
    So, we'll need a code editor of some sort. As with programming languages, when
    it comes to code editors, there are many to choose from. The right one is a matter
    of personal preference and opinion. For our examples, we'll be using an online
    code editor from [replit.com](http://replit.com).
  prefs: []
  type: TYPE_NORMAL
- en: While all of the examples we'll be working through could be done in any code
    editor, replit lets us skip the installation and software setup process because
    we can do everything in our web browser.
  prefs: []
  type: TYPE_NORMAL
- en: Plus, with a code editor, some setup on your local computer would be required.
    For example, for both JavaScript and Python a runtime environment needs to be
    installed. We're going to skip all that so we can focus more time on learning
    GPT-3 and the OpenAI API.
  prefs: []
  type: TYPE_NORMAL
- en: So, what is `replit.com`? It's an in-browser code editor and **Integrated Development
    Environment** (**IDE**) that lets you start coding in over 50 programming languages
    without spending any time setting up a local development environment. So, for
    our examples, you can jump right into the code even if you don't have your local
    computer set up to run Node.js or Python.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows the replit home page, which is where you''ll
    go to set up a free replit account if you don''t have one:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.1 – The replit home page'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16854_05_001.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.1 – The replit home page
  prefs: []
  type: TYPE_NORMAL
- en: Creating an account is just a matter of clicking the signup button and completing
    the signup process. For the examples in this book, a free account is all you need.
  prefs: []
  type: TYPE_NORMAL
- en: 'After you''ve signed up, you''ll be logged in to the default home screen as
    *Figure 5.2* shows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.2 – Replit default home screen'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16854_05_002.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.2 – Replit default home screen
  prefs: []
  type: TYPE_NORMAL
- en: From here, we'll create two code projects, which are referred to as **repls**
    in replit.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a repl
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We'll be looking at code examples in JavaScript and Python. So, we'll need to
    set up a repl for each. For JavaScript, we'll be using **Node.js** (or just Node),
    which is a runtime environment for JavaScript. We'll talk more about Node in the
    *Using the OpenAI API with Node.js/JavaScript* section. We will start by creating
    a repl for Python. Then, we'll create a repl for Node.js/JavaScript.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a repl for Python
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Lets' start by creating a new repl for Python. If you'd prefer to just follow
    along using just Node.js/JavaScript, you can skip to *Creating a repl for Node.js*.
  prefs: []
  type: TYPE_NORMAL
- en: 'From the home screen, click on the **+ New Repl** button:'
  prefs: []
  type: TYPE_NORMAL
- en: Choose Python from the repl type dropdown.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Name the repl `exploring-gpt3-python`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Create repl** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, we'll create a repl for Node.js. If you'll only be using Python, you can
    skip the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a repl for Node.js
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'If you''re following along with Node.js, you''ll need a Node repl. To create
    a Node repl, use the following steps. From the home screen, click on the **+ New
    Repl** button:'
  prefs: []
  type: TYPE_NORMAL
- en: Choose Node.js from the repl type dropdown.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Name the repl `exploring-gpt3-node`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Create repl** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The following screenshot shows a new repl being created for Python. Again,
    for JavaScript, you''d select Node.js rather than Python and then name the repl
    `exploring-gpt3-node`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.3 – Setting up a repl for Python'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16854_05_003.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.3 – Setting up a repl for Python
  prefs: []
  type: TYPE_NORMAL
- en: 'After a repl is created, you''re automatically redirected to the replit editor
    with your new repl loaded. The editor is broken down into three panes: the **Navigation**
    pane, the **Code editor** pane, and the **Output** pane. New repls include a default
    file that is opened in the code editor (the middle pane) when you first access
    the repl.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the case of a Python project, the default file is named `main.py`; for a
    Node.js project, the default file is named `index.js`. The following screenshot
    shows the replit editor with the `main.py` open in the editor pane. A Node.js
    repl would look the same but the default file would be named `index.js` rather
    than `main.py`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.4 – The Replit editor with a default Python repl'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16854_05_004.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.4 – The Replit editor with a default Python repl
  prefs: []
  type: TYPE_NORMAL
- en: The default file is the code file that gets run by default when the **Run**
    button is clicked. The run button is located in the middle of the top navigation
    bar located just above the three editor panes. The results or output from the
    code is then shown in the replit console – the output pane on the right.
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: The default files are empty when a repl is first created, so clicking the **Run**
    button won't do anything until you write some code.
  prefs: []
  type: TYPE_NORMAL
- en: Above the three editor panes, on the left side of the top navigation bar is
    a hamburger menu (the icon that looks like stacked lines). If you click that icon,
    the main navigation options will be displayed. You can use this menu to navigate
    between repls by selecting the **My repls** menu and choosing the repl you want
    to open.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows the main menu with the **My repls** option selected:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.5 – Accessing the main navigation menu'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16854_05_005.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.5 – Accessing the main navigation menu
  prefs: []
  type: TYPE_NORMAL
- en: After creating a repl for the language you want to work with (or both languages),
    y, you'll want to store your OpenAI API key as an environment variable.
  prefs: []
  type: TYPE_NORMAL
- en: Setting your OpenAI API key as an environment variable
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Environment variables are named values that can be accessed in code but don't
    get shared with others. You typically use environment variables to set parameter
    values that are private or specific to a user, for example, your OpenAI API key.
  prefs: []
  type: TYPE_NORMAL
- en: 'In replit, you can save environment variables by clicking on the padlock icon
    (**Secrets**) in the navigation pane and adding a name and value pair. You''ll
    need to do this for each repl you''re working with – so, one in your **exploring-gpt3-node**
    repl and/or in your **exploring-gpt3-python** repl. To add your OpenAI API Key
    as an environment variable, do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Open your repl.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the padlock icon (**Secrets**) in the middle of the navigation pane like
    the following screenshot shows:![Figure 5.6 – Adding a new secret/environment
    variable in Replit
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B16854_05_006.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 5.6 – Adding a new secret/environment variable in Replit
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: In the `OPENAI_API_KEY`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Value** input text area, paste in your OpenAI API.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Add new secret** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Again, you'll need to add the **OPENAI_API_KEY** secret/environment variable
    to each repl. So, you'll complete the preceding steps twice if you're following
    along with both Node.js and Python.
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: If you're using a free version of replit.com your code will be public by default.
    However, `secrets/environment` `variables` don't get shared publicly but can be
    seen by collaborators who you explicitly invite to the repl. This is important
    because you don't want to share or accidentally expose your OpenAI API key. To
    read more about using secrets and environment variables in replit, visit [https://docs.replit.com/repls/secret-keys](https://docs.replit.com/repls/secret-keys).
  prefs: []
  type: TYPE_NORMAL
- en: Before we start coding, there is one more special file we need to create, the
    `.replit` file.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding and creating the .replit file
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In replit, by default, when you click the `main.py` file will be run for Python
    repls and the `index.js` file will be run for Node.js repls. However, you can
    create a file named `.replit` and change the code file that will be executed by
    the `.replit` file. To create a `.replit` file, do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Open your repl.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the add file icon on the top-right side of the navigation pane.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Name the file `.replit`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following text to the first line of the `.replit` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**For Python repls**:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '**For Node.js repls**:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You might have noticed that we've just added instructions to run the file that
    would be run by default. That's okay for now, we'll come back and edit the `run`
    statement in our `.replit` file later.
  prefs: []
  type: TYPE_NORMAL
- en: After you've created a repl for Node.js and/or a repl for Python with your OpenAI
    API key added as an environment variable, and a `.replit` file, you're ready to
    start coding. So, in the next section, we'll look at examples using Node.js/JavaScript.
    But, if you're just following along with Python, you can skip ahead to *Using
    the OpenAI API in Python*.
  prefs: []
  type: TYPE_NORMAL
- en: Using the OpenAI API with Node.js/JavaScript
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: JavaScript is the first programming language we're going to look at. JavaScript
    was originally created for scripting functionality on web pages. However, today,
    JavaScript can be used for just about any type of application development, from
    building websites and mobile apps to creating command-line tools, chatbots, and
    voice assistants – all thanks to Node. As mentioned previously, Node is a runtime
    environment for JavaScript. It lets us use JavaScript outside the web browser.
  prefs: []
  type: TYPE_NORMAL
- en: JavaScript and Node.js are both free to use and can be run on Linux, macOS,
    and Windows operating systems. But we won't be installing Node.js or running anything
    locally because all of our code will be run on replit. However, none of the code
    we'll be writing is in any way dependent on replit. So, everything we'll be doing
    could be done in any environment that was properly configured for Node development.
  prefs: []
  type: TYPE_NORMAL
- en: Alright, let's get to coding. To use the OpenAI API in Node, we essentially
    just need to do what we did in [*Chapter 4*](B16854_04_ePub_AM.xhtml#_idTextAnchor074),
    *Working with the OpenAI API* – make authenticated HTTP requests to the OpenAI
    API endpoints. But rather than using Postman, we'll be making HTTP requests with
    JavaScript. We'll start with the simplest example – calling the engines endpoint.
  prefs: []
  type: TYPE_NORMAL
- en: Calling the engines endpoint
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We''ll start by setting up a new folder for the code we''ll be working on in
    this chapter. Then we''ll add a file for our first example and update the `.replit`
    file so the replit **Run** button executes our new file. Here are the steps to
    follow:'
  prefs: []
  type: TYPE_NORMAL
- en: Open your **exploring-gpt3-node** repl.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Add folder** icon in the top right of the navigation pane.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Name the folder `chapter05`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the `chapter05` folder and then click the `engines.js`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Edit the `.replit` file so the `chapter05/engines.js` using the following text:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now, open the `chapter05/engines.js` file in your replit editor by clicking
    on the filename in the navigation pane. Your replit editor should look something
    like the following screenshot:![Figure 5.7 – Editing engines.js in the Replit
    editor
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B16854_05_007.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 5.7 – Editing engines.js in the Replit editor
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: So, now we're going to write some code to call `https://api.openai.com/v1/engines`.
    There are a number of ways to make an HTTP request with Node and JavaScript. We
    won't get into all of the different options or the pros and cons of one approach
    over another. We're just going to use a popular code library (referred to as a
    `axios`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Important note
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Packaged and shared code libraries are common across most modern programming
    languages. In Node.js, packages (or modules) are most commonly shared using a
    package manager called npm. To learn more about Npm, you can visit [https://npmjs.com](https://npmjs.com).
    replit automatically manages package dependencies for Node.js projects. However,
    in a local development environment, the Npm command-line tool would most commonly
    be used to manage packages used in code.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'In short, the `axios` module minimizes the code we need to write to make HTTP
    requests using JavaScript. So, we''ll include a reference to the `axios` module
    on the first line of our `engines.js` file with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You''ll recall from [*Chapter 4*](B16854_04_ePub_AM.xhtml#_idTextAnchor074),
    *Working with the OpenAI API*, that all of the OpenAI API endpoints require authorization.
    So, on the next line, we''ll add a variable to hold our OpenAI API key. But rather
    than hardcoding the value, we will pull it from the environment variable we set
    up:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, we''ll create an in-code HTTP client to make the requests. The `axios`
    module makes this super simple. To create the HTTP client instance, we''ll add
    the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Note in the preceding code that we''ve added an HTTP `Authorization` header
    that uses our OpenAI API key as the bearer token. This lets the `axios` client
    make authenticated requests to the API endpoints. All that remains is code to
    actually make the request. Here is what that code looks like:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In the preceding code, we're using the `axios` client instance to make a GET
    request to the `https://api.openai.com/v1/engines` endpoint. Then, we're logging
    the results returned from the endpoint to the console. Or, in the case of an error,
    we're logging the error message to the console.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'At this point, you should be able to click the **Run** button in replit and
    see the results in the replit console, where there''ll be an output like what''s
    shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 5.8 – Results from running the engines.js code'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16854_05_008.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.8 – Results from running the engines.js code
  prefs: []
  type: TYPE_NORMAL
- en: So, with 12 lines of code (really 11 since one line is blank), we've made our
    first API request using JavaScript and Node.
  prefs: []
  type: TYPE_NORMAL
- en: Now let's take a look at calling the Completions endpoint. This one is a bit
    more involved because we need to send data to the endpoint. But still, the code
    is pretty simple.
  prefs: []
  type: TYPE_NORMAL
- en: Calling the Completions endpoint
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now we''ll look at calling the Completions endpoint. We''ll start by creating
    a new file named `completions.js` in the `chapter05` folder and we''ll edit our
    `.replit` file so the **Run** button will execute our new file. To do that, follow
    these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Open your **exploring-gpt3-node** repl.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the `chapter05` folder in the navigation pane.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the `completions.js`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Edit the `.replit` file so the `chapter05/completions.js` using the following
    text:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, copy the first five lines of code from `chapter05/engines.js` into `chapter05/completions.js`
    so your `completions.js` file starts with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'For the Completions endpoint, we''ll be sending parameters. So, the next thing
    we''ll do is add what will become the JSON object that is sent in the HTTP body.
    Recall from [*Chapter 4*](B16854_04_ePub_AM.xhtml#_idTextAnchor074), *Working
    with the OpenAI API*, that there are a number of parameters the Completions endpoint
    accepts. But for this example, we''re just going to be sending the `prompt` parameter
    and the `max_tokens` parameter. Here is what the code for that looks like:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'All that''s left is to actually make the request. This time we''ll be making
    an HTTP POST and passing our parameters. So, the code is slightly different from
    the last example but here is what it looks like:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'That''s it. Now when you click the **Run** button in replit, you should get
    a result back from the Completions endpoint that looks something like the following
    screenshot:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 5.9 – Output from Completions.js'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16854_05_009.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.9 – Output from Completions.js
  prefs: []
  type: TYPE_NORMAL
- en: 'As we discussed in [*Chapter 4*](B16854_04_ePub_AM.xhtml#_idTextAnchor074),
    *Working with the OpenAI API*, the responses returned from the endpoints are in
    JSON format. But if you wanted to format the output, you could extract just what
    you wanted to display from the JSON. For example, you could update `console.log(result.data)`
    with the following code to display the original prompt text `Once upon a time`
    and the completion text returned by the API:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'If you make that change and run the code again, the output will look something
    like the output in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.10 – Formatted results from completions.js'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16854_05_010.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.10 – Formatted results from completions.js
  prefs: []
  type: TYPE_NORMAL
- en: With just two examples, we've covered the basic code you need to work with all
    of the OpenAI endpoints. But before we move on, let's look at one more example
    using the search endpoint.
  prefs: []
  type: TYPE_NORMAL
- en: Calling the search endpoint
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For our search example, we''ll create a new file named `search.js` in the `chapter05`
    folder and we''ll edit our `.replit` file so the `chapter05/search.js`. To do
    that, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Open your **exploring-gpt3-node** repl.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the `chapter05` folder in the navigation pane.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the `search.js`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Edit the `.replit` file so the `chapter05/search.js` using the following `run`
    command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, copy the first five lines of code from `chapter05/engines.js` into `chapter05/search.js`
    so your `search.js` file starts with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'For the search endpoint, we''ll be sending parameters. So, the next thing we''ll
    do is add what will become the JSON object that is sent in the HTTP body. In [*Chapter
    4*](B16854_04_ePub_AM.xhtml#_idTextAnchor074), *Working with the OpenAI API*,
    we covered the parameters for the search endpoint, but here is the code we''ll
    use for this example:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'All that''s left is to actually make the request. Like with the completions
    example, we''ll be making an HTTP POST and passing our parameters:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'That''s it. Now when you click the **Run** button in replit, you should get
    a result back from the search endpoint that looks something like the following
    screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 5.11 – Results from search.js'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16854_05_011.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.11 – Results from search.js
  prefs: []
  type: TYPE_NORMAL
- en: All of the JavaScript examples we covered in this section were pretty simple.
    However, they should give you a general idea of how to get started calling the
    OpenAI API with JavaScript and Node.js, which was the goal. In the following chapters,
    we'll dive deeper, but for now we're going to move on to our next language – Python.
  prefs: []
  type: TYPE_NORMAL
- en: Using the OpenAI API in Python
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Python is another popular programming language, and it is especially popular
    among the machine learning community. It's a robust language but it's also very
    beginner-friendly. If you are coding for the first time, Python will probably
    be one of the easier languages to get started with. Like with JavaScript/Node,
    Python is open source and can be used on Linux, macOS, or Windows. It is also
    included with many operating systems, including macOS and most Linux distributions.
    But since we'll be working in replit, we don't need to worry about Python being
    installed on our local machine. That said, nothing in the code we'll be writing
    depends on anything that is specific to replit. So, everything we'll be doing
    could be done on any computer that is properly configured for doing Python development.
  prefs: []
  type: TYPE_NORMAL
- en: For our first example, we'll look at using Python to call the OpenAI Engines
    endpoint.
  prefs: []
  type: TYPE_NORMAL
- en: Calling the engines endpoint
  prefs: []
  type: TYPE_NORMAL
- en: 'We''ll start by setting up a new folder for the Python code we''ll be working
    on in this chapter. Then, we''ll add a file for our first example and update the
    `.replit` file so the replit **Run** button executes our new file. Here are the
    steps to follow:'
  prefs: []
  type: TYPE_NORMAL
- en: Open your **exploring-gpt3-python** repl.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Add folder** icon in the top right of the navigation pane.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Name the folder `chapter05`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the `chapter05` folder, then click the `engines.py`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Edit the `.replit` file so the `chapter05/engines.py` using the following text:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now, open the `chapter05/engines.py` file in your replit editor by clicking
    on the filename in the navigation pane. Your replit editor should look something
    like the following screenshot:![Figure 5.12 – Editing engines.py in the Replit
    editor
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B16854_05_012.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 5.12 – Editing engines.py in the Replit editor
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: So, now we're going to write some Python code to make an HTTP request to the
    `https://api.openai.com/v1/engines` endpoint. There are a number of ways to make
    an HTTP request with Python. We won't get into all of the different options or
    the pros and cons of one approach over another. We're just going to use the popular
    `requests` library.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Important note
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Packaged and shared code libraries are common across most modern programming
    languages. In Python, packages (or libraries) are most commonly shared using a
    package manager called PIP. To learn more about PIP, you can visit [https://pypi.org/project/pip/](https://pypi.org/project/pip/).
    replit automatically manages package dependencies for Python projects. However,
    in a local development environment, the PIP command-line tool would most commonly
    be used to manage Python packages.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'In short, the `requests` library minimizes the code we need to write to make
    HTTP requests using Python. So, we''ll include a reference to the `requests` library
    on the first line of our `engines.py` file with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You''ll recall from [*Chapter 4*](B16854_04_ePub_AM.xhtml#_idTextAnchor074),
    *Working with the OpenAI API*, that all of the OpenAI API endpoints require authorization.
    So, next we''ll add some code to get the API key that we set up in the `.env`
    file and save it to a variable. We''ll do that with the following lines:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, we''ll create a variable named `headers` to hold our authorization information,
    which will be required to make the HTTP request:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'All we need to do now is make the request. We''ll do that with the following
    code that saves the response to a variable named `result`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To display the JSON results in the console, we''ll add the last line as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'At this point, you should be able to click the **Run** button in replit, see
    the results in the replit console, and see an output like what''s shown in the
    following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 5.13 – Results from running the engines.py code'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16854_05_013.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.13 – Results from running the engines.py code
  prefs: []
  type: TYPE_NORMAL
- en: So, with 12 lines of code (really 9 since three lines are blank), we've made
    our first API request using Python. Now let's take a look at calling the Completions
    endpoint. This one requires a bit more code because we need to send data to the
    endpoint. But as you'll see, it's still pretty simple.
  prefs: []
  type: TYPE_NORMAL
- en: Calling the completions endpoint
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We''ll start by creating a new file named `completions.py` in the `chapter05`
    folder. Then we''ll edit our `.replit` file so the `chapter05/completions.py`.
    To do that, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Open your **exploring-gpt3-python** repl.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the `chapter05` folder in the navigation pane.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the `completions.py`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Edit the `.replit` file so the `chapter05/completions.py` using the following
    text:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, we''ll add the following code. It very similar to the starting code in
    `chapter05/engines.py` but we need to add the `json` library and the `Content-Type`
    header. So, your `completions.py` file should start with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'For the completions endpoint, we''ll be sending parameters. So, the next thing
    we''ll do is add what will become the JSON object that is sent in the HTTP body.
    Recall from [*Chapter 4*](B16854_04_ePub_AM.xhtml#_idTextAnchor074), *Working
    with the OpenAI API*, that there are a number of parameters the completions endpoint
    accepts. But for this example, we''re just going to be sending the `prompt` parameter
    and the `max_tokens` parameter. Here is what the code for that looks like:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To make the code a bit more readable, we''ll also create a variable for the
    endpoint URL with the following code:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'All that''s left is to actually make the request and print out the results.
    This time, we''ll be making an HTTP POST and passing our parameters. So, the code
    is slightly different from the last example but here is what it looks like:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: That's it. Now when you click the **Run** button in replit, you should get a
    result back from the completions endpoint that looks something like the following
    screenshot:![Figure 5.14 – Output from the completions.js
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B16854_05_014.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 5.14 – Output from the completions.js
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'As we discussed in [*Chapter 4*](B16854_04_ePub_AM.xhtml#_idTextAnchor074),
    *Working with the OpenAI API*, the responses returned from the endpoints are in
    JSON format. But if you wanted to format the output, you could extract just what
    you wanted to display from the JSON. For example, you could update `console.log(result.data)`
    with the following code to display the original prompt text `Once upon a time`
    and the completion text returned by the API:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If you make that change and run the code again, the console output should look
    something like the output in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 5.15 – Formatted results from completions.py'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16854_05_015.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.15 – Formatted results from completions.py
  prefs: []
  type: TYPE_NORMAL
- en: Alright, let's look at one more example. This time we'll use Python to call
    the search endpoint.
  prefs: []
  type: TYPE_NORMAL
- en: Calling the search endpoint
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For our search example, we''ll create a new file named `search.py` in the `chapter05`
    folder and we''ll edit our `.replit` file so the `chapter05/search.py`. To do
    that, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Open your **exploring-gpt3-python** repl.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the `chapter05` folder in the navigation pane.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the `search.py`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Edit the `.replit` file so the run button executes `chapter05/search.py` using
    the following `run` command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, copy the first nine lines of code from `chapter05/completions.py` into
    `chapter05/search.py` so your `search.py` file starts with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'For the search endpoint, we''ll be sending parameters as we did in `chapter05/completions.py`.
    So, the next thing we''ll do is add what will become the JSON object that is sent
    in the HTTP body. In [*Chapter 4*](B16854_04_ePub_AM.xhtml#_idTextAnchor074),
    *Working with the OpenAI API*, we covered the parameters for the search endpoint,
    and we''ll use the same example – here is the code we''ll use:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We''ll add a variable for the endpoint URL just to keep the code a bit easier
    to read:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, we''ll add code to make the request and print out the results:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'That''s it. Now when you click the **Run** button in replit, you should get
    a result back from the completions endpoint that looks something like the following
    screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 5.16 – Results from search.py'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16854_05_016.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.16 – Results from search.py
  prefs: []
  type: TYPE_NORMAL
- en: The goal of this section was to provide a few simple Python examples that call
    the OpenAI API. At this point, we've covered the basics, but we'll look at more
    in-depth examples in the following chapters.
  prefs: []
  type: TYPE_NORMAL
- en: Using other programming languages
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we just looked at code examples using JavaScript and Python.
    But again, virtually any modern programming language could have been used. The
    OpenAI API is a standards-based HTTP API, so all you need is a language that can
    make HTTP requests and work with JSON, which, again, is virtually all modern programming
    languages.
  prefs: []
  type: TYPE_NORMAL
- en: Also, for the examples in this chapter, we called the API directly using general
    HTTP libraries. We could have also used a library specifically built for the OpenAI
    API. Multiple libraries exist for both JavaScript, Python, and a number of other
    languages, including C#/.NET, Go, Java, and Unity, to name a few. You can find
    a list of community-maintained libraries at [https://beta.openai.com/docs/developer-quickstart/community-libraries](https://beta.openai.com/docs/developer-quickstart/community-libraries).
  prefs: []
  type: TYPE_NORMAL
- en: Libraries can simplify working with the OpenAI API. However, it's helpful to
    understand how to call the endpoints directly, and the API is quite simple to
    use. For those reasons, we'll be working directly with the API for all of the
    examples we'll be doing in this book.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we looked at using the OpenAI API in code. We got started with
    an introduction to the in-browser IDE replit. Then, we looked at code examples
    for calling the engines endpoint, the completions endpoint, and the search endpoint
    using both Node.js/JavaScript and Python. Finally, we discussed other languages
    that could be used and libraries that can simplify working with the OpenAI API.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will discuss content filtering and look at code examples
    for implementing content filtering using both JavaScript and Python.
  prefs: []
  type: TYPE_NORMAL
