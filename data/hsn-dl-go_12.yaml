- en: Building a Deep Learning Pipeline
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建深度学习管道
- en: So far, for the various deep learning architectures we've discussed, we have
    assumed that our input data is static. We have had fixed sets of movie reviews,
    images, or text to process.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，对于我们讨论过的各种深度学习架构，我们假设我们的输入数据是静态的。我们处理的是固定的电影评论集、图像或文本。
- en: In the real world, whether your organization or project includes data from self-driving
    cars, IoT sensors, security cameras, or customer-product usage, your data generally
    changes over time. Therefore, you need a way of integrating this new data so that
    you can update your models. The structure of the data may change too, and in the
    case of customer or audience data, there may be new transformations you need to
    apply to the data. Also, dimensions may be added or removed in order to test whether
    they impact the quality of your predictions, are no longer relevant, or fall foul
    of privacy legislation. What do we do in these scenarios?
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在现实世界中，无论您的组织或项目是否包括来自自动驾驶汽车、物联网传感器、安全摄像头或客户产品使用的数据，您的数据通常会随时间变化。因此，您需要一种方式来集成这些新数据，以便更新您的模型。数据的结构可能也会发生变化，在客户或观众数据的情况下，可能需要应用新的转换操作。此外，为了测试它们对预测质量的影响，可能会添加或删除维度，这些维度可能不再相关或违反隐私法规。在这些情况下，我们该怎么办？
- en: This is where a tool such as Pachyderm is useful. We would like to know what
    data we have, where we have it, and how we can ensure that the data is feeding
    to our model.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: Pachyderm 就是这样一个有用的工具。我们想知道我们拥有什么数据，我们在哪里拥有它，以及如何确保数据被输入到我们的模型中。
- en: We will now look into using the Pachyderm tool to handle dynamic input values
    in our networks. This will help us to prepare for the real-world use and deployment
    of our systems.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将研究如何使用 Pachyderm 工具处理网络中的动态输入值。这将帮助我们准备好在现实世界中使用和部署我们的系统。
- en: 'By the end of this chapter, you will have learned about the following:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 通过本章结束时，您将学到以下内容：
- en: Exploring Pachyderm
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 探索 Pachyderm
- en: Integrating our CNN
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 集成我们的 CNN
- en: Exploring Pachyderm
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索 Pachyderm
- en: Our focus for this book is on developing deep learning systems in Go. So, naturally,
    now that we are talking about how to manage the data that we feed to our networks,
    let's take a look at a tool to do so that is also written in Go.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 本书的重点是在 Go 中开发深度学习系统。因此，自然而然地，现在我们正在讨论如何管理输入到我们网络中的数据，让我们看看一个同样用 Go 编写的工具。
- en: Pachyderm is a mature and scalable tool that offers containerized data pipelines.
    In these, everything you could possibly need, from data to tools, is held together
    in a single place where deployments can be maintained and managed and versioning
    for the data itself. The Pachyderm team sell their tool as **Git for data**, which
    is a useful analogy. Ideally, we want to version the entire pipeline so that we
    know which data was used to train, and which, in turn, gave us the specific prediction
    of *X*.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: Pachyderm 是一个成熟且可扩展的工具，提供容器化数据管道。在这些管道中，你可以从数据到工具等一切需求都集中在一个地方，可以维护和管理部署，并对数据本身进行版本控制。Pachyderm
    团队将他们的工具称为**数据的 Git**，这是一个有用的类比。理想情况下，我们希望对整个数据管道进行版本控制，以便知道用于训练的数据，以及由此给出的特定预测*X*。
- en: Pachyderm removes much of the complexity of managing these pipelines. Both Docker
    and Kubernetes run under the hood. We will explore each of these tools in greater
    detail in the next chapter, but for now, all we need to know is that they are
    critical for enabling reproducible builds, as well as scalable distributed training
    of our models.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: Pachyderm 大大简化了管理这些管道的复杂性。Docker 和 Kubernetes 都在幕后运行。我们将在下一章节更详细地探讨这些工具，但现在我们只需知道它们对于实现可复制的构建以及可扩展的模型分布式训练至关重要。
- en: Installing and configuring Pachyderm
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装和配置 Pachyderm
- en: A lot of excellent documentation for Pachyderm is available, and we won't attempt
    to rehash all of that here. Instead, we will take you through the basics and build
    a tutorial for managing a simple data pipeline to provide versioned image data
    to the CNN we built in [Chapter 6](a68dc23c-8119-4444-ac6f-beec845c9173.xhtml),
    *Object Recognition with Convolutional Neural Networks*.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: Pachyderm 有大量出色的文档可供参考，我们不会在这里重新讨论所有内容。相反，我们将带您了解基础知识，并构建一个简单数据管道的教程，以向我们在[第6章](a68dc23c-8119-4444-ac6f-beec845c9173.xhtml)中构建的
    CNN 提供版本化图像数据，*使用卷积神经网络进行对象识别*。
- en: First, you need to install Docker Desktop and enable Kubernetes for your respective
    OS. For this example, we are using macOS.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，您需要安装 Docker Desktop 并为您的操作系统启用 Kubernetes。在本示例中，我们使用 macOS。
- en: 'Full instructions can be found at [https://docs.docker.com/docker-for-mac/install/](https://docs.docker.com/docker-for-mac/install/),
    but let''s go over them in brief now:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 完整的安装说明请参阅[https://docs.docker.com/docker-for-mac/install/](https://docs.docker.com/docker-for-mac/install/)，以下是简要说明：
- en: Download the Docker `.dmg` file
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下载 Docker 的 `.dmg` 文件
- en: Install or launch the file
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装或启动文件
- en: Enable Kubernetes
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启用 Kubernetes
- en: 'To install and run Pachyderm, follow these steps:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装并运行 Pachyderm，请按照以下步骤操作：
- en: 'To enable Kubernetes, select the appropriate checkbox after launching the Docker
    settings, as follows:'
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要启用 Kubernetes，在启动 Docker 设置后选择适当的复选框，如下所示：
- en: '![](img/746cf29d-53a7-4ce6-b1fc-eee1b0b44189.png)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![](img/746cf29d-53a7-4ce6-b1fc-eee1b0b44189.png)'
- en: 'Ensure that you have a couple of green blobs indicating that your Docker and
    Kubernetes installations are running. If so, we can confirm that things look okay
    under the hood by dropping into a Terminal and running the following command:'
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保有几个绿色的圆形图标显示您的 Docker 和 Kubernetes 安装正在运行。如果是这样，我们可以通过进入终端并运行以下命令确认底层情况是否正常：
- en: '[PRE0]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Before installing Pachyderm itself, ensure that the cluster is running. We
    are using Homebrew to install Pachyderm by using the following command (please
    note that you will need to have the latest version of Xcode installed):'
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在安装 Pachyderm 之前，请确保集群正在运行。我们使用 Homebrew 安装 Pachyderm，通过以下命令（请注意，您需要安装最新版本的
    Xcode）：
- en: '[PRE1]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'You should now be able to launch the Pachyderm command-line tool. First, check
    that the tool has been installed successfully by running the following command
    and observing the output:'
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在您应该能够启动 Pachyderm 命令行工具了。首先，通过运行以下命令确认工具已成功安装并观察输出：
- en: '[PRE2]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'We are almost done setting up our cluster so that we can focus on getting and
    storing data. The last thing to do is deploy Pachyderm on Kubernetes with the
    following command:'
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们几乎完成了集群设置，现在可以专注于获取和存储数据。最后一件事是使用以下命令在 Kubernetes 上部署 Pachyderm：
- en: '[PRE3]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Execute the following command to check the status of your cluster. If you run
    the command just after deploying, you should see the containers being created:'
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行以下命令检查集群状态。如果您在部署后立即运行该命令，应该会看到容器正在创建中：
- en: '[PRE4]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'They then transition to `Running`:'
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后它们会过渡到 `Running` 状态：
- en: '[PRE5]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The following section looks at how the data will be prepared.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来的部分将介绍数据的准备工作。
- en: Getting data into Pachyderm
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将数据导入 Pachyderm
- en: 'Let''s prepare our data. In this case, we are using the CIFAR-10 dataset from
    [Chapter 6](a68dc23c-8119-4444-ac6f-beec845c9173.xhtml), *Object Recognition with
    Convolutional Neural Networks*. If you need a refresher, pull the data from the
    source at the University of Toronto, like so:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们准备我们的数据。在这种情况下，我们使用来自[第 6 章](a68dc23c-8119-4444-ac6f-beec845c9173.xhtml)《使用卷积神经网络进行对象识别》的
    CIFAR-10 数据集。如果您需要恢复，请从多伦多大学的源头拉取数据，如下所示：
- en: '[PRE6]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Extract the data to a temporary directory, and create `repo` in Pachyderm:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 将数据提取到临时目录，并在 Pachyderm 中创建 `repo`：
- en: '[PRE7]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Now that we've got a repository, let's fill it with our CIFAR-10 image data.
    First, let's create individual directories and break up the various CIFAR-10 files
    so that we can just dump an entire directory of files (from our data or training
    sets).
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了一个存储库，让我们用 CIFAR-10 图像数据填充它。首先，让我们创建各个目录并分解各种 CIFAR-10 文件，以便我们可以将整个文件夹（从我们的数据或训练集）直接倒入。
- en: 'Now we can execute the following command and then confirm that the data has
    made it to `repo` successfully:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以执行以下命令，然后确认数据已成功传输到 `repo`：
- en: '[PRE8]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'We can drill down to details of the files that `repo` contains:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以深入了解 `repo` 包含的文件的详细信息：
- en: '[PRE9]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Integrating our CNN
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 集成我们的 CNN
- en: We will now take our CNN example from an earlier chapter and make some updates
    that are necessary to package and deploy the network using data supplied by Pachyderm.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将从前面章节的 CNN 示例中获取示例，并进行一些必要的更新，以使用 Pachyderm 提供的数据打包和部署网络。
- en: Creating a Docker image of our CNN
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建我们的 CNN 的 Docker 镜像
- en: Pachyderm data pipelines are dependent on prebaked Docker images. The internet
    is full of Docker tutorials, so we'll keep things simple here and discuss what
    we need to do to take advantage of the simple deployment steps for any Go application.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: Pachyderm 数据流水线依赖于预先配置的 Docker 镜像。互联网上有很多 Docker 教程，因此我们在这里保持简单，讨论利用简单部署步骤为任何
    Go 应用程序带来优势的所需操作。
- en: 'Let''s take a look at our Dockerfile:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看我们的 Dockerfile：
- en: '[PRE10]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: And that's it! We're simply fetching the Go 1.12 image from Docker Hub and dropping
    our CIFAR CNN into our build. The final piece of our Dockerfile is a command to
    set `GOPATH` and meet our dependencies (for example, installing Gorgonia).
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 就是这样！我们只需从 Docker Hub 获取 Go 1.12 镜像并将我们的 CIFAR CNN 放入我们的构建中。我们 Dockerfile 的最后一部分是设置
    `GOPATH` 并满足我们的依赖项（例如，安装 Gorgonia）的命令。
- en: 'Execute the following command to build the Docker image and observe the output: `docker
    build -t cifarcnn`:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下命令来构建 Docker 镜像并观察输出：`docker build -t cifarcnn`：
- en: '[PRE11]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Our container is now ready to be referenced in the Pachyderm data pipeline specification.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的容器现在已准备好被引用在 Pachyderm 数据管道规范中。
- en: Updating our CNN to save the model
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更新我们的 CNN 以保存模型
- en: 'We need to add a simple function to our CNN example to ensure the model that
    gets produced is saved, so it can be managed as an object by Pachyderm. Let''s
    add the following to `main.go`:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要向我们的 CNN 示例中添加一个简单的函数，以确保生成的模型被保存，这样它就可以被 Pachyderm 作为对象管理。让我们将以下内容添加到 `main.go`
    中：
- en: '[PRE12]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Creating a data pipeline
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建数据管道
- en: Now we need to specify a data pipeline in standard JSON. Here, we are mapping
    a repository to a directory and executing our network in either training or inference
    mode.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们需要在标准 JSON 中指定一个数据管道。在这里，我们将一个存储库映射到一个目录，并在训练或推断模式下执行我们的网络。
- en: 'Let''s look at our `cifar_cnn.json` file:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看我们的 `cifar_cnn.json` 文件：
- en: '[PRE13]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: The options we've chosen here are straightforward, and you can see the references
    to the Docker image, commands, and switches, as well as `repo` and the mount point
    we're specifying. One thing to note is the `parallelism_spec` option. Setting
    this above the default of `1` allows us to scale a specific pipeline stage as
    required; for example, during the inference phase.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这里选择的选项很简单，您可以看到对 Docker 镜像、命令和开关的引用，以及 `repo` 和我们指定的挂载点。请注意 `parallelism_spec`
    选项。将其设置为默认值 `1` 以上，允许我们根据需要扩展特定管道阶段；例如，在推断阶段。
- en: 'We can now create the pipeline from the preceding template:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以从上述模板创建管道：
- en: '[PRE14]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'This returns you to Command Prompt if there is no error. You can then check
    the status of the pipeline:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 如果没有错误，这将返回您到命令提示符。然后，您可以检查管道的状态：
- en: '[PRE15]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'We can change the level of *parallelism* dynamically and push the configuration
    out to our cluster by updating our template:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以动态调整*并行度*的级别，并通过更新我们的模板将配置推送到我们的集群中：
- en: '[PRE16]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Then, we can update our cluster and check the status of our job and the `k8s`
    cluster pods:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们可以更新我们的集群并检查我们的作业和 `k8s` 集群的 pod 状态：
- en: '[PRE17]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'After giving it some time to run (and using `pachctl logs` to inspect progress),
    we can see our successful job:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 等待一段时间运行（并使用 `pachctl logs` 检查进度），我们可以看到我们成功的作业：
- en: '[PRE18]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Interchangeable models
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 可互换的模型
- en: The flexibility of Pachyderm pipelines allows you to easily swap out one model
    for another with a simple update or push of the JSON pipeline we used previously.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: Pachyderm 管道的灵活性使您可以通过简单的更新或推送我们先前使用的 JSON 管道来轻松地将一个模型替换为另一个模型。
- en: What's the point in specifying a pipeline in JSON? It's to make it repeatable!
    Pipelines reprocess data (in our case, to make new predictions about the classes
    of labels) each time their data is updated.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 指定在 JSON 中指定管道的意义是什么？它是为了使其可重复！管道每次更新其数据（在我们的案例中，是为了对标签类别进行新预测）时都会重新处理数据。
- en: 'Here, we update the `image` flag in `cifa_cnn.json` to refer to a version of
    our containerized CNN that, for whatever reason, does not contain dropout:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们更新 `cifa_cnn.json` 中的 `image` 标志，以引用我们容器化的 CNN 的一个版本，这个版本由于某些原因不包含 dropout：
- en: '[PRE19]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'We can then update the pipeline on the cluster, like so:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们可以像这样在集群上更新管道：
- en: '[PRE20]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Mapping predictions to models
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将预测映射到模型
- en: A great feature of Pachyderm—particularly for enterprise use cases—is the ability
    to version both your models and your predictions. Say you are predicting the chance
    a customer will repay a loan, and you see a batch of strange predictions. As part
    of troubleshooting why the model has made these decisions, if you are training
    multiple models across a large team, trawling through email chains and commit
    histories would be a bad idea!
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: Pachyderm 的一个重要特性——特别是对于企业用例——是能够对模型和预测进行版本控制。比如说，你在预测客户偿还贷款的可能性时，看到了一批奇怪的预测结果。在排查模型为何做出这些决策的问题时，如果你正在对大团队进行多模型训练，那么翻阅电子邮件和提交历史记录将是一个糟糕的主意！
- en: 'So, work backward from the inference to the model, and simply run the following
    command:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，从推断开始到模型，只需运行以下命令：
- en: '[PRE21]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'You can then take the relevant commit hash and feed it to the following command,
    observing the details of the output:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 然后您可以获取相关的提交哈希并将其提供给以下命令，观察输出的详细信息：
- en: '[PRE22]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'You can see the exact commit of the model that was used to produce this prediction,
    the prediction''s provenance, and in turn, the data that was used to train the
    model:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以看到用于生成此预测的模型的确切提交，预测的来源，以及用于训练模型的数据：
- en: '[PRE23]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Using the Pachyderm dashboard
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Pachyderm 仪表板
- en: Technically, this is a feature of Pachyderm **Enterprise**, but since we want
    to be as inclusive as possible when it comes to the options you have, regardless
    of your use case, we're going to briefly cover the *dashboard* tool. Even if you
    have no need for an easy visual overview of your pipelines and data, 14-day trials
    are available for you to do some exploring of the feature set.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 从技术上讲，这是 Pachyderm **企业版**的一个功能，但由于我们希望尽可能包容您的使用情况选择，无论您的用例如何，我们将简要介绍 *仪表板*
    工具。即使您不需要一个简单的视觉概览您的管道和数据，也可以通过14天的试用来探索其功能集。
- en: 'Launch `http://localhost:30800`. You will be presented with a basic screen
    that includes the following:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 启动 `http://localhost:30800`。您将看到一个基本的屏幕，其中包括以下内容：
- en: Repositories (holding our CIFAR-10 data)
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 仓库（保存我们的 CIFAR-10 数据）
- en: Pipelines
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 管道
- en: Jobs or logs
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 作业或日志
- en: Settings
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置
- en: 'Let''s have a look at the following screenshot:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看下面的截图：
- en: '![](img/29c1d92a-a712-4bf2-91e5-3e7bb453cdbf.png)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![](img/29c1d92a-a712-4bf2-91e5-3e7bb453cdbf.png)'
- en: 'As you may recall, Pachyderm wants you to think of your data repositories as
    Git repositories. This is clearly visible when you drill down into the next screen:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你可能记得的那样，Pachyderm 希望你将你的数据仓库视为 Git 仓库。当你深入到下一个屏幕时，这一点显而易见：
- en: '![](img/0bae38f6-ee99-4ef7-97ff-c3675859aad2.png)'
  id: totrans-98
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0bae38f6-ee99-4ef7-97ff-c3675859aad2.png)'
- en: The dashboard offers a familiar GUI interface for the `pachctl` tool we've been
    using up until now.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 仪表板为我们到目前为止一直在使用的 `pachctl` 工具提供了一个熟悉的 GUI 界面。
- en: Summary
  id: totrans-100
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we have gotten practical and looked at what is involved in
    starting the augmentation of input or output components of your model, and what
    tools we can use to do that in a maintainable and traceable way. At a high level,
    we learned about what a data pipeline is and why it is important, how to build/deploy/maintain
    pipelines in Pachyderm, and what tools to use to visualize our repositories and
    pipelines.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们进行了实际操作，并了解了如何以可维护和可追踪的方式开始增强模型输入或输出组件的过程，以及可以使用哪些工具完成这些操作。从高层次来看，我们了解了数据管道的概念及其重要性，如何在
    Pachyderm 中构建/部署/维护管道，以及用于可视化我们的仓库和管道的工具。
- en: In the next chapter, we will look at a number of the technologies that sit underneath
    Pachyderm, including Docker and Kubernetes, and how we can use these tools to
    deploy stacks to the cloud infrastructure.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将深入探讨 Pachyderm 下面的一些技术，包括 Docker 和 Kubernetes，以及如何使用这些工具部署堆栈到云基础设施。
